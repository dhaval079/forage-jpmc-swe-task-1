From 56c06721765369f083a0c4183e8c7487061fc2ee Mon Sep 17 00:00:00 2001
From: Dhaval Rupapara <rupaparadhaval1234@gmail.com>
Date: Sun, 29 Oct 2023 22:30:50 +0530
Subject: [PATCH] third commit

---
 client3.py                                    |   11 +-
 requirements.txt                              |    1 +
 .../__pycache__/six.cpython-311.pyc           |  Bin 0 -> 46423 bytes
 venv/Lib/site-packages/dateutil/__init__.py   |    8 +
 .../__pycache__/__init__.cpython-311.pyc      |  Bin 0 -> 477 bytes
 .../__pycache__/_common.cpython-311.pyc       |  Bin 0 -> 2024 bytes
 .../__pycache__/_version.cpython-311.pyc      |  Bin 0 -> 268 bytes
 .../__pycache__/easter.cpython-311.pyc        |  Bin 0 -> 2950 bytes
 .../__pycache__/relativedelta.cpython-311.pyc |  Bin 0 -> 26576 bytes
 .../__pycache__/rrule.cpython-311.pyc         |  Bin 0 -> 74072 bytes
 .../__pycache__/tzwin.cpython-311.pyc         |  Bin 0 -> 237 bytes
 .../__pycache__/utils.cpython-311.pyc         |  Bin 0 -> 2706 bytes
 venv/Lib/site-packages/dateutil/_common.py    |   43 +
 venv/Lib/site-packages/dateutil/_version.py   |    5 +
 venv/Lib/site-packages/dateutil/easter.py     |   89 +
 .../site-packages/dateutil/parser/__init__.py |   61 +
 .../__pycache__/__init__.cpython-311.pyc      |  Bin 0 -> 3162 bytes
 .../__pycache__/_parser.cpython-311.pyc       |  Bin 0 -> 69812 bytes
 .../__pycache__/isoparser.cpython-311.pyc     |  Bin 0 -> 17383 bytes
 .../site-packages/dateutil/parser/_parser.py  | 1613 ++++++++++++++
 .../dateutil/parser/isoparser.py              |  416 ++++
 .../site-packages/dateutil/relativedelta.py   |  599 ++++++
 venv/Lib/site-packages/dateutil/rrule.py      | 1737 ++++++++++++++++
 .../Lib/site-packages/dateutil/tz/__init__.py |   12 +
 .../tz/__pycache__/__init__.cpython-311.pyc   |  Bin 0 -> 831 bytes
 .../tz/__pycache__/_common.cpython-311.pyc    |  Bin 0 -> 15269 bytes
 .../tz/__pycache__/_factories.cpython-311.pyc |  Bin 0 -> 5228 bytes
 .../tz/__pycache__/tz.cpython-311.pyc         |  Bin 0 -> 70528 bytes
 .../tz/__pycache__/win.cpython-311.pyc        |  Bin 0 -> 18417 bytes
 venv/Lib/site-packages/dateutil/tz/_common.py |  419 ++++
 .../site-packages/dateutil/tz/_factories.py   |   80 +
 venv/Lib/site-packages/dateutil/tz/tz.py      | 1849 +++++++++++++++++
 venv/Lib/site-packages/dateutil/tz/win.py     |  370 ++++
 venv/Lib/site-packages/dateutil/tzwin.py      |    2 +
 venv/Lib/site-packages/dateutil/utils.py      |   71 +
 .../dateutil/zoneinfo/__init__.py             |  167 ++
 .../__pycache__/__init__.cpython-311.pyc      |  Bin 0 -> 8483 bytes
 .../__pycache__/rebuild.cpython-311.pyc       |  Bin 0 -> 4653 bytes
 .../zoneinfo/dateutil-zoneinfo.tar.gz         |  Bin 0 -> 174394 bytes
 .../dateutil/zoneinfo/rebuild.py              |   75 +
 .../python_dateutil-2.8.2.dist-info/INSTALLER |    1 +
 .../python_dateutil-2.8.2.dist-info/LICENSE   |   54 +
 .../python_dateutil-2.8.2.dist-info/METADATA  |  204 ++
 .../python_dateutil-2.8.2.dist-info/RECORD    |   45 +
 .../python_dateutil-2.8.2.dist-info/REQUESTED |    0
 .../python_dateutil-2.8.2.dist-info/WHEEL     |    6 +
 .../top_level.txt                             |    1 +
 .../python_dateutil-2.8.2.dist-info/zip-safe  |    1 +
 .../six-1.16.0.dist-info/INSTALLER            |    1 +
 .../six-1.16.0.dist-info/LICENSE              |   18 +
 .../six-1.16.0.dist-info/METADATA             |   49 +
 .../site-packages/six-1.16.0.dist-info/RECORD |    8 +
 .../site-packages/six-1.16.0.dist-info/WHEEL  |    6 +
 .../six-1.16.0.dist-info/top_level.txt        |    1 +
 venv/Lib/site-packages/six.py                 |  998 +++++++++
 55 files changed, 9019 insertions(+), 2 deletions(-)
 create mode 100644 venv/Lib/site-packages/__pycache__/six.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/__init__.py
 create mode 100644 venv/Lib/site-packages/dateutil/__pycache__/__init__.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/__pycache__/_common.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/__pycache__/_version.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/__pycache__/easter.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/__pycache__/relativedelta.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/__pycache__/rrule.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/__pycache__/tzwin.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/__pycache__/utils.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/_common.py
 create mode 100644 venv/Lib/site-packages/dateutil/_version.py
 create mode 100644 venv/Lib/site-packages/dateutil/easter.py
 create mode 100644 venv/Lib/site-packages/dateutil/parser/__init__.py
 create mode 100644 venv/Lib/site-packages/dateutil/parser/__pycache__/__init__.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/parser/__pycache__/_parser.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/parser/__pycache__/isoparser.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/parser/_parser.py
 create mode 100644 venv/Lib/site-packages/dateutil/parser/isoparser.py
 create mode 100644 venv/Lib/site-packages/dateutil/relativedelta.py
 create mode 100644 venv/Lib/site-packages/dateutil/rrule.py
 create mode 100644 venv/Lib/site-packages/dateutil/tz/__init__.py
 create mode 100644 venv/Lib/site-packages/dateutil/tz/__pycache__/__init__.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/tz/__pycache__/_common.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/tz/__pycache__/_factories.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/tz/__pycache__/tz.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/tz/__pycache__/win.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/tz/_common.py
 create mode 100644 venv/Lib/site-packages/dateutil/tz/_factories.py
 create mode 100644 venv/Lib/site-packages/dateutil/tz/tz.py
 create mode 100644 venv/Lib/site-packages/dateutil/tz/win.py
 create mode 100644 venv/Lib/site-packages/dateutil/tzwin.py
 create mode 100644 venv/Lib/site-packages/dateutil/utils.py
 create mode 100644 venv/Lib/site-packages/dateutil/zoneinfo/__init__.py
 create mode 100644 venv/Lib/site-packages/dateutil/zoneinfo/__pycache__/__init__.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/zoneinfo/__pycache__/rebuild.cpython-311.pyc
 create mode 100644 venv/Lib/site-packages/dateutil/zoneinfo/dateutil-zoneinfo.tar.gz
 create mode 100644 venv/Lib/site-packages/dateutil/zoneinfo/rebuild.py
 create mode 100644 venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/INSTALLER
 create mode 100644 venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/LICENSE
 create mode 100644 venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/METADATA
 create mode 100644 venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/RECORD
 create mode 100644 venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/REQUESTED
 create mode 100644 venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/WHEEL
 create mode 100644 venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/top_level.txt
 create mode 100644 venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/zip-safe
 create mode 100644 venv/Lib/site-packages/six-1.16.0.dist-info/INSTALLER
 create mode 100644 venv/Lib/site-packages/six-1.16.0.dist-info/LICENSE
 create mode 100644 venv/Lib/site-packages/six-1.16.0.dist-info/METADATA
 create mode 100644 venv/Lib/site-packages/six-1.16.0.dist-info/RECORD
 create mode 100644 venv/Lib/site-packages/six-1.16.0.dist-info/WHEEL
 create mode 100644 venv/Lib/site-packages/six-1.16.0.dist-info/top_level.txt
 create mode 100644 venv/Lib/site-packages/six.py

diff --git a/client3.py b/client3.py
index 774145a..53b7761 100644
--- a/client3.py
+++ b/client3.py
@@ -42,7 +42,12 @@ def getDataPoint(quote):
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
     """ ------------- Update this function ------------- """
-    return 1
+    if (price_b == 0):
+        pass
+    else:
+        return price_a / price_b
+
+
 
 
 # Main
@@ -52,8 +57,10 @@ if __name__ == "__main__":
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
         """ ----------- Update to get the ratio --------------- """
+        prices={}
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock]=price
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % getRatio(prices["ABC"],prices["DEF"]))
diff --git a/requirements.txt b/requirements.txt
index e69de29..f678e82 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -0,0 +1 @@
+python-dateutil==2.8.2
\ No newline at end of file
diff --git a/venv/Lib/site-packages/__pycache__/six.cpython-311.pyc b/venv/Lib/site-packages/__pycache__/six.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..5975a2c26d92fe15346e256281e9b65487c87cd0
GIT binary patch
literal 46423
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
bm$`mW>L6I<9Iq9AQ0p5Hx_;2&0Q~;|dGl%N

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/__init__.py b/venv/Lib/site-packages/dateutil/__init__.py
new file mode 100644
index 0000000..0defb82
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/__init__.py
@@ -0,0 +1,8 @@
+# -*- coding: utf-8 -*-
+try:
+    from ._version import version as __version__
+except ImportError:
+    __version__ = 'unknown'
+
+__all__ = ['easter', 'parser', 'relativedelta', 'rrule', 'tz',
+           'utils', 'zoneinfo']
diff --git a/venv/Lib/site-packages/dateutil/__pycache__/__init__.cpython-311.pyc b/venv/Lib/site-packages/dateutil/__pycache__/__init__.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..df1a060967fc37f2540aa0e4253d773462989ade
GIT binary patch
literal 477
zcmZWly-Pze5Wn=j*H^7w>}Ur;mk!U5O+;LZgP#a0*b)e_iSq1g@<`HGbrLsmb8&YO
zC;t`4lEKBvt>98RnFkdI?~dQyCAs@u?xj+h1}AS1oBYH1&pi1Re-eDJx!?(=fB{1Z
zbWy8-KvWihdyAj~1gy|1G(q@%xbm9NM;E}nXVmhUe+2d53%T+-vSG%Rj-{|+PjrOr
zi+X5_oNB|BEv8gy=PQaQ)WjKQJTcS;O7#+M3+BcKJrgI|mTsiru{f6p^}v?Mq^0s4
zg)NicoDf^y?xs?iEv2NgAt5wL2ziC?{7+-nSjQ)hPh-_fX^NLJ-Ik2wox}YGIi|X^
ziqEB@7d*O5yX{E#d1Tyaw2Ct>GQ1a`VI3PDrL^5~uQX=V@O;2!LShjcLYC6&acQF~
znVWx8RUK)*1%2vZ=plrLzK3c9f93t3jRxWD5D=>U!C-dob~o3&v^E-zhDB7KclQ&x
U4Rh5quK8VY3hu+I_lT<A4{%hF<NyEw

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/__pycache__/_common.cpython-311.pyc b/venv/Lib/site-packages/dateutil/__pycache__/_common.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..51ffebee6419a31852437851b63964a5c3ad3a31
GIT binary patch
literal 2024
zcmZuy%TF6e7@ygPUo6;kX@NGawmg!UR|7Or)kH{?LemGdilJ33ODnUx1cP6hSwlmO
zgeneJn*)j}nL`g82o>T`ROQe^{|G0_!CI*jQq}uL<bZPOH@o&4myG4#ey`b??>FB!
z`&(;k2*LRM=Lut<N9Z4>)Q4CTPA`K{MmmZk4t<7nyp43uzy}b21b=tLIh~K8sIYM*
zG?mL_a#=;o>4s9EhOVTtN~VxDQ~9)^WO8~TZP1aBR-eh9TunK>1wt7aD2`z{PKU+r
zadBP`>ijm23%an4;-W4B`g9+lU-ttB^Z;N`=U@XN%fD_It9tT*g|l;-x4+sVOh4^$
z7AfK)QbBS@kpm6aH66v!A)Y(r2%A6zfGBSX)JQKiER^{aMR}!7eVkaJ2B8U3$S3oO
zku}PaPkiys?36m6q^qNer5s7#Glp048Eu%Z8^b18hes1@Ms_XnRcbLoQ>HPTPim_W
zMH70`Gzw-a{eh}ET#n=)SOHZ{WmBfAZbWJcj?^td*az(Z*h1CL_e#P;soMSqJbWei
zoq`={b%L3~vT=C0140=w9#)v$8LLht0XAZ&i1s{2>VEcwc<+5hd;s#1r^gWSK}eK$
zNV9^fs-=^Zs;a|Vlp_J~IzGzgC<<Y_XW41Vbh<e^*U}1pdKCb&Yms(@Uwl8^EZwZi
zouw~N<j(TMqlvw~{h?$0R33XSk5!~G(gMM+&o~dBG77Q`KypVBH{?~u3!)M5dzpjZ
zlU+aIbR0w3_FiN%E^DI?(!%I2lxz&Gqwo2<XdOEx$<NKq10P-`S#6W1Nm7di)0ieC
zN1)0WDVCTsm!XKx)8bQA<35nm);Mye%Meb#1=vD1Cj`5zVfkTkxA5!cv+z(QJajBP
z@%`EV*Oh12CM(w_tDTp23O0{MKf!1JhTpXj4t6)7DtGN%-??t{U_CoKI|<7rlS=UF
zAC-ReI5f`xfya5xBLEy;`FsRQ8JXvNO|+dWk|pi{qK>>suShImIZ2lr)I_mE1!a+q
z%3v|gmEl_6fhgJwu!a5(%hgcZ!yyKjZIOR7^aAmbmX{1{#0Oh076s$kX@dv|&<4;5
zZt+V{`c4raBGS&5_}__Sjph?!`ui*{3;;#i(X~7MXtomWsRVl5Wxd29fGz1PI|BmT
zs!iS34K{adGP^gAaz&^r9q_z$iQ9l)gG-N}i~22Y_G^oqU$D6Err~+p;%4qxTx=5l
z3mg7^dbNL0j}kw;z1D;lrcIea3lbwwnu&HTeK3oT06=!qjbrmk@wxPA3A3_WW9$xA
z<&M(r6Zz5}-urO>#_kVK<$;Pc;3V%}2O-ws*<=Q&vO=oreg#05RP}x#nXY-@wxH>p
z$!-hwSt4x=Sh1707%+ASJ8#m(fVH`Ed${$(NM%<K-2~Y3e%1E3cc&^5W$SZW;6&L*
z%@7d8aT|Fc`NR$zc@PmqC?5|bEcQa{)WIi;gEqPd?#|eL=HRR0S5-ZyL9V{s;)<b}
x?rxhicon$iQZhjXU>ZAjIt2i2iLuRbSb%*4gnBWoco9lVFPQb^Yh2D|{sS^;t*HP2

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/__pycache__/_version.cpython-311.pyc b/venv/Lib/site-packages/dateutil/__pycache__/_version.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..30f29592cefbf97d5d1fb229ced7bab82cf182d1
GIT binary patch
literal 268
zcmZ3^%ge<81nax)Qu~1PV-N=h7@>^Md_cx@h7^V<h7`sq#uTPt22JKFRwF$NJtIx#
zmrOv}mmEN%2*mQ!WV*#(mReMtnV)xy7s`k)DJ{rJUCHnnsDR;DinCQrXfaSpOi^h;
zVnK{vS#ffHN@|Q(fUk3WNMdoeVN6<nQDS<kZdO5VvTkvCs%{BTRM#-3EH$qz#wRl=
zrZ}@CRkt89IUA^|I3^{rB(=08Ge<ujYM)*~<u4AK-29Z%oK(9aPN1bAzZ8oCi4V+-
YjEo;R7`TNR*l!3(Ht>RA5j#)@0L;cphX4Qo

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/__pycache__/easter.cpython-311.pyc b/venv/Lib/site-packages/dateutil/__pycache__/easter.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..abd89e96aed06cf407184a20bf716d4bb15606a8
GIT binary patch
literal 2950
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

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/__pycache__/relativedelta.cpython-311.pyc b/venv/Lib/site-packages/dateutil/__pycache__/relativedelta.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..0c780ff7d3109c245eb035a39d5da0f0726b50c7
GIT binary patch
literal 26576
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
Ums;-EW~7lSQN%o5AFu)Z{~o8ewEzGB

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/__pycache__/rrule.cpython-311.pyc b/venv/Lib/site-packages/dateutil/__pycache__/rrule.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..5af43e17da32d293de1303aaf878f7292e2bde65
GIT binary patch
literal 74072
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

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/__pycache__/tzwin.cpython-311.pyc b/venv/Lib/site-packages/dateutil/__pycache__/tzwin.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..5d3cc2214acd9ff04c2f4910c3522ea7fb6b21c4
GIT binary patch
literal 237
zcmZ3^%ge<81nax)QmujXV-N=hn4pZ$d_cx@h7^Vr#vFzah7_h?22JLdj6gw6##@Y9
zen66~q)M+mGjAosXONy>iOyCrp~b01#W6*t1&IYQdS%7Q`6;O}UID(&@ga%D*@iJ`
z`9+E8sk&JOxyic4<*B+QKv7-8n6lKovKXJtq?qE&l2qM-#N=$Cs^XZG#FEs~lFS_a
uk}9AzdIgogIBatBQ%ZAE?TR>nHi8^eEDj_-Ff%eTK41{NfQpLPfN}uAY(Y=}

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/__pycache__/utils.cpython-311.pyc b/venv/Lib/site-packages/dateutil/__pycache__/utils.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..84a79ab6d1331fe15160b7844c04ca44bd0b70de
GIT binary patch
literal 2706
zcmbVO&2Jk;6rc4+oH$9-6ojZ~(WnT;7PWB#1+=uLA1YO&QX!IFB1`sUcN}kO@0yu$
zJ}g%XQV#_x5iS%E5;;I=RS^6sF3O>@gj9(Ww@49}p7_n!-qdZV5To6<GjC_!d-LWu
zznP!L$CCu**U$6(mjoey>PEjrdX-%pm0QFm3&geDNY$!E79y6eN2}3VbRk-cEyU0s
zcH`Hrg}6I(oh%Hw3CM&Sn<MFwrcBOPJV|ST+o*CHl*?R5y2O1hSd}_~zruZw`wpkf
zcWFa;RZp$ca>I9&7x<Ev13_KRs-C|@S3Olpx=eB9)ws+ili4g?fjM+!uFGB9rZd^M
zv$^D7I{LKLIoR+$CvbTYMzuegj&z3m20Afq=CWh;rm8<k1Bv3@{R-k1QIGvw4(ly)
z8})l(`<gY-ub(>7vbMCXr^;<;?uA-45>}Dc7Wp}H8y4<`Rt8&0X_UPT*GY=<5mya?
zBr$5&*KMcDq_j)@`IV^Pb-^X~l}?_jaOyOKK$E&`oiashp6h!{6_qr`>^c*yMpe`E
z%YkiF+Q&S`=|s_H;G-5`pkhvirjX8nHY9ho(&b2S&C@*w{iLx>+Keqstb2CP>=$!(
zFZf__nLFy4a|mO6Y%W=&6gqu(t<F$)HtD#CLD7l&!D=Vr1hqv(+KFjrB90&Fh#1!Y
zBd(HqB&CnoIlFL00$c^rsIz(@yCOA`3bP-6aIQGd<kjf{pvjhaX1QK-GIEt?6ttP?
z0sy^Ixa2JsBtVy`Gv_LL$%1yK;r+T6GFxBo#8rTW5C`CJ9It#AVuSqsB1s;)d1SME
zf8^-)$kC0ne~do2J^IquXTQJj?S*eHes}Rlb?3})<@VI6`%|a3AxHDuqxp6$zl-6-
z32}plMxR0RX;f~J7Fou(TRw@j$Q(3VA&UEd^tWXJg##EjxcdRdOnT?Il4hYxrEY>t
zC2G*4Q9uKq`pjG5fLU*=LRDSw;=qsr_yE8uH>zfP^EFnhgBw;W+^6e7gEGNsT?8v0
z_B62FHv^A)p@H2BTj3@U4n}}S=2H(QJjYWMe8Jax^$@qmscZnVOm>|hR;l*{+e5Z7
zCzXJ@hggt{8#szfW!v4@HIDQ7JS~f$W}?zdnN>~gJP-<72lOVnGPd^btUV*(-T>2j
zMsEX^erK1LS);0o-HZ>6a?3_fPlX|*j-8*IKX#mErr*isa_NEIbxcyF2F;~RD5<HL
z-1M87+%z6KJ!8L-qgUq7O{I_1o`>|Fr6+sZx!h~H9OVD@^`HG@awoJO<EY14uG(W3
z%~&C30LImdhqVVufe)(;Cyl145E=t!_9MT2s1<9jNwNe~EgIIPo-Y;Cr<f*4DZM2h
zwJ;N<lB=*qyfRo5r<~pmXrw9NimhNa%fHcNNbx>pt9oPX7fye+r7rtj7Wy3PlUkxT
zZM4UrHcZ!JIiY!{b6^k(;t-Ta@yb^rHpq@mhLhLV+leC&CMIu;Je-*PqWM{K>xCQ5
z`xB|{iBx+yB_`0*(Nxnfx~|{dOAvzxY3m7Uxdtj~SxwwUu0>msQPPS!k+sNGLrg)u
z)vNgt2lo!pkk#}}UO~=%0s)}|zUGiy#ZeTp&H!Ivv-^Ch>MePT;2PJ{7ZH8$FvhTI
zi#Q%};Q;3dunzyY!K&SC;vNxYi!vSSL|rwl#Y`ve@~UE;<enL+4;a1YyEz@xcNNbs
znttLi{+-4vPeOp=lVtqhX8hCHo3k6|A51>KDZf0tG5cU_^2S@63+>Sqp5Kk!I??@h
zb?sO;(P`^)dbpD)7C}$NVkcQFmK(SS@M2Nul$)c@9BbxiG0SNpxJ%4BnE)RRpX}bq
z@<K1QPPSZw*oj(}wG)e5u^pnt7_m}qGWGcLki62~@7Wm|x8B<!gMv~ky+cCrzLn7J
Ir-g~^A0(gKQUCw|

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/_common.py b/venv/Lib/site-packages/dateutil/_common.py
new file mode 100644
index 0000000..4eb2659
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/_common.py
@@ -0,0 +1,43 @@
+"""
+Common code used in multiple modules.
+"""
+
+
+class weekday(object):
+    __slots__ = ["weekday", "n"]
+
+    def __init__(self, weekday, n=None):
+        self.weekday = weekday
+        self.n = n
+
+    def __call__(self, n):
+        if n == self.n:
+            return self
+        else:
+            return self.__class__(self.weekday, n)
+
+    def __eq__(self, other):
+        try:
+            if self.weekday != other.weekday or self.n != other.n:
+                return False
+        except AttributeError:
+            return False
+        return True
+
+    def __hash__(self):
+        return hash((
+          self.weekday,
+          self.n,
+        ))
+
+    def __ne__(self, other):
+        return not (self == other)
+
+    def __repr__(self):
+        s = ("MO", "TU", "WE", "TH", "FR", "SA", "SU")[self.weekday]
+        if not self.n:
+            return s
+        else:
+            return "%s(%+d)" % (s, self.n)
+
+# vim:ts=4:sw=4:et
diff --git a/venv/Lib/site-packages/dateutil/_version.py b/venv/Lib/site-packages/dateutil/_version.py
new file mode 100644
index 0000000..b723056
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/_version.py
@@ -0,0 +1,5 @@
+# coding: utf-8
+# file generated by setuptools_scm
+# don't change, don't track in version control
+version = '2.8.2'
+version_tuple = (2, 8, 2)
diff --git a/venv/Lib/site-packages/dateutil/easter.py b/venv/Lib/site-packages/dateutil/easter.py
new file mode 100644
index 0000000..f74d1f7
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/easter.py
@@ -0,0 +1,89 @@
+# -*- coding: utf-8 -*-
+"""
+This module offers a generic Easter computing method for any given year, using
+Western, Orthodox or Julian algorithms.
+"""
+
+import datetime
+
+__all__ = ["easter", "EASTER_JULIAN", "EASTER_ORTHODOX", "EASTER_WESTERN"]
+
+EASTER_JULIAN = 1
+EASTER_ORTHODOX = 2
+EASTER_WESTERN = 3
+
+
+def easter(year, method=EASTER_WESTERN):
+    """
+    This method was ported from the work done by GM Arts,
+    on top of the algorithm by Claus Tondering, which was
+    based in part on the algorithm of Ouding (1940), as
+    quoted in "Explanatory Supplement to the Astronomical
+    Almanac", P.  Kenneth Seidelmann, editor.
+
+    This algorithm implements three different Easter
+    calculation methods:
+
+    1. Original calculation in Julian calendar, valid in
+       dates after 326 AD
+    2. Original method, with date converted to Gregorian
+       calendar, valid in years 1583 to 4099
+    3. Revised method, in Gregorian calendar, valid in
+       years 1583 to 4099 as well
+
+    These methods are represented by the constants:
+
+    * ``EASTER_JULIAN   = 1``
+    * ``EASTER_ORTHODOX = 2``
+    * ``EASTER_WESTERN  = 3``
+
+    The default method is method 3.
+
+    More about the algorithm may be found at:
+
+    `GM Arts: Easter Algorithms <http://www.gmarts.org/index.php?go=415>`_
+
+    and
+
+    `The Calendar FAQ: Easter <https://www.tondering.dk/claus/cal/easter.php>`_
+
+    """
+
+    if not (1 <= method <= 3):
+        raise ValueError("invalid method")
+
+    # g - Golden year - 1
+    # c - Century
+    # h - (23 - Epact) mod 30
+    # i - Number of days from March 21 to Paschal Full Moon
+    # j - Weekday for PFM (0=Sunday, etc)
+    # p - Number of days from March 21 to Sunday on or before PFM
+    #     (-6 to 28 methods 1 & 3, to 56 for method 2)
+    # e - Extra days to add for method 2 (converting Julian
+    #     date to Gregorian date)
+
+    y = year
+    g = y % 19
+    e = 0
+    if method < 3:
+        # Old method
+        i = (19*g + 15) % 30
+        j = (y + y//4 + i) % 7
+        if method == 2:
+            # Extra dates to convert Julian to Gregorian date
+            e = 10
+            if y > 1600:
+                e = e + y//100 - 16 - (y//100 - 16)//4
+    else:
+        # New method
+        c = y//100
+        h = (c - c//4 - (8*c + 13)//25 + 19*g + 15) % 30
+        i = h - (h//28)*(1 - (h//28)*(29//(h + 1))*((21 - g)//11))
+        j = (y + y//4 + i + 2 - c + c//4) % 7
+
+    # p can be from -6 to 56 corresponding to dates 22 March to 23 May
+    # (later dates apply to method 2, although 23 May never actually occurs)
+    p = i - j + e
+    d = 1 + (p + 27 + (p + 6)//40) % 31
+    m = 3 + (p + 26)//30
+    return datetime.date(int(y), int(m), int(d))
diff --git a/venv/Lib/site-packages/dateutil/parser/__init__.py b/venv/Lib/site-packages/dateutil/parser/__init__.py
new file mode 100644
index 0000000..d174b0e
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/parser/__init__.py
@@ -0,0 +1,61 @@
+# -*- coding: utf-8 -*-
+from ._parser import parse, parser, parserinfo, ParserError
+from ._parser import DEFAULTPARSER, DEFAULTTZPARSER
+from ._parser import UnknownTimezoneWarning
+
+from ._parser import __doc__
+
+from .isoparser import isoparser, isoparse
+
+__all__ = ['parse', 'parser', 'parserinfo',
+           'isoparse', 'isoparser',
+           'ParserError',
+           'UnknownTimezoneWarning']
+
+
+###
+# Deprecate portions of the private interface so that downstream code that
+# is improperly relying on it is given *some* notice.
+
+
+def __deprecated_private_func(f):
+    from functools import wraps
+    import warnings
+
+    msg = ('{name} is a private function and may break without warning, '
+           'it will be moved and or renamed in future versions.')
+    msg = msg.format(name=f.__name__)
+
+    @wraps(f)
+    def deprecated_func(*args, **kwargs):
+        warnings.warn(msg, DeprecationWarning)
+        return f(*args, **kwargs)
+
+    return deprecated_func
+
+def __deprecate_private_class(c):
+    import warnings
+
+    msg = ('{name} is a private class and may break without warning, '
+           'it will be moved and or renamed in future versions.')
+    msg = msg.format(name=c.__name__)
+
+    class private_class(c):
+        __doc__ = c.__doc__
+
+        def __init__(self, *args, **kwargs):
+            warnings.warn(msg, DeprecationWarning)
+            super(private_class, self).__init__(*args, **kwargs)
+
+    private_class.__name__ = c.__name__
+
+    return private_class
+
+
+from ._parser import _timelex, _resultbase
+from ._parser import _tzparser, _parsetz
+
+_timelex = __deprecate_private_class(_timelex)
+_tzparser = __deprecate_private_class(_tzparser)
+_resultbase = __deprecate_private_class(_resultbase)
+_parsetz = __deprecated_private_func(_parsetz)
diff --git a/venv/Lib/site-packages/dateutil/parser/__pycache__/__init__.cpython-311.pyc b/venv/Lib/site-packages/dateutil/parser/__pycache__/__init__.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..0c6613607589e6854f9243ec8ba3b1acf89ce5d2
GIT binary patch
literal 3162
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

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/parser/__pycache__/_parser.cpython-311.pyc b/venv/Lib/site-packages/dateutil/parser/__pycache__/_parser.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..33106975eccf14fc5f75d66a2a988c19f1dce7a5
GIT binary patch
literal 69812
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

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/parser/__pycache__/isoparser.cpython-311.pyc b/venv/Lib/site-packages/dateutil/parser/__pycache__/isoparser.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..afe7b88740fd1cd632d3fe3311cf77653be6ac8f
GIT binary patch
literal 17383
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

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/parser/_parser.py b/venv/Lib/site-packages/dateutil/parser/_parser.py
new file mode 100644
index 0000000..37d1663
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/parser/_parser.py
@@ -0,0 +1,1613 @@
+# -*- coding: utf-8 -*-
+"""
+This module offers a generic date/time string parser which is able to parse
+most known formats to represent a date and/or time.
+
+This module attempts to be forgiving with regards to unlikely input formats,
+returning a datetime object even for dates which are ambiguous. If an element
+of a date/time stamp is omitted, the following rules are applied:
+
+- If AM or PM is left unspecified, a 24-hour clock is assumed, however, an hour
+  on a 12-hour clock (``0 <= hour <= 12``) *must* be specified if AM or PM is
+  specified.
+- If a time zone is omitted, a timezone-naive datetime is returned.
+
+If any other elements are missing, they are taken from the
+:class:`datetime.datetime` object passed to the parameter ``default``. If this
+results in a day number exceeding the valid number of days per month, the
+value falls back to the end of the month.
+
+Additional resources about date/time string formats can be found below:
+
+- `A summary of the international standard date and time notation
+  <https://www.cl.cam.ac.uk/~mgk25/iso-time.html>`_
+- `W3C Date and Time Formats <https://www.w3.org/TR/NOTE-datetime>`_
+- `Time Formats (Planetary Rings Node) <https://pds-rings.seti.org:443/tools/time_formats.html>`_
+- `CPAN ParseDate module
+  <https://metacpan.org/pod/release/MUIR/Time-modules-2013.0912/lib/Time/ParseDate.pm>`_
+- `Java SimpleDateFormat Class
+  <https://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html>`_
+"""
+from __future__ import unicode_literals
+
+import datetime
+import re
+import string
+import time
+import warnings
+
+from calendar import monthrange
+from io import StringIO
+
+import six
+from six import integer_types, text_type
+
+from decimal import Decimal
+
+from warnings import warn
+
+from .. import relativedelta
+from .. import tz
+
+__all__ = ["parse", "parserinfo", "ParserError"]
+
+
+# TODO: pandas.core.tools.datetimes imports this explicitly.  Might be worth
+# making public and/or figuring out if there is something we can
+# take off their plate.
+class _timelex(object):
+    # Fractional seconds are sometimes split by a comma
+    _split_decimal = re.compile("([.,])")
+
+    def __init__(self, instream):
+        if isinstance(instream, (bytes, bytearray)):
+            instream = instream.decode()
+
+        if isinstance(instream, text_type):
+            instream = StringIO(instream)
+        elif getattr(instream, 'read', None) is None:
+            raise TypeError('Parser must be a string or character stream, not '
+                            '{itype}'.format(itype=instream.__class__.__name__))
+
+        self.instream = instream
+        self.charstack = []
+        self.tokenstack = []
+        self.eof = False
+
+    def get_token(self):
+        """
+        This function breaks the time string into lexical units (tokens), which
+        can be parsed by the parser. Lexical units are demarcated by changes in
+        the character set, so any continuous string of letters is considered
+        one unit, any continuous string of numbers is considered one unit.
+
+        The main complication arises from the fact that dots ('.') can be used
+        both as separators (e.g. "Sep.20.2009") or decimal points (e.g.
+        "4:30:21.447"). As such, it is necessary to read the full context of
+        any dot-separated strings before breaking it into tokens; as such, this
+        function maintains a "token stack", for when the ambiguous context
+        demands that multiple tokens be parsed at once.
+        """
+        if self.tokenstack:
+            return self.tokenstack.pop(0)
+
+        seenletters = False
+        token = None
+        state = None
+
+        while not self.eof:
+            # We only realize that we've reached the end of a token when we
+            # find a character that's not part of the current token - since
+            # that character may be part of the next token, it's stored in the
+            # charstack.
+            if self.charstack:
+                nextchar = self.charstack.pop(0)
+            else:
+                nextchar = self.instream.read(1)
+                while nextchar == '\x00':
+                    nextchar = self.instream.read(1)
+
+            if not nextchar:
+                self.eof = True
+                break
+            elif not state:
+                # First character of the token - determines if we're starting
+                # to parse a word, a number or something else.
+                token = nextchar
+                if self.isword(nextchar):
+                    state = 'a'
+                elif self.isnum(nextchar):
+                    state = '0'
+                elif self.isspace(nextchar):
+                    token = ' '
+                    break  # emit token
+                else:
+                    break  # emit token
+            elif state == 'a':
+                # If we've already started reading a word, we keep reading
+                # letters until we find something that's not part of a word.
+                seenletters = True
+                if self.isword(nextchar):
+                    token += nextchar
+                elif nextchar == '.':
+                    token += nextchar
+                    state = 'a.'
+                else:
+                    self.charstack.append(nextchar)
+                    break  # emit token
+            elif state == '0':
+                # If we've already started reading a number, we keep reading
+                # numbers until we find something that doesn't fit.
+                if self.isnum(nextchar):
+                    token += nextchar
+                elif nextchar == '.' or (nextchar == ',' and len(token) >= 2):
+                    token += nextchar
+                    state = '0.'
+                else:
+                    self.charstack.append(nextchar)
+                    break  # emit token
+            elif state == 'a.':
+                # If we've seen some letters and a dot separator, continue
+                # parsing, and the tokens will be broken up later.
+                seenletters = True
+                if nextchar == '.' or self.isword(nextchar):
+                    token += nextchar
+                elif self.isnum(nextchar) and token[-1] == '.':
+                    token += nextchar
+                    state = '0.'
+                else:
+                    self.charstack.append(nextchar)
+                    break  # emit token
+            elif state == '0.':
+                # If we've seen at least one dot separator, keep going, we'll
+                # break up the tokens later.
+                if nextchar == '.' or self.isnum(nextchar):
+                    token += nextchar
+                elif self.isword(nextchar) and token[-1] == '.':
+                    token += nextchar
+                    state = 'a.'
+                else:
+                    self.charstack.append(nextchar)
+                    break  # emit token
+
+        if (state in ('a.', '0.') and (seenletters or token.count('.') > 1 or
+                                       token[-1] in '.,')):
+            l = self._split_decimal.split(token)
+            token = l[0]
+            for tok in l[1:]:
+                if tok:
+                    self.tokenstack.append(tok)
+
+        if state == '0.' and token.count('.') == 0:
+            token = token.replace(',', '.')
+
+        return token
+
+    def __iter__(self):
+        return self
+
+    def __next__(self):
+        token = self.get_token()
+        if token is None:
+            raise StopIteration
+
+        return token
+
+    def next(self):
+        return self.__next__()  # Python 2.x support
+
+    @classmethod
+    def split(cls, s):
+        return list(cls(s))
+
+    @classmethod
+    def isword(cls, nextchar):
+        """ Whether or not the next character is part of a word """
+        return nextchar.isalpha()
+
+    @classmethod
+    def isnum(cls, nextchar):
+        """ Whether the next character is part of a number """
+        return nextchar.isdigit()
+
+    @classmethod
+    def isspace(cls, nextchar):
+        """ Whether the next character is whitespace """
+        return nextchar.isspace()
+
+
+class _resultbase(object):
+
+    def __init__(self):
+        for attr in self.__slots__:
+            setattr(self, attr, None)
+
+    def _repr(self, classname):
+        l = []
+        for attr in self.__slots__:
+            value = getattr(self, attr)
+            if value is not None:
+                l.append("%s=%s" % (attr, repr(value)))
+        return "%s(%s)" % (classname, ", ".join(l))
+
+    def __len__(self):
+        return (sum(getattr(self, attr) is not None
+                    for attr in self.__slots__))
+
+    def __repr__(self):
+        return self._repr(self.__class__.__name__)
+
+
+class parserinfo(object):
+    """
+    Class which handles what inputs are accepted. Subclass this to customize
+    the language and acceptable values for each parameter.
+
+    :param dayfirst:
+        Whether to interpret the first value in an ambiguous 3-integer date
+        (e.g. 01/05/09) as the day (``True``) or month (``False``). If
+        ``yearfirst`` is set to ``True``, this distinguishes between YDM
+        and YMD. Default is ``False``.
+
+    :param yearfirst:
+        Whether to interpret the first value in an ambiguous 3-integer date
+        (e.g. 01/05/09) as the year. If ``True``, the first number is taken
+        to be the year, otherwise the last number is taken to be the year.
+        Default is ``False``.
+    """
+
+    # m from a.m/p.m, t from ISO T separator
+    JUMP = [" ", ".", ",", ";", "-", "/", "'",
+            "at", "on", "and", "ad", "m", "t", "of",
+            "st", "nd", "rd", "th"]
+
+    WEEKDAYS = [("Mon", "Monday"),
+                ("Tue", "Tuesday"),     # TODO: "Tues"
+                ("Wed", "Wednesday"),
+                ("Thu", "Thursday"),    # TODO: "Thurs"
+                ("Fri", "Friday"),
+                ("Sat", "Saturday"),
+                ("Sun", "Sunday")]
+    MONTHS = [("Jan", "January"),
+              ("Feb", "February"),      # TODO: "Febr"
+              ("Mar", "March"),
+              ("Apr", "April"),
+              ("May", "May"),
+              ("Jun", "June"),
+              ("Jul", "July"),
+              ("Aug", "August"),
+              ("Sep", "Sept", "September"),
+              ("Oct", "October"),
+              ("Nov", "November"),
+              ("Dec", "December")]
+    HMS = [("h", "hour", "hours"),
+           ("m", "minute", "minutes"),
+           ("s", "second", "seconds")]
+    AMPM = [("am", "a"),
+            ("pm", "p")]
+    UTCZONE = ["UTC", "GMT", "Z", "z"]
+    PERTAIN = ["of"]
+    TZOFFSET = {}
+    # TODO: ERA = ["AD", "BC", "CE", "BCE", "Stardate",
+    #              "Anno Domini", "Year of Our Lord"]
+
+    def __init__(self, dayfirst=False, yearfirst=False):
+        self._jump = self._convert(self.JUMP)
+        self._weekdays = self._convert(self.WEEKDAYS)
+        self._months = self._convert(self.MONTHS)
+        self._hms = self._convert(self.HMS)
+        self._ampm = self._convert(self.AMPM)
+        self._utczone = self._convert(self.UTCZONE)
+        self._pertain = self._convert(self.PERTAIN)
+
+        self.dayfirst = dayfirst
+        self.yearfirst = yearfirst
+
+        self._year = time.localtime().tm_year
+        self._century = self._year // 100 * 100
+
+    def _convert(self, lst):
+        dct = {}
+        for i, v in enumerate(lst):
+            if isinstance(v, tuple):
+                for v in v:
+                    dct[v.lower()] = i
+            else:
+                dct[v.lower()] = i
+        return dct
+
+    def jump(self, name):
+        return name.lower() in self._jump
+
+    def weekday(self, name):
+        try:
+            return self._weekdays[name.lower()]
+        except KeyError:
+            pass
+        return None
+
+    def month(self, name):
+        try:
+            return self._months[name.lower()] + 1
+        except KeyError:
+            pass
+        return None
+
+    def hms(self, name):
+        try:
+            return self._hms[name.lower()]
+        except KeyError:
+            return None
+
+    def ampm(self, name):
+        try:
+            return self._ampm[name.lower()]
+        except KeyError:
+            return None
+
+    def pertain(self, name):
+        return name.lower() in self._pertain
+
+    def utczone(self, name):
+        return name.lower() in self._utczone
+
+    def tzoffset(self, name):
+        if name in self._utczone:
+            return 0
+
+        return self.TZOFFSET.get(name)
+
+    def convertyear(self, year, century_specified=False):
+        """
+        Converts two-digit years to year within [-50, 49]
+        range of self._year (current local time)
+        """
+
+        # Function contract is that the year is always positive
+        assert year >= 0
+
+        if year < 100 and not century_specified:
+            # assume current century to start
+            year += self._century
+
+            if year >= self._year + 50:  # if too far in future
+                year -= 100
+            elif year < self._year - 50:  # if too far in past
+                year += 100
+
+        return year
+
+    def validate(self, res):
+        # move to info
+        if res.year is not None:
+            res.year = self.convertyear(res.year, res.century_specified)
+
+        if ((res.tzoffset == 0 and not res.tzname) or
+             (res.tzname == 'Z' or res.tzname == 'z')):
+            res.tzname = "UTC"
+            res.tzoffset = 0
+        elif res.tzoffset != 0 and res.tzname and self.utczone(res.tzname):
+            res.tzoffset = 0
+        return True
+
+
+class _ymd(list):
+    def __init__(self, *args, **kwargs):
+        super(self.__class__, self).__init__(*args, **kwargs)
+        self.century_specified = False
+        self.dstridx = None
+        self.mstridx = None
+        self.ystridx = None
+
+    @property
+    def has_year(self):
+        return self.ystridx is not None
+
+    @property
+    def has_month(self):
+        return self.mstridx is not None
+
+    @property
+    def has_day(self):
+        return self.dstridx is not None
+
+    def could_be_day(self, value):
+        if self.has_day:
+            return False
+        elif not self.has_month:
+            return 1 <= value <= 31
+        elif not self.has_year:
+            # Be permissive, assume leap year
+            month = self[self.mstridx]
+            return 1 <= value <= monthrange(2000, month)[1]
+        else:
+            month = self[self.mstridx]
+            year = self[self.ystridx]
+            return 1 <= value <= monthrange(year, month)[1]
+
+    def append(self, val, label=None):
+        if hasattr(val, '__len__'):
+            if val.isdigit() and len(val) > 2:
+                self.century_specified = True
+                if label not in [None, 'Y']:  # pragma: no cover
+                    raise ValueError(label)
+                label = 'Y'
+        elif val > 100:
+            self.century_specified = True
+            if label not in [None, 'Y']:  # pragma: no cover
+                raise ValueError(label)
+            label = 'Y'
+
+        super(self.__class__, self).append(int(val))
+
+        if label == 'M':
+            if self.has_month:
+                raise ValueError('Month is already set')
+            self.mstridx = len(self) - 1
+        elif label == 'D':
+            if self.has_day:
+                raise ValueError('Day is already set')
+            self.dstridx = len(self) - 1
+        elif label == 'Y':
+            if self.has_year:
+                raise ValueError('Year is already set')
+            self.ystridx = len(self) - 1
+
+    def _resolve_from_stridxs(self, strids):
+        """
+        Try to resolve the identities of year/month/day elements using
+        ystridx, mstridx, and dstridx, if enough of these are specified.
+        """
+        if len(self) == 3 and len(strids) == 2:
+            # we can back out the remaining stridx value
+            missing = [x for x in range(3) if x not in strids.values()]
+            key = [x for x in ['y', 'm', 'd'] if x not in strids]
+            assert len(missing) == len(key) == 1
+            key = key[0]
+            val = missing[0]
+            strids[key] = val
+
+        assert len(self) == len(strids)  # otherwise this should not be called
+        out = {key: self[strids[key]] for key in strids}
+        return (out.get('y'), out.get('m'), out.get('d'))
+
+    def resolve_ymd(self, yearfirst, dayfirst):
+        len_ymd = len(self)
+        year, month, day = (None, None, None)
+
+        strids = (('y', self.ystridx),
+                  ('m', self.mstridx),
+                  ('d', self.dstridx))
+
+        strids = {key: val for key, val in strids if val is not None}
+        if (len(self) == len(strids) > 0 or
+                (len(self) == 3 and len(strids) == 2)):
+            return self._resolve_from_stridxs(strids)
+
+        mstridx = self.mstridx
+
+        if len_ymd > 3:
+            raise ValueError("More than three YMD values")
+        elif len_ymd == 1 or (mstridx is not None and len_ymd == 2):
+            # One member, or two members with a month string
+            if mstridx is not None:
+                month = self[mstridx]
+                # since mstridx is 0 or 1, self[mstridx-1] always
+                # looks up the other element
+                other = self[mstridx - 1]
+            else:
+                other = self[0]
+
+            if len_ymd > 1 or mstridx is None:
+                if other > 31:
+                    year = other
+                else:
+                    day = other
+
+        elif len_ymd == 2:
+            # Two members with numbers
+            if self[0] > 31:
+                # 99-01
+                year, month = self
+            elif self[1] > 31:
+                # 01-99
+                month, year = self
+            elif dayfirst and self[1] <= 12:
+                # 13-01
+                day, month = self
+            else:
+                # 01-13
+                month, day = self
+
+        elif len_ymd == 3:
+            # Three members
+            if mstridx == 0:
+                if self[1] > 31:
+                    # Apr-2003-25
+                    month, year, day = self
+                else:
+                    month, day, year = self
+            elif mstridx == 1:
+                if self[0] > 31 or (yearfirst and self[2] <= 31):
+                    # 99-Jan-01
+                    year, month, day = self
+                else:
+                    # 01-Jan-01
+                    # Give precedence to day-first, since
+                    # two-digit years is usually hand-written.
+                    day, month, year = self
+
+            elif mstridx == 2:
+                # WTF!?
+                if self[1] > 31:
+                    # 01-99-Jan
+                    day, year, month = self
+                else:
+                    # 99-01-Jan
+                    year, day, month = self
+
+            else:
+                if (self[0] > 31 or
+                    self.ystridx == 0 or
+                        (yearfirst and self[1] <= 12 and self[2] <= 31)):
+                    # 99-01-01
+                    if dayfirst and self[2] <= 12:
+                        year, day, month = self
+                    else:
+                        year, month, day = self
+                elif self[0] > 12 or (dayfirst and self[1] <= 12):
+                    # 13-01-01
+                    day, month, year = self
+                else:
+                    # 01-13-01
+                    month, day, year = self
+
+        return year, month, day
+
+
+class parser(object):
+    def __init__(self, info=None):
+        self.info = info or parserinfo()
+
+    def parse(self, timestr, default=None,
+              ignoretz=False, tzinfos=None, **kwargs):
+        """
+        Parse the date/time string into a :class:`datetime.datetime` object.
+
+        :param timestr:
+            Any date/time string using the supported formats.
+
+        :param default:
+            The default datetime object, if this is a datetime object and not
+            ``None``, elements specified in ``timestr`` replace elements in the
+            default object.
+
+        :param ignoretz:
+            If set ``True``, time zones in parsed strings are ignored and a
+            naive :class:`datetime.datetime` object is returned.
+
+        :param tzinfos:
+            Additional time zone names / aliases which may be present in the
+            string. This argument maps time zone names (and optionally offsets
+            from those time zones) to time zones. This parameter can be a
+            dictionary with timezone aliases mapping time zone names to time
+            zones or a function taking two parameters (``tzname`` and
+            ``tzoffset``) and returning a time zone.
+
+            The timezones to which the names are mapped can be an integer
+            offset from UTC in seconds or a :class:`tzinfo` object.
+
+            .. doctest::
+               :options: +NORMALIZE_WHITESPACE
+
+                >>> from dateutil.parser import parse
+                >>> from dateutil.tz import gettz
+                >>> tzinfos = {"BRST": -7200, "CST": gettz("America/Chicago")}
+                >>> parse("2012-01-19 17:21:00 BRST", tzinfos=tzinfos)
+                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))
+                >>> parse("2012-01-19 17:21:00 CST", tzinfos=tzinfos)
+                datetime.datetime(2012, 1, 19, 17, 21,
+                                  tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))
+
+            This parameter is ignored if ``ignoretz`` is set.
+
+        :param \\*\\*kwargs:
+            Keyword arguments as passed to ``_parse()``.
+
+        :return:
+            Returns a :class:`datetime.datetime` object or, if the
+            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the
+            first element being a :class:`datetime.datetime` object, the second
+            a tuple containing the fuzzy tokens.
+
+        :raises ParserError:
+            Raised for invalid or unknown string format, if the provided
+            :class:`tzinfo` is not in a valid format, or if an invalid date
+            would be created.
+
+        :raises TypeError:
+            Raised for non-string or character stream input.
+
+        :raises OverflowError:
+            Raised if the parsed date exceeds the largest valid C integer on
+            your system.
+        """
+
+        if default is None:
+            default = datetime.datetime.now().replace(hour=0, minute=0,
+                                                      second=0, microsecond=0)
+
+        res, skipped_tokens = self._parse(timestr, **kwargs)
+
+        if res is None:
+            raise ParserError("Unknown string format: %s", timestr)
+
+        if len(res) == 0:
+            raise ParserError("String does not contain a date: %s", timestr)
+
+        try:
+            ret = self._build_naive(res, default)
+        except ValueError as e:
+            six.raise_from(ParserError(str(e) + ": %s", timestr), e)
+
+        if not ignoretz:
+            ret = self._build_tzaware(ret, res, tzinfos)
+
+        if kwargs.get('fuzzy_with_tokens', False):
+            return ret, skipped_tokens
+        else:
+            return ret
+
+    class _result(_resultbase):
+        __slots__ = ["year", "month", "day", "weekday",
+                     "hour", "minute", "second", "microsecond",
+                     "tzname", "tzoffset", "ampm","any_unused_tokens"]
+
+    def _parse(self, timestr, dayfirst=None, yearfirst=None, fuzzy=False,
+               fuzzy_with_tokens=False):
+        """
+        Private method which performs the heavy lifting of parsing, called from
+        ``parse()``, which passes on its ``kwargs`` to this function.
+
+        :param timestr:
+            The string to parse.
+
+        :param dayfirst:
+            Whether to interpret the first value in an ambiguous 3-integer date
+            (e.g. 01/05/09) as the day (``True``) or month (``False``). If
+            ``yearfirst`` is set to ``True``, this distinguishes between YDM
+            and YMD. If set to ``None``, this value is retrieved from the
+            current :class:`parserinfo` object (which itself defaults to
+            ``False``).
+
+        :param yearfirst:
+            Whether to interpret the first value in an ambiguous 3-integer date
+            (e.g. 01/05/09) as the year. If ``True``, the first number is taken
+            to be the year, otherwise the last number is taken to be the year.
+            If this is set to ``None``, the value is retrieved from the current
+            :class:`parserinfo` object (which itself defaults to ``False``).
+
+        :param fuzzy:
+            Whether to allow fuzzy parsing, allowing for string like "Today is
+            January 1, 2047 at 8:21:00AM".
+
+        :param fuzzy_with_tokens:
+            If ``True``, ``fuzzy`` is automatically set to True, and the parser
+            will return a tuple where the first element is the parsed
+            :class:`datetime.datetime` datetimestamp and the second element is
+            a tuple containing the portions of the string which were ignored:
+
+            .. doctest::
+
+                >>> from dateutil.parser import parse
+                >>> parse("Today is January 1, 2047 at 8:21:00AM", fuzzy_with_tokens=True)
+                (datetime.datetime(2047, 1, 1, 8, 21), (u'Today is ', u' ', u'at '))
+
+        """
+        if fuzzy_with_tokens:
+            fuzzy = True
+
+        info = self.info
+
+        if dayfirst is None:
+            dayfirst = info.dayfirst
+
+        if yearfirst is None:
+            yearfirst = info.yearfirst
+
+        res = self._result()
+        l = _timelex.split(timestr)         # Splits the timestr into tokens
+
+        skipped_idxs = []
+
+        # year/month/day list
+        ymd = _ymd()
+
+        len_l = len(l)
+        i = 0
+        try:
+            while i < len_l:
+
+                # Check if it's a number
+                value_repr = l[i]
+                try:
+                    value = float(value_repr)
+                except ValueError:
+                    value = None
+
+                if value is not None:
+                    # Numeric token
+                    i = self._parse_numeric_token(l, i, info, ymd, res, fuzzy)
+
+                # Check weekday
+                elif info.weekday(l[i]) is not None:
+                    value = info.weekday(l[i])
+                    res.weekday = value
+
+                # Check month name
+                elif info.month(l[i]) is not None:
+                    value = info.month(l[i])
+                    ymd.append(value, 'M')
+
+                    if i + 1 < len_l:
+                        if l[i + 1] in ('-', '/'):
+                            # Jan-01[-99]
+                            sep = l[i + 1]
+                            ymd.append(l[i + 2])
+
+                            if i + 3 < len_l and l[i + 3] == sep:
+                                # Jan-01-99
+                                ymd.append(l[i + 4])
+                                i += 2
+
+                            i += 2
+
+                        elif (i + 4 < len_l and l[i + 1] == l[i + 3] == ' ' and
+                              info.pertain(l[i + 2])):
+                            # Jan of 01
+                            # In this case, 01 is clearly year
+                            if l[i + 4].isdigit():
+                                # Convert it here to become unambiguous
+                                value = int(l[i + 4])
+                                year = str(info.convertyear(value))
+                                ymd.append(year, 'Y')
+                            else:
+                                # Wrong guess
+                                pass
+                                # TODO: not hit in tests
+                            i += 4
+
+                # Check am/pm
+                elif info.ampm(l[i]) is not None:
+                    value = info.ampm(l[i])
+                    val_is_ampm = self._ampm_valid(res.hour, res.ampm, fuzzy)
+
+                    if val_is_ampm:
+                        res.hour = self._adjust_ampm(res.hour, value)
+                        res.ampm = value
+
+                    elif fuzzy:
+                        skipped_idxs.append(i)
+
+                # Check for a timezone name
+                elif self._could_be_tzname(res.hour, res.tzname, res.tzoffset, l[i]):
+                    res.tzname = l[i]
+                    res.tzoffset = info.tzoffset(res.tzname)
+
+                    # Check for something like GMT+3, or BRST+3. Notice
+                    # that it doesn't mean "I am 3 hours after GMT", but
+                    # "my time +3 is GMT". If found, we reverse the
+                    # logic so that timezone parsing code will get it
+                    # right.
+                    if i + 1 < len_l and l[i + 1] in ('+', '-'):
+                        l[i + 1] = ('+', '-')[l[i + 1] == '+']
+                        res.tzoffset = None
+                        if info.utczone(res.tzname):
+                            # With something like GMT+3, the timezone
+                            # is *not* GMT.
+                            res.tzname = None
+
+                # Check for a numbered timezone
+                elif res.hour is not None and l[i] in ('+', '-'):
+                    signal = (-1, 1)[l[i] == '+']
+                    len_li = len(l[i + 1])
+
+                    # TODO: check that l[i + 1] is integer?
+                    if len_li == 4:
+                        # -0300
+                        hour_offset = int(l[i + 1][:2])
+                        min_offset = int(l[i + 1][2:])
+                    elif i + 2 < len_l and l[i + 2] == ':':
+                        # -03:00
+                        hour_offset = int(l[i + 1])
+                        min_offset = int(l[i + 3])  # TODO: Check that l[i+3] is minute-like?
+                        i += 2
+                    elif len_li <= 2:
+                        # -[0]3
+                        hour_offset = int(l[i + 1][:2])
+                        min_offset = 0
+                    else:
+                        raise ValueError(timestr)
+
+                    res.tzoffset = signal * (hour_offset * 3600 + min_offset * 60)
+
+                    # Look for a timezone name between parenthesis
+                    if (i + 5 < len_l and
+                            info.jump(l[i + 2]) and l[i + 3] == '(' and
+                            l[i + 5] == ')' and
+                            3 <= len(l[i + 4]) and
+                            self._could_be_tzname(res.hour, res.tzname,
+                                                  None, l[i + 4])):
+                        # -0300 (BRST)
+                        res.tzname = l[i + 4]
+                        i += 4
+
+                    i += 1
+
+                # Check jumps
+                elif not (info.jump(l[i]) or fuzzy):
+                    raise ValueError(timestr)
+
+                else:
+                    skipped_idxs.append(i)
+                i += 1
+
+            # Process year/month/day
+            year, month, day = ymd.resolve_ymd(yearfirst, dayfirst)
+
+            res.century_specified = ymd.century_specified
+            res.year = year
+            res.month = month
+            res.day = day
+
+        except (IndexError, ValueError):
+            return None, None
+
+        if not info.validate(res):
+            return None, None
+
+        if fuzzy_with_tokens:
+            skipped_tokens = self._recombine_skipped(l, skipped_idxs)
+            return res, tuple(skipped_tokens)
+        else:
+            return res, None
+
+    def _parse_numeric_token(self, tokens, idx, info, ymd, res, fuzzy):
+        # Token is a number
+        value_repr = tokens[idx]
+        try:
+            value = self._to_decimal(value_repr)
+        except Exception as e:
+            six.raise_from(ValueError('Unknown numeric token'), e)
+
+        len_li = len(value_repr)
+
+        len_l = len(tokens)
+
+        if (len(ymd) == 3 and len_li in (2, 4) and
+            res.hour is None and
+            (idx + 1 >= len_l or
+             (tokens[idx + 1] != ':' and
+              info.hms(tokens[idx + 1]) is None))):
+            # 19990101T23[59]
+            s = tokens[idx]
+            res.hour = int(s[:2])
+
+            if len_li == 4:
+                res.minute = int(s[2:])
+
+        elif len_li == 6 or (len_li > 6 and tokens[idx].find('.') == 6):
+            # YYMMDD or HHMMSS[.ss]
+            s = tokens[idx]
+
+            if not ymd and '.' not in tokens[idx]:
+                ymd.append(s[:2])
+                ymd.append(s[2:4])
+                ymd.append(s[4:])
+            else:
+                # 19990101T235959[.59]
+
+                # TODO: Check if res attributes already set.
+                res.hour = int(s[:2])
+                res.minute = int(s[2:4])
+                res.second, res.microsecond = self._parsems(s[4:])
+
+        elif len_li in (8, 12, 14):
+            # YYYYMMDD
+            s = tokens[idx]
+            ymd.append(s[:4], 'Y')
+            ymd.append(s[4:6])
+            ymd.append(s[6:8])
+
+            if len_li > 8:
+                res.hour = int(s[8:10])
+                res.minute = int(s[10:12])
+
+                if len_li > 12:
+                    res.second = int(s[12:])
+
+        elif self._find_hms_idx(idx, tokens, info, allow_jump=True) is not None:
+            # HH[ ]h or MM[ ]m or SS[.ss][ ]s
+            hms_idx = self._find_hms_idx(idx, tokens, info, allow_jump=True)
+            (idx, hms) = self._parse_hms(idx, tokens, info, hms_idx)
+            if hms is not None:
+                # TODO: checking that hour/minute/second are not
+                # already set?
+                self._assign_hms(res, value_repr, hms)
+
+        elif idx + 2 < len_l and tokens[idx + 1] == ':':
+            # HH:MM[:SS[.ss]]
+            res.hour = int(value)
+            value = self._to_decimal(tokens[idx + 2])  # TODO: try/except for this?
+            (res.minute, res.second) = self._parse_min_sec(value)
+
+            if idx + 4 < len_l and tokens[idx + 3] == ':':
+                res.second, res.microsecond = self._parsems(tokens[idx + 4])
+
+                idx += 2
+
+            idx += 2
+
+        elif idx + 1 < len_l and tokens[idx + 1] in ('-', '/', '.'):
+            sep = tokens[idx + 1]
+            ymd.append(value_repr)
+
+            if idx + 2 < len_l and not info.jump(tokens[idx + 2]):
+                if tokens[idx + 2].isdigit():
+                    # 01-01[-01]
+                    ymd.append(tokens[idx + 2])
+                else:
+                    # 01-Jan[-01]
+                    value = info.month(tokens[idx + 2])
+
+                    if value is not None:
+                        ymd.append(value, 'M')
+                    else:
+                        raise ValueError()
+
+                if idx + 3 < len_l and tokens[idx + 3] == sep:
+                    # We have three members
+                    value = info.month(tokens[idx + 4])
+
+                    if value is not None:
+                        ymd.append(value, 'M')
+                    else:
+                        ymd.append(tokens[idx + 4])
+                    idx += 2
+
+                idx += 1
+            idx += 1
+
+        elif idx + 1 >= len_l or info.jump(tokens[idx + 1]):
+            if idx + 2 < len_l and info.ampm(tokens[idx + 2]) is not None:
+                # 12 am
+                hour = int(value)
+                res.hour = self._adjust_ampm(hour, info.ampm(tokens[idx + 2]))
+                idx += 1
+            else:
+                # Year, month or day
+                ymd.append(value)
+            idx += 1
+
+        elif info.ampm(tokens[idx + 1]) is not None and (0 <= value < 24):
+            # 12am
+            hour = int(value)
+            res.hour = self._adjust_ampm(hour, info.ampm(tokens[idx + 1]))
+            idx += 1
+
+        elif ymd.could_be_day(value):
+            ymd.append(value)
+
+        elif not fuzzy:
+            raise ValueError()
+
+        return idx
+
+    def _find_hms_idx(self, idx, tokens, info, allow_jump):
+        len_l = len(tokens)
+
+        if idx+1 < len_l and info.hms(tokens[idx+1]) is not None:
+            # There is an "h", "m", or "s" label following this token.  We take
+            # assign the upcoming label to the current token.
+            # e.g. the "12" in 12h"
+            hms_idx = idx + 1
+
+        elif (allow_jump and idx+2 < len_l and tokens[idx+1] == ' ' and
+              info.hms(tokens[idx+2]) is not None):
+            # There is a space and then an "h", "m", or "s" label.
+            # e.g. the "12" in "12 h"
+            hms_idx = idx + 2
+
+        elif idx > 0 and info.hms(tokens[idx-1]) is not None:
+            # There is a "h", "m", or "s" preceding this token.  Since neither
+            # of the previous cases was hit, there is no label following this
+            # token, so we use the previous label.
+            # e.g. the "04" in "12h04"
+            hms_idx = idx-1
+
+        elif (1 < idx == len_l-1 and tokens[idx-1] == ' ' and
+              info.hms(tokens[idx-2]) is not None):
+            # If we are looking at the final token, we allow for a
+            # backward-looking check to skip over a space.
+            # TODO: Are we sure this is the right condition here?
+            hms_idx = idx - 2
+
+        else:
+            hms_idx = None
+
+        return hms_idx
+
+    def _assign_hms(self, res, value_repr, hms):
+        # See GH issue #427, fixing float rounding
+        value = self._to_decimal(value_repr)
+
+        if hms == 0:
+            # Hour
+            res.hour = int(value)
+            if value % 1:
+                res.minute = int(60*(value % 1))
+
+        elif hms == 1:
+            (res.minute, res.second) = self._parse_min_sec(value)
+
+        elif hms == 2:
+            (res.second, res.microsecond) = self._parsems(value_repr)
+
+    def _could_be_tzname(self, hour, tzname, tzoffset, token):
+        return (hour is not None and
+                tzname is None and
+                tzoffset is None and
+                len(token) <= 5 and
+                (all(x in string.ascii_uppercase for x in token)
+                 or token in self.info.UTCZONE))
+
+    def _ampm_valid(self, hour, ampm, fuzzy):
+        """
+        For fuzzy parsing, 'a' or 'am' (both valid English words)
+        may erroneously trigger the AM/PM flag. Deal with that
+        here.
+        """
+        val_is_ampm = True
+
+        # If there's already an AM/PM flag, this one isn't one.
+        if fuzzy and ampm is not None:
+            val_is_ampm = False
+
+        # If AM/PM is found and hour is not, raise a ValueError
+        if hour is None:
+            if fuzzy:
+                val_is_ampm = False
+            else:
+                raise ValueError('No hour specified with AM or PM flag.')
+        elif not 0 <= hour <= 12:
+            # If AM/PM is found, it's a 12 hour clock, so raise
+            # an error for invalid range
+            if fuzzy:
+                val_is_ampm = False
+            else:
+                raise ValueError('Invalid hour specified for 12-hour clock.')
+
+        return val_is_ampm
+
+    def _adjust_ampm(self, hour, ampm):
+        if hour < 12 and ampm == 1:
+            hour += 12
+        elif hour == 12 and ampm == 0:
+            hour = 0
+        return hour
+
+    def _parse_min_sec(self, value):
+        # TODO: Every usage of this function sets res.second to the return
+        # value. Are there any cases where second will be returned as None and
+        # we *don't* want to set res.second = None?
+        minute = int(value)
+        second = None
+
+        sec_remainder = value % 1
+        if sec_remainder:
+            second = int(60 * sec_remainder)
+        return (minute, second)
+
+    def _parse_hms(self, idx, tokens, info, hms_idx):
+        # TODO: Is this going to admit a lot of false-positives for when we
+        # just happen to have digits and "h", "m" or "s" characters in non-date
+        # text?  I guess hex hashes won't have that problem, but there's plenty
+        # of random junk out there.
+        if hms_idx is None:
+            hms = None
+            new_idx = idx
+        elif hms_idx > idx:
+            hms = info.hms(tokens[hms_idx])
+            new_idx = hms_idx
+        else:
+            # Looking backwards, increment one.
+            hms = info.hms(tokens[hms_idx]) + 1
+            new_idx = idx
+
+        return (new_idx, hms)
+
+    # ------------------------------------------------------------------
+    # Handling for individual tokens.  These are kept as methods instead
+    #  of functions for the sake of customizability via subclassing.
+
+    def _parsems(self, value):
+        """Parse a I[.F] seconds value into (seconds, microseconds)."""
+        if "." not in value:
+            return int(value), 0
+        else:
+            i, f = value.split(".")
+            return int(i), int(f.ljust(6, "0")[:6])
+
+    def _to_decimal(self, val):
+        try:
+            decimal_value = Decimal(val)
+            # See GH 662, edge case, infinite value should not be converted
+            #  via `_to_decimal`
+            if not decimal_value.is_finite():
+                raise ValueError("Converted decimal value is infinite or NaN")
+        except Exception as e:
+            msg = "Could not convert %s to decimal" % val
+            six.raise_from(ValueError(msg), e)
+        else:
+            return decimal_value
+
+    # ------------------------------------------------------------------
+    # Post-Parsing construction of datetime output.  These are kept as
+    #  methods instead of functions for the sake of customizability via
+    #  subclassing.
+
+    def _build_tzinfo(self, tzinfos, tzname, tzoffset):
+        if callable(tzinfos):
+            tzdata = tzinfos(tzname, tzoffset)
+        else:
+            tzdata = tzinfos.get(tzname)
+        # handle case where tzinfo is paased an options that returns None
+        # eg tzinfos = {'BRST' : None}
+        if isinstance(tzdata, datetime.tzinfo) or tzdata is None:
+            tzinfo = tzdata
+        elif isinstance(tzdata, text_type):
+            tzinfo = tz.tzstr(tzdata)
+        elif isinstance(tzdata, integer_types):
+            tzinfo = tz.tzoffset(tzname, tzdata)
+        else:
+            raise TypeError("Offset must be tzinfo subclass, tz string, "
+                            "or int offset.")
+        return tzinfo
+
+    def _build_tzaware(self, naive, res, tzinfos):
+        if (callable(tzinfos) or (tzinfos and res.tzname in tzinfos)):
+            tzinfo = self._build_tzinfo(tzinfos, res.tzname, res.tzoffset)
+            aware = naive.replace(tzinfo=tzinfo)
+            aware = self._assign_tzname(aware, res.tzname)
+
+        elif res.tzname and res.tzname in time.tzname:
+            aware = naive.replace(tzinfo=tz.tzlocal())
+
+            # Handle ambiguous local datetime
+            aware = self._assign_tzname(aware, res.tzname)
+
+            # This is mostly relevant for winter GMT zones parsed in the UK
+            if (aware.tzname() != res.tzname and
+                    res.tzname in self.info.UTCZONE):
+                aware = aware.replace(tzinfo=tz.UTC)
+
+        elif res.tzoffset == 0:
+            aware = naive.replace(tzinfo=tz.UTC)
+
+        elif res.tzoffset:
+            aware = naive.replace(tzinfo=tz.tzoffset(res.tzname, res.tzoffset))
+
+        elif not res.tzname and not res.tzoffset:
+            # i.e. no timezone information was found.
+            aware = naive
+
+        elif res.tzname:
+            # tz-like string was parsed but we don't know what to do
+            # with it
+            warnings.warn("tzname {tzname} identified but not understood.  "
+                          "Pass `tzinfos` argument in order to correctly "
+                          "return a timezone-aware datetime.  In a future "
+                          "version, this will raise an "
+                          "exception.".format(tzname=res.tzname),
+                          category=UnknownTimezoneWarning)
+            aware = naive
+
+        return aware
+
+    def _build_naive(self, res, default):
+        repl = {}
+        for attr in ("year", "month", "day", "hour",
+                     "minute", "second", "microsecond"):
+            value = getattr(res, attr)
+            if value is not None:
+                repl[attr] = value
+
+        if 'day' not in repl:
+            # If the default day exceeds the last day of the month, fall back
+            # to the end of the month.
+            cyear = default.year if res.year is None else res.year
+            cmonth = default.month if res.month is None else res.month
+            cday = default.day if res.day is None else res.day
+
+            if cday > monthrange(cyear, cmonth)[1]:
+                repl['day'] = monthrange(cyear, cmonth)[1]
+
+        naive = default.replace(**repl)
+
+        if res.weekday is not None and not res.day:
+            naive = naive + relativedelta.relativedelta(weekday=res.weekday)
+
+        return naive
+
+    def _assign_tzname(self, dt, tzname):
+        if dt.tzname() != tzname:
+            new_dt = tz.enfold(dt, fold=1)
+            if new_dt.tzname() == tzname:
+                return new_dt
+
+        return dt
+
+    def _recombine_skipped(self, tokens, skipped_idxs):
+        """
+        >>> tokens = ["foo", " ", "bar", " ", "19June2000", "baz"]
+        >>> skipped_idxs = [0, 1, 2, 5]
+        >>> _recombine_skipped(tokens, skipped_idxs)
+        ["foo bar", "baz"]
+        """
+        skipped_tokens = []
+        for i, idx in enumerate(sorted(skipped_idxs)):
+            if i > 0 and idx - 1 == skipped_idxs[i - 1]:
+                skipped_tokens[-1] = skipped_tokens[-1] + tokens[idx]
+            else:
+                skipped_tokens.append(tokens[idx])
+
+        return skipped_tokens
+
+
+DEFAULTPARSER = parser()
+
+
+def parse(timestr, parserinfo=None, **kwargs):
+    """
+
+    Parse a string in one of the supported formats, using the
+    ``parserinfo`` parameters.
+
+    :param timestr:
+        A string containing a date/time stamp.
+
+    :param parserinfo:
+        A :class:`parserinfo` object containing parameters for the parser.
+        If ``None``, the default arguments to the :class:`parserinfo`
+        constructor are used.
+
+    The ``**kwargs`` parameter takes the following keyword arguments:
+
+    :param default:
+        The default datetime object, if this is a datetime object and not
+        ``None``, elements specified in ``timestr`` replace elements in the
+        default object.
+
+    :param ignoretz:
+        If set ``True``, time zones in parsed strings are ignored and a naive
+        :class:`datetime` object is returned.
+
+    :param tzinfos:
+        Additional time zone names / aliases which may be present in the
+        string. This argument maps time zone names (and optionally offsets
+        from those time zones) to time zones. This parameter can be a
+        dictionary with timezone aliases mapping time zone names to time
+        zones or a function taking two parameters (``tzname`` and
+        ``tzoffset``) and returning a time zone.
+
+        The timezones to which the names are mapped can be an integer
+        offset from UTC in seconds or a :class:`tzinfo` object.
+
+        .. doctest::
+           :options: +NORMALIZE_WHITESPACE
+
+            >>> from dateutil.parser import parse
+            >>> from dateutil.tz import gettz
+            >>> tzinfos = {"BRST": -7200, "CST": gettz("America/Chicago")}
+            >>> parse("2012-01-19 17:21:00 BRST", tzinfos=tzinfos)
+            datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))
+            >>> parse("2012-01-19 17:21:00 CST", tzinfos=tzinfos)
+            datetime.datetime(2012, 1, 19, 17, 21,
+                              tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))
+
+        This parameter is ignored if ``ignoretz`` is set.
+
+    :param dayfirst:
+        Whether to interpret the first value in an ambiguous 3-integer date
+        (e.g. 01/05/09) as the day (``True``) or month (``False``). If
+        ``yearfirst`` is set to ``True``, this distinguishes between YDM and
+        YMD. If set to ``None``, this value is retrieved from the current
+        :class:`parserinfo` object (which itself defaults to ``False``).
+
+    :param yearfirst:
+        Whether to interpret the first value in an ambiguous 3-integer date
+        (e.g. 01/05/09) as the year. If ``True``, the first number is taken to
+        be the year, otherwise the last number is taken to be the year. If
+        this is set to ``None``, the value is retrieved from the current
+        :class:`parserinfo` object (which itself defaults to ``False``).
+
+    :param fuzzy:
+        Whether to allow fuzzy parsing, allowing for string like "Today is
+        January 1, 2047 at 8:21:00AM".
+
+    :param fuzzy_with_tokens:
+        If ``True``, ``fuzzy`` is automatically set to True, and the parser
+        will return a tuple where the first element is the parsed
+        :class:`datetime.datetime` datetimestamp and the second element is
+        a tuple containing the portions of the string which were ignored:
+
+        .. doctest::
+
+            >>> from dateutil.parser import parse
+            >>> parse("Today is January 1, 2047 at 8:21:00AM", fuzzy_with_tokens=True)
+            (datetime.datetime(2047, 1, 1, 8, 21), (u'Today is ', u' ', u'at '))
+
+    :return:
+        Returns a :class:`datetime.datetime` object or, if the
+        ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the
+        first element being a :class:`datetime.datetime` object, the second
+        a tuple containing the fuzzy tokens.
+
+    :raises ParserError:
+        Raised for invalid or unknown string formats, if the provided
+        :class:`tzinfo` is not in a valid format, or if an invalid date would
+        be created.
+
+    :raises OverflowError:
+        Raised if the parsed date exceeds the largest valid C integer on
+        your system.
+    """
+    if parserinfo:
+        return parser(parserinfo).parse(timestr, **kwargs)
+    else:
+        return DEFAULTPARSER.parse(timestr, **kwargs)
+
+
+class _tzparser(object):
+
+    class _result(_resultbase):
+
+        __slots__ = ["stdabbr", "stdoffset", "dstabbr", "dstoffset",
+                     "start", "end"]
+
+        class _attr(_resultbase):
+            __slots__ = ["month", "week", "weekday",
+                         "yday", "jyday", "day", "time"]
+
+        def __repr__(self):
+            return self._repr("")
+
+        def __init__(self):
+            _resultbase.__init__(self)
+            self.start = self._attr()
+            self.end = self._attr()
+
+    def parse(self, tzstr):
+        res = self._result()
+        l = [x for x in re.split(r'([,:.]|[a-zA-Z]+|[0-9]+)',tzstr) if x]
+        used_idxs = list()
+        try:
+
+            len_l = len(l)
+
+            i = 0
+            while i < len_l:
+                # BRST+3[BRDT[+2]]
+                j = i
+                while j < len_l and not [x for x in l[j]
+                                         if x in "0123456789:,-+"]:
+                    j += 1
+                if j != i:
+                    if not res.stdabbr:
+                        offattr = "stdoffset"
+                        res.stdabbr = "".join(l[i:j])
+                    else:
+                        offattr = "dstoffset"
+                        res.dstabbr = "".join(l[i:j])
+
+                    for ii in range(j):
+                        used_idxs.append(ii)
+                    i = j
+                    if (i < len_l and (l[i] in ('+', '-') or l[i][0] in
+                                       "0123456789")):
+                        if l[i] in ('+', '-'):
+                            # Yes, that's right.  See the TZ variable
+                            # documentation.
+                            signal = (1, -1)[l[i] == '+']
+                            used_idxs.append(i)
+                            i += 1
+                        else:
+                            signal = -1
+                        len_li = len(l[i])
+                        if len_li == 4:
+                            # -0300
+                            setattr(res, offattr, (int(l[i][:2]) * 3600 +
+                                                   int(l[i][2:]) * 60) * signal)
+                        elif i + 1 < len_l and l[i + 1] == ':':
+                            # -03:00
+                            setattr(res, offattr,
+                                    (int(l[i]) * 3600 +
+                                     int(l[i + 2]) * 60) * signal)
+                            used_idxs.append(i)
+                            i += 2
+                        elif len_li <= 2:
+                            # -[0]3
+                            setattr(res, offattr,
+                                    int(l[i][:2]) * 3600 * signal)
+                        else:
+                            return None
+                        used_idxs.append(i)
+                        i += 1
+                    if res.dstabbr:
+                        break
+                else:
+                    break
+
+
+            if i < len_l:
+                for j in range(i, len_l):
+                    if l[j] == ';':
+                        l[j] = ','
+
+                assert l[i] == ','
+
+                i += 1
+
+            if i >= len_l:
+                pass
+            elif (8 <= l.count(',') <= 9 and
+                  not [y for x in l[i:] if x != ','
+                       for y in x if y not in "0123456789+-"]):
+                # GMT0BST,3,0,30,3600,10,0,26,7200[,3600]
+                for x in (res.start, res.end):
+                    x.month = int(l[i])
+                    used_idxs.append(i)
+                    i += 2
+                    if l[i] == '-':
+                        value = int(l[i + 1]) * -1
+                        used_idxs.append(i)
+                        i += 1
+                    else:
+                        value = int(l[i])
+                    used_idxs.append(i)
+                    i += 2
+                    if value:
+                        x.week = value
+                        x.weekday = (int(l[i]) - 1) % 7
+                    else:
+                        x.day = int(l[i])
+                    used_idxs.append(i)
+                    i += 2
+                    x.time = int(l[i])
+                    used_idxs.append(i)
+                    i += 2
+                if i < len_l:
+                    if l[i] in ('-', '+'):
+                        signal = (-1, 1)[l[i] == "+"]
+                        used_idxs.append(i)
+                        i += 1
+                    else:
+                        signal = 1
+                    used_idxs.append(i)
+                    res.dstoffset = (res.stdoffset + int(l[i]) * signal)
+
+                # This was a made-up format that is not in normal use
+                warn(('Parsed time zone "%s"' % tzstr) +
+                     'is in a non-standard dateutil-specific format, which ' +
+                     'is now deprecated; support for parsing this format ' +
+                     'will be removed in future versions. It is recommended ' +
+                     'that you switch to a standard format like the GNU ' +
+                     'TZ variable format.', tz.DeprecatedTzFormatWarning)
+            elif (l.count(',') == 2 and l[i:].count('/') <= 2 and
+                  not [y for x in l[i:] if x not in (',', '/', 'J', 'M',
+                                                     '.', '-', ':')
+                       for y in x if y not in "0123456789"]):
+                for x in (res.start, res.end):
+                    if l[i] == 'J':
+                        # non-leap year day (1 based)
+                        used_idxs.append(i)
+                        i += 1
+                        x.jyday = int(l[i])
+                    elif l[i] == 'M':
+                        # month[-.]week[-.]weekday
+                        used_idxs.append(i)
+                        i += 1
+                        x.month = int(l[i])
+                        used_idxs.append(i)
+                        i += 1
+                        assert l[i] in ('-', '.')
+                        used_idxs.append(i)
+                        i += 1
+                        x.week = int(l[i])
+                        if x.week == 5:
+                            x.week = -1
+                        used_idxs.append(i)
+                        i += 1
+                        assert l[i] in ('-', '.')
+                        used_idxs.append(i)
+                        i += 1
+                        x.weekday = (int(l[i]) - 1) % 7
+                    else:
+                        # year day (zero based)
+                        x.yday = int(l[i]) + 1
+
+                    used_idxs.append(i)
+                    i += 1
+
+                    if i < len_l and l[i] == '/':
+                        used_idxs.append(i)
+                        i += 1
+                        # start time
+                        len_li = len(l[i])
+                        if len_li == 4:
+                            # -0300
+                            x.time = (int(l[i][:2]) * 3600 +
+                                      int(l[i][2:]) * 60)
+                        elif i + 1 < len_l and l[i + 1] == ':':
+                            # -03:00
+                            x.time = int(l[i]) * 3600 + int(l[i + 2]) * 60
+                            used_idxs.append(i)
+                            i += 2
+                            if i + 1 < len_l and l[i + 1] == ':':
+                                used_idxs.append(i)
+                                i += 2
+                                x.time += int(l[i])
+                        elif len_li <= 2:
+                            # -[0]3
+                            x.time = (int(l[i][:2]) * 3600)
+                        else:
+                            return None
+                        used_idxs.append(i)
+                        i += 1
+
+                    assert i == len_l or l[i] == ','
+
+                    i += 1
+
+                assert i >= len_l
+
+        except (IndexError, ValueError, AssertionError):
+            return None
+
+        unused_idxs = set(range(len_l)).difference(used_idxs)
+        res.any_unused_tokens = not {l[n] for n in unused_idxs}.issubset({",",":"})
+        return res
+
+
+DEFAULTTZPARSER = _tzparser()
+
+
+def _parsetz(tzstr):
+    return DEFAULTTZPARSER.parse(tzstr)
+
+
+class ParserError(ValueError):
+    """Exception subclass used for any failure to parse a datetime string.
+
+    This is a subclass of :py:exc:`ValueError`, and should be raised any time
+    earlier versions of ``dateutil`` would have raised ``ValueError``.
+
+    .. versionadded:: 2.8.1
+    """
+    def __str__(self):
+        try:
+            return self.args[0] % self.args[1:]
+        except (TypeError, IndexError):
+            return super(ParserError, self).__str__()
+
+    def __repr__(self):
+        args = ", ".join("'%s'" % arg for arg in self.args)
+        return "%s(%s)" % (self.__class__.__name__, args)
+
+
+class UnknownTimezoneWarning(RuntimeWarning):
+    """Raised when the parser finds a timezone it cannot parse into a tzinfo.
+
+    .. versionadded:: 2.7.0
+    """
+# vim:ts=4:sw=4:et
diff --git a/venv/Lib/site-packages/dateutil/parser/isoparser.py b/venv/Lib/site-packages/dateutil/parser/isoparser.py
new file mode 100644
index 0000000..5d7bee3
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/parser/isoparser.py
@@ -0,0 +1,416 @@
+# -*- coding: utf-8 -*-
+"""
+This module offers a parser for ISO-8601 strings
+
+It is intended to support all valid date, time and datetime formats per the
+ISO-8601 specification.
+
+..versionadded:: 2.7.0
+"""
+from datetime import datetime, timedelta, time, date
+import calendar
+from dateutil import tz
+
+from functools import wraps
+
+import re
+import six
+
+__all__ = ["isoparse", "isoparser"]
+
+
+def _takes_ascii(f):
+    @wraps(f)
+    def func(self, str_in, *args, **kwargs):
+        # If it's a stream, read the whole thing
+        str_in = getattr(str_in, 'read', lambda: str_in)()
+
+        # If it's unicode, turn it into bytes, since ISO-8601 only covers ASCII
+        if isinstance(str_in, six.text_type):
+            # ASCII is the same in UTF-8
+            try:
+                str_in = str_in.encode('ascii')
+            except UnicodeEncodeError as e:
+                msg = 'ISO-8601 strings should contain only ASCII characters'
+                six.raise_from(ValueError(msg), e)
+
+        return f(self, str_in, *args, **kwargs)
+
+    return func
+
+
+class isoparser(object):
+    def __init__(self, sep=None):
+        """
+        :param sep:
+            A single character that separates date and time portions. If
+            ``None``, the parser will accept any single character.
+            For strict ISO-8601 adherence, pass ``'T'``.
+        """
+        if sep is not None:
+            if (len(sep) != 1 or ord(sep) >= 128 or sep in '0123456789'):
+                raise ValueError('Separator must be a single, non-numeric ' +
+                                 'ASCII character')
+
+            sep = sep.encode('ascii')
+
+        self._sep = sep
+
+    @_takes_ascii
+    def isoparse(self, dt_str):
+        """
+        Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.
+
+        An ISO-8601 datetime string consists of a date portion, followed
+        optionally by a time portion - the date and time portions are separated
+        by a single character separator, which is ``T`` in the official
+        standard. Incomplete date formats (such as ``YYYY-MM``) may *not* be
+        combined with a time portion.
+
+        Supported date formats are:
+
+        Common:
+
+        - ``YYYY``
+        - ``YYYY-MM`` or ``YYYYMM``
+        - ``YYYY-MM-DD`` or ``YYYYMMDD``
+
+        Uncommon:
+
+        - ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)
+        - ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day
+
+        The ISO week and day numbering follows the same logic as
+        :func:`datetime.date.isocalendar`.
+
+        Supported time formats are:
+
+        - ``hh``
+        - ``hh:mm`` or ``hhmm``
+        - ``hh:mm:ss`` or ``hhmmss``
+        - ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)
+
+        Midnight is a special case for `hh`, as the standard supports both
+        00:00 and 24:00 as a representation. The decimal separator can be
+        either a dot or a comma.
+
+
+        .. caution::
+
+            Support for fractional components other than seconds is part of the
+            ISO-8601 standard, but is not currently implemented in this parser.
+
+        Supported time zone offset formats are:
+
+        - `Z` (UTC)
+        - `±HH:MM`
+        - `±HHMM`
+        - `±HH`
+
+        Offsets will be represented as :class:`dateutil.tz.tzoffset` objects,
+        with the exception of UTC, which will be represented as
+        :class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such
+        as `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.
+
+        :param dt_str:
+            A string or stream containing only an ISO-8601 datetime string
+
+        :return:
+            Returns a :class:`datetime.datetime` representing the string.
+            Unspecified components default to their lowest value.
+
+        .. warning::
+
+            As of version 2.7.0, the strictness of the parser should not be
+            considered a stable part of the contract. Any valid ISO-8601 string
+            that parses correctly with the default settings will continue to
+            parse correctly in future versions, but invalid strings that
+            currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not
+            guaranteed to continue failing in future versions if they encode
+            a valid date.
+
+        .. versionadded:: 2.7.0
+        """
+        components, pos = self._parse_isodate(dt_str)
+
+        if len(dt_str) > pos:
+            if self._sep is None or dt_str[pos:pos + 1] == self._sep:
+                components += self._parse_isotime(dt_str[pos + 1:])
+            else:
+                raise ValueError('String contains unknown ISO components')
+
+        if len(components) > 3 and components[3] == 24:
+            components[3] = 0
+            return datetime(*components) + timedelta(days=1)
+
+        return datetime(*components)
+
+    @_takes_ascii
+    def parse_isodate(self, datestr):
+        """
+        Parse the date portion of an ISO string.
+
+        :param datestr:
+            The string portion of an ISO string, without a separator
+
+        :return:
+            Returns a :class:`datetime.date` object
+        """
+        components, pos = self._parse_isodate(datestr)
+        if pos < len(datestr):
+            raise ValueError('String contains unknown ISO ' +
+                             'components: {!r}'.format(datestr.decode('ascii')))
+        return date(*components)
+
+    @_takes_ascii
+    def parse_isotime(self, timestr):
+        """
+        Parse the time portion of an ISO string.
+
+        :param timestr:
+            The time portion of an ISO string, without a separator
+
+        :return:
+            Returns a :class:`datetime.time` object
+        """
+        components = self._parse_isotime(timestr)
+        if components[0] == 24:
+            components[0] = 0
+        return time(*components)
+
+    @_takes_ascii
+    def parse_tzstr(self, tzstr, zero_as_utc=True):
+        """
+        Parse a valid ISO time zone string.
+
+        See :func:`isoparser.isoparse` for details on supported formats.
+
+        :param tzstr:
+            A string representing an ISO time zone offset
+
+        :param zero_as_utc:
+            Whether to return :class:`dateutil.tz.tzutc` for zero-offset zones
+
+        :return:
+            Returns :class:`dateutil.tz.tzoffset` for offsets and
+            :class:`dateutil.tz.tzutc` for ``Z`` and (if ``zero_as_utc`` is
+            specified) offsets equivalent to UTC.
+        """
+        return self._parse_tzstr(tzstr, zero_as_utc=zero_as_utc)
+
+    # Constants
+    _DATE_SEP = b'-'
+    _TIME_SEP = b':'
+    _FRACTION_REGEX = re.compile(b'[\\.,]([0-9]+)')
+
+    def _parse_isodate(self, dt_str):
+        try:
+            return self._parse_isodate_common(dt_str)
+        except ValueError:
+            return self._parse_isodate_uncommon(dt_str)
+
+    def _parse_isodate_common(self, dt_str):
+        len_str = len(dt_str)
+        components = [1, 1, 1]
+
+        if len_str < 4:
+            raise ValueError('ISO string too short')
+
+        # Year
+        components[0] = int(dt_str[0:4])
+        pos = 4
+        if pos >= len_str:
+            return components, pos
+
+        has_sep = dt_str[pos:pos + 1] == self._DATE_SEP
+        if has_sep:
+            pos += 1
+
+        # Month
+        if len_str - pos < 2:
+            raise ValueError('Invalid common month')
+
+        components[1] = int(dt_str[pos:pos + 2])
+        pos += 2
+
+        if pos >= len_str:
+            if has_sep:
+                return components, pos
+            else:
+                raise ValueError('Invalid ISO format')
+
+        if has_sep:
+            if dt_str[pos:pos + 1] != self._DATE_SEP:
+                raise ValueError('Invalid separator in ISO string')
+            pos += 1
+
+        # Day
+        if len_str - pos < 2:
+            raise ValueError('Invalid common day')
+        components[2] = int(dt_str[pos:pos + 2])
+        return components, pos + 2
+
+    def _parse_isodate_uncommon(self, dt_str):
+        if len(dt_str) < 4:
+            raise ValueError('ISO string too short')
+
+        # All ISO formats start with the year
+        year = int(dt_str[0:4])
+
+        has_sep = dt_str[4:5] == self._DATE_SEP
+
+        pos = 4 + has_sep       # Skip '-' if it's there
+        if dt_str[pos:pos + 1] == b'W':
+            # YYYY-?Www-?D?
+            pos += 1
+            weekno = int(dt_str[pos:pos + 2])
+            pos += 2
+
+            dayno = 1
+            if len(dt_str) > pos:
+                if (dt_str[pos:pos + 1] == self._DATE_SEP) != has_sep:
+                    raise ValueError('Inconsistent use of dash separator')
+
+                pos += has_sep
+
+                dayno = int(dt_str[pos:pos + 1])
+                pos += 1
+
+            base_date = self._calculate_weekdate(year, weekno, dayno)
+        else:
+            # YYYYDDD or YYYY-DDD
+            if len(dt_str) - pos < 3:
+                raise ValueError('Invalid ordinal day')
+
+            ordinal_day = int(dt_str[pos:pos + 3])
+            pos += 3
+
+            if ordinal_day < 1 or ordinal_day > (365 + calendar.isleap(year)):
+                raise ValueError('Invalid ordinal day' +
+                                 ' {} for year {}'.format(ordinal_day, year))
+
+            base_date = date(year, 1, 1) + timedelta(days=ordinal_day - 1)
+
+        components = [base_date.year, base_date.month, base_date.day]
+        return components, pos
+
+    def _calculate_weekdate(self, year, week, day):
+        """
+        Calculate the day of corresponding to the ISO year-week-day calendar.
+
+        This function is effectively the inverse of
+        :func:`datetime.date.isocalendar`.
+
+        :param year:
+            The year in the ISO calendar
+
+        :param week:
+            The week in the ISO calendar - range is [1, 53]
+
+        :param day:
+            The day in the ISO calendar - range is [1 (MON), 7 (SUN)]
+
+        :return:
+            Returns a :class:`datetime.date`
+        """
+        if not 0 < week < 54:
+            raise ValueError('Invalid week: {}'.format(week))
+
+        if not 0 < day < 8:     # Range is 1-7
+            raise ValueError('Invalid weekday: {}'.format(day))
+
+        # Get week 1 for the specific year:
+        jan_4 = date(year, 1, 4)   # Week 1 always has January 4th in it
+        week_1 = jan_4 - timedelta(days=jan_4.isocalendar()[2] - 1)
+
+        # Now add the specific number of weeks and days to get what we want
+        week_offset = (week - 1) * 7 + (day - 1)
+        return week_1 + timedelta(days=week_offset)
+
+    def _parse_isotime(self, timestr):
+        len_str = len(timestr)
+        components = [0, 0, 0, 0, None]
+        pos = 0
+        comp = -1
+
+        if len_str < 2:
+            raise ValueError('ISO time too short')
+
+        has_sep = False
+
+        while pos < len_str and comp < 5:
+            comp += 1
+
+            if timestr[pos:pos + 1] in b'-+Zz':
+                # Detect time zone boundary
+                components[-1] = self._parse_tzstr(timestr[pos:])
+                pos = len_str
+                break
+
+            if comp == 1 and timestr[pos:pos+1] == self._TIME_SEP:
+                has_sep = True
+                pos += 1
+            elif comp == 2 and has_sep:
+                if timestr[pos:pos+1] != self._TIME_SEP:
+                    raise ValueError('Inconsistent use of colon separator')
+                pos += 1
+
+            if comp < 3:
+                # Hour, minute, second
+                components[comp] = int(timestr[pos:pos + 2])
+                pos += 2
+
+            if comp == 3:
+                # Fraction of a second
+                frac = self._FRACTION_REGEX.match(timestr[pos:])
+                if not frac:
+                    continue
+
+                us_str = frac.group(1)[:6]  # Truncate to microseconds
+                components[comp] = int(us_str) * 10**(6 - len(us_str))
+                pos += len(frac.group())
+
+        if pos < len_str:
+            raise ValueError('Unused components in ISO string')
+
+        if components[0] == 24:
+            # Standard supports 00:00 and 24:00 as representations of midnight
+            if any(component != 0 for component in components[1:4]):
+                raise ValueError('Hour may only be 24 at 24:00:00.000')
+
+        return components
+
+    def _parse_tzstr(self, tzstr, zero_as_utc=True):
+        if tzstr == b'Z' or tzstr == b'z':
+            return tz.UTC
+
+        if len(tzstr) not in {3, 5, 6}:
+            raise ValueError('Time zone offset must be 1, 3, 5 or 6 characters')
+
+        if tzstr[0:1] == b'-':
+            mult = -1
+        elif tzstr[0:1] == b'+':
+            mult = 1
+        else:
+            raise ValueError('Time zone offset requires sign')
+
+        hours = int(tzstr[1:3])
+        if len(tzstr) == 3:
+            minutes = 0
+        else:
+            minutes = int(tzstr[(4 if tzstr[3:4] == self._TIME_SEP else 3):])
+
+        if zero_as_utc and hours == 0 and minutes == 0:
+            return tz.UTC
+        else:
+            if minutes > 59:
+                raise ValueError('Invalid minutes in time zone offset')
+
+            if hours > 23:
+                raise ValueError('Invalid hours in time zone offset')
+
+            return tz.tzoffset(None, mult * (hours * 60 + minutes) * 60)
+
+
+DEFAULT_ISOPARSER = isoparser()
+isoparse = DEFAULT_ISOPARSER.isoparse
diff --git a/venv/Lib/site-packages/dateutil/relativedelta.py b/venv/Lib/site-packages/dateutil/relativedelta.py
new file mode 100644
index 0000000..a9e85f7
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/relativedelta.py
@@ -0,0 +1,599 @@
+# -*- coding: utf-8 -*-
+import datetime
+import calendar
+
+import operator
+from math import copysign
+
+from six import integer_types
+from warnings import warn
+
+from ._common import weekday
+
+MO, TU, WE, TH, FR, SA, SU = weekdays = tuple(weekday(x) for x in range(7))
+
+__all__ = ["relativedelta", "MO", "TU", "WE", "TH", "FR", "SA", "SU"]
+
+
+class relativedelta(object):
+    """
+    The relativedelta type is designed to be applied to an existing datetime and
+    can replace specific components of that datetime, or represents an interval
+    of time.
+
+    It is based on the specification of the excellent work done by M.-A. Lemburg
+    in his
+    `mx.DateTime <https://www.egenix.com/products/python/mxBase/mxDateTime/>`_ extension.
+    However, notice that this type does *NOT* implement the same algorithm as
+    his work. Do *NOT* expect it to behave like mx.DateTime's counterpart.
+
+    There are two different ways to build a relativedelta instance. The
+    first one is passing it two date/datetime classes::
+
+        relativedelta(datetime1, datetime2)
+
+    The second one is passing it any number of the following keyword arguments::
+
+        relativedelta(arg1=x,arg2=y,arg3=z...)
+
+        year, month, day, hour, minute, second, microsecond:
+            Absolute information (argument is singular); adding or subtracting a
+            relativedelta with absolute information does not perform an arithmetic
+            operation, but rather REPLACES the corresponding value in the
+            original datetime with the value(s) in relativedelta.
+
+        years, months, weeks, days, hours, minutes, seconds, microseconds:
+            Relative information, may be negative (argument is plural); adding
+            or subtracting a relativedelta with relative information performs
+            the corresponding arithmetic operation on the original datetime value
+            with the information in the relativedelta.
+
+        weekday: 
+            One of the weekday instances (MO, TU, etc) available in the
+            relativedelta module. These instances may receive a parameter N,
+            specifying the Nth weekday, which could be positive or negative
+            (like MO(+1) or MO(-2)). Not specifying it is the same as specifying
+            +1. You can also use an integer, where 0=MO. This argument is always
+            relative e.g. if the calculated date is already Monday, using MO(1)
+            or MO(-1) won't change the day. To effectively make it absolute, use
+            it in combination with the day argument (e.g. day=1, MO(1) for first
+            Monday of the month).
+
+        leapdays:
+            Will add given days to the date found, if year is a leap
+            year, and the date found is post 28 of february.
+
+        yearday, nlyearday:
+            Set the yearday or the non-leap year day (jump leap days).
+            These are converted to day/month/leapdays information.
+
+    There are relative and absolute forms of the keyword
+    arguments. The plural is relative, and the singular is
+    absolute. For each argument in the order below, the absolute form
+    is applied first (by setting each attribute to that value) and
+    then the relative form (by adding the value to the attribute).
+
+    The order of attributes considered when this relativedelta is
+    added to a datetime is:
+
+    1. Year
+    2. Month
+    3. Day
+    4. Hours
+    5. Minutes
+    6. Seconds
+    7. Microseconds
+
+    Finally, weekday is applied, using the rule described above.
+
+    For example
+
+    >>> from datetime import datetime
+    >>> from dateutil.relativedelta import relativedelta, MO
+    >>> dt = datetime(2018, 4, 9, 13, 37, 0)
+    >>> delta = relativedelta(hours=25, day=1, weekday=MO(1))
+    >>> dt + delta
+    datetime.datetime(2018, 4, 2, 14, 37)
+
+    First, the day is set to 1 (the first of the month), then 25 hours
+    are added, to get to the 2nd day and 14th hour, finally the
+    weekday is applied, but since the 2nd is already a Monday there is
+    no effect.
+
+    """
+
+    def __init__(self, dt1=None, dt2=None,
+                 years=0, months=0, days=0, leapdays=0, weeks=0,
+                 hours=0, minutes=0, seconds=0, microseconds=0,
+                 year=None, month=None, day=None, weekday=None,
+                 yearday=None, nlyearday=None,
+                 hour=None, minute=None, second=None, microsecond=None):
+
+        if dt1 and dt2:
+            # datetime is a subclass of date. So both must be date
+            if not (isinstance(dt1, datetime.date) and
+                    isinstance(dt2, datetime.date)):
+                raise TypeError("relativedelta only diffs datetime/date")
+
+            # We allow two dates, or two datetimes, so we coerce them to be
+            # of the same type
+            if (isinstance(dt1, datetime.datetime) !=
+                    isinstance(dt2, datetime.datetime)):
+                if not isinstance(dt1, datetime.datetime):
+                    dt1 = datetime.datetime.fromordinal(dt1.toordinal())
+                elif not isinstance(dt2, datetime.datetime):
+                    dt2 = datetime.datetime.fromordinal(dt2.toordinal())
+
+            self.years = 0
+            self.months = 0
+            self.days = 0
+            self.leapdays = 0
+            self.hours = 0
+            self.minutes = 0
+            self.seconds = 0
+            self.microseconds = 0
+            self.year = None
+            self.month = None
+            self.day = None
+            self.weekday = None
+            self.hour = None
+            self.minute = None
+            self.second = None
+            self.microsecond = None
+            self._has_time = 0
+
+            # Get year / month delta between the two
+            months = (dt1.year - dt2.year) * 12 + (dt1.month - dt2.month)
+            self._set_months(months)
+
+            # Remove the year/month delta so the timedelta is just well-defined
+            # time units (seconds, days and microseconds)
+            dtm = self.__radd__(dt2)
+
+            # If we've overshot our target, make an adjustment
+            if dt1 < dt2:
+                compare = operator.gt
+                increment = 1
+            else:
+                compare = operator.lt
+                increment = -1
+
+            while compare(dt1, dtm):
+                months += increment
+                self._set_months(months)
+                dtm = self.__radd__(dt2)
+
+            # Get the timedelta between the "months-adjusted" date and dt1
+            delta = dt1 - dtm
+            self.seconds = delta.seconds + delta.days * 86400
+            self.microseconds = delta.microseconds
+        else:
+            # Check for non-integer values in integer-only quantities
+            if any(x is not None and x != int(x) for x in (years, months)):
+                raise ValueError("Non-integer years and months are "
+                                 "ambiguous and not currently supported.")
+
+            # Relative information
+            self.years = int(years)
+            self.months = int(months)
+            self.days = days + weeks * 7
+            self.leapdays = leapdays
+            self.hours = hours
+            self.minutes = minutes
+            self.seconds = seconds
+            self.microseconds = microseconds
+
+            # Absolute information
+            self.year = year
+            self.month = month
+            self.day = day
+            self.hour = hour
+            self.minute = minute
+            self.second = second
+            self.microsecond = microsecond
+
+            if any(x is not None and int(x) != x
+                   for x in (year, month, day, hour,
+                             minute, second, microsecond)):
+                # For now we'll deprecate floats - later it'll be an error.
+                warn("Non-integer value passed as absolute information. " +
+                     "This is not a well-defined condition and will raise " +
+                     "errors in future versions.", DeprecationWarning)
+
+            if isinstance(weekday, integer_types):
+                self.weekday = weekdays[weekday]
+            else:
+                self.weekday = weekday
+
+            yday = 0
+            if nlyearday:
+                yday = nlyearday
+            elif yearday:
+                yday = yearday
+                if yearday > 59:
+                    self.leapdays = -1
+            if yday:
+                ydayidx = [31, 59, 90, 120, 151, 181, 212,
+                           243, 273, 304, 334, 366]
+                for idx, ydays in enumerate(ydayidx):
+                    if yday <= ydays:
+                        self.month = idx+1
+                        if idx == 0:
+                            self.day = yday
+                        else:
+                            self.day = yday-ydayidx[idx-1]
+                        break
+                else:
+                    raise ValueError("invalid year day (%d)" % yday)
+
+        self._fix()
+
+    def _fix(self):
+        if abs(self.microseconds) > 999999:
+            s = _sign(self.microseconds)
+            div, mod = divmod(self.microseconds * s, 1000000)
+            self.microseconds = mod * s
+            self.seconds += div * s
+        if abs(self.seconds) > 59:
+            s = _sign(self.seconds)
+            div, mod = divmod(self.seconds * s, 60)
+            self.seconds = mod * s
+            self.minutes += div * s
+        if abs(self.minutes) > 59:
+            s = _sign(self.minutes)
+            div, mod = divmod(self.minutes * s, 60)
+            self.minutes = mod * s
+            self.hours += div * s
+        if abs(self.hours) > 23:
+            s = _sign(self.hours)
+            div, mod = divmod(self.hours * s, 24)
+            self.hours = mod * s
+            self.days += div * s
+        if abs(self.months) > 11:
+            s = _sign(self.months)
+            div, mod = divmod(self.months * s, 12)
+            self.months = mod * s
+            self.years += div * s
+        if (self.hours or self.minutes or self.seconds or self.microseconds
+                or self.hour is not None or self.minute is not None or
+                self.second is not None or self.microsecond is not None):
+            self._has_time = 1
+        else:
+            self._has_time = 0
+
+    @property
+    def weeks(self):
+        return int(self.days / 7.0)
+
+    @weeks.setter
+    def weeks(self, value):
+        self.days = self.days - (self.weeks * 7) + value * 7
+
+    def _set_months(self, months):
+        self.months = months
+        if abs(self.months) > 11:
+            s = _sign(self.months)
+            div, mod = divmod(self.months * s, 12)
+            self.months = mod * s
+            self.years = div * s
+        else:
+            self.years = 0
+
+    def normalized(self):
+        """
+        Return a version of this object represented entirely using integer
+        values for the relative attributes.
+
+        >>> relativedelta(days=1.5, hours=2).normalized()
+        relativedelta(days=+1, hours=+14)
+
+        :return:
+            Returns a :class:`dateutil.relativedelta.relativedelta` object.
+        """
+        # Cascade remainders down (rounding each to roughly nearest microsecond)
+        days = int(self.days)
+
+        hours_f = round(self.hours + 24 * (self.days - days), 11)
+        hours = int(hours_f)
+
+        minutes_f = round(self.minutes + 60 * (hours_f - hours), 10)
+        minutes = int(minutes_f)
+
+        seconds_f = round(self.seconds + 60 * (minutes_f - minutes), 8)
+        seconds = int(seconds_f)
+
+        microseconds = round(self.microseconds + 1e6 * (seconds_f - seconds))
+
+        # Constructor carries overflow back up with call to _fix()
+        return self.__class__(years=self.years, months=self.months,
+                              days=days, hours=hours, minutes=minutes,
+                              seconds=seconds, microseconds=microseconds,
+                              leapdays=self.leapdays, year=self.year,
+                              month=self.month, day=self.day,
+                              weekday=self.weekday, hour=self.hour,
+                              minute=self.minute, second=self.second,
+                              microsecond=self.microsecond)
+
+    def __add__(self, other):
+        if isinstance(other, relativedelta):
+            return self.__class__(years=other.years + self.years,
+                                 months=other.months + self.months,
+                                 days=other.days + self.days,
+                                 hours=other.hours + self.hours,
+                                 minutes=other.minutes + self.minutes,
+                                 seconds=other.seconds + self.seconds,
+                                 microseconds=(other.microseconds +
+                                               self.microseconds),
+                                 leapdays=other.leapdays or self.leapdays,
+                                 year=(other.year if other.year is not None
+                                       else self.year),
+                                 month=(other.month if other.month is not None
+                                        else self.month),
+                                 day=(other.day if other.day is not None
+                                      else self.day),
+                                 weekday=(other.weekday if other.weekday is not None
+                                          else self.weekday),
+                                 hour=(other.hour if other.hour is not None
+                                       else self.hour),
+                                 minute=(other.minute if other.minute is not None
+                                         else self.minute),
+                                 second=(other.second if other.second is not None
+                                         else self.second),
+                                 microsecond=(other.microsecond if other.microsecond
+                                              is not None else
+                                              self.microsecond))
+        if isinstance(other, datetime.timedelta):
+            return self.__class__(years=self.years,
+                                  months=self.months,
+                                  days=self.days + other.days,
+                                  hours=self.hours,
+                                  minutes=self.minutes,
+                                  seconds=self.seconds + other.seconds,
+                                  microseconds=self.microseconds + other.microseconds,
+                                  leapdays=self.leapdays,
+                                  year=self.year,
+                                  month=self.month,
+                                  day=self.day,
+                                  weekday=self.weekday,
+                                  hour=self.hour,
+                                  minute=self.minute,
+                                  second=self.second,
+                                  microsecond=self.microsecond)
+        if not isinstance(other, datetime.date):
+            return NotImplemented
+        elif self._has_time and not isinstance(other, datetime.datetime):
+            other = datetime.datetime.fromordinal(other.toordinal())
+        year = (self.year or other.year)+self.years
+        month = self.month or other.month
+        if self.months:
+            assert 1 <= abs(self.months) <= 12
+            month += self.months
+            if month > 12:
+                year += 1
+                month -= 12
+            elif month < 1:
+                year -= 1
+                month += 12
+        day = min(calendar.monthrange(year, month)[1],
+                  self.day or other.day)
+        repl = {"year": year, "month": month, "day": day}
+        for attr in ["hour", "minute", "second", "microsecond"]:
+            value = getattr(self, attr)
+            if value is not None:
+                repl[attr] = value
+        days = self.days
+        if self.leapdays and month > 2 and calendar.isleap(year):
+            days += self.leapdays
+        ret = (other.replace(**repl)
+               + datetime.timedelta(days=days,
+                                    hours=self.hours,
+                                    minutes=self.minutes,
+                                    seconds=self.seconds,
+                                    microseconds=self.microseconds))
+        if self.weekday:
+            weekday, nth = self.weekday.weekday, self.weekday.n or 1
+            jumpdays = (abs(nth) - 1) * 7
+            if nth > 0:
+                jumpdays += (7 - ret.weekday() + weekday) % 7
+            else:
+                jumpdays += (ret.weekday() - weekday) % 7
+                jumpdays *= -1
+            ret += datetime.timedelta(days=jumpdays)
+        return ret
+
+    def __radd__(self, other):
+        return self.__add__(other)
+
+    def __rsub__(self, other):
+        return self.__neg__().__radd__(other)
+
+    def __sub__(self, other):
+        if not isinstance(other, relativedelta):
+            return NotImplemented   # In case the other object defines __rsub__
+        return self.__class__(years=self.years - other.years,
+                             months=self.months - other.months,
+                             days=self.days - other.days,
+                             hours=self.hours - other.hours,
+                             minutes=self.minutes - other.minutes,
+                             seconds=self.seconds - other.seconds,
+                             microseconds=self.microseconds - other.microseconds,
+                             leapdays=self.leapdays or other.leapdays,
+                             year=(self.year if self.year is not None
+                                   else other.year),
+                             month=(self.month if self.month is not None else
+                                    other.month),
+                             day=(self.day if self.day is not None else
+                                  other.day),
+                             weekday=(self.weekday if self.weekday is not None else
+                                      other.weekday),
+                             hour=(self.hour if self.hour is not None else
+                                   other.hour),
+                             minute=(self.minute if self.minute is not None else
+                                     other.minute),
+                             second=(self.second if self.second is not None else
+                                     other.second),
+                             microsecond=(self.microsecond if self.microsecond
+                                          is not None else
+                                          other.microsecond))
+
+    def __abs__(self):
+        return self.__class__(years=abs(self.years),
+                              months=abs(self.months),
+                              days=abs(self.days),
+                              hours=abs(self.hours),
+                              minutes=abs(self.minutes),
+                              seconds=abs(self.seconds),
+                              microseconds=abs(self.microseconds),
+                              leapdays=self.leapdays,
+                              year=self.year,
+                              month=self.month,
+                              day=self.day,
+                              weekday=self.weekday,
+                              hour=self.hour,
+                              minute=self.minute,
+                              second=self.second,
+                              microsecond=self.microsecond)
+
+    def __neg__(self):
+        return self.__class__(years=-self.years,
+                             months=-self.months,
+                             days=-self.days,
+                             hours=-self.hours,
+                             minutes=-self.minutes,
+                             seconds=-self.seconds,
+                             microseconds=-self.microseconds,
+                             leapdays=self.leapdays,
+                             year=self.year,
+                             month=self.month,
+                             day=self.day,
+                             weekday=self.weekday,
+                             hour=self.hour,
+                             minute=self.minute,
+                             second=self.second,
+                             microsecond=self.microsecond)
+
+    def __bool__(self):
+        return not (not self.years and
+                    not self.months and
+                    not self.days and
+                    not self.hours and
+                    not self.minutes and
+                    not self.seconds and
+                    not self.microseconds and
+                    not self.leapdays and
+                    self.year is None and
+                    self.month is None and
+                    self.day is None and
+                    self.weekday is None and
+                    self.hour is None and
+                    self.minute is None and
+                    self.second is None and
+                    self.microsecond is None)
+    # Compatibility with Python 2.x
+    __nonzero__ = __bool__
+
+    def __mul__(self, other):
+        try:
+            f = float(other)
+        except TypeError:
+            return NotImplemented
+
+        return self.__class__(years=int(self.years * f),
+                             months=int(self.months * f),
+                             days=int(self.days * f),
+                             hours=int(self.hours * f),
+                             minutes=int(self.minutes * f),
+                             seconds=int(self.seconds * f),
+                             microseconds=int(self.microseconds * f),
+                             leapdays=self.leapdays,
+                             year=self.year,
+                             month=self.month,
+                             day=self.day,
+                             weekday=self.weekday,
+                             hour=self.hour,
+                             minute=self.minute,
+                             second=self.second,
+                             microsecond=self.microsecond)
+
+    __rmul__ = __mul__
+
+    def __eq__(self, other):
+        if not isinstance(other, relativedelta):
+            return NotImplemented
+        if self.weekday or other.weekday:
+            if not self.weekday or not other.weekday:
+                return False
+            if self.weekday.weekday != other.weekday.weekday:
+                return False
+            n1, n2 = self.weekday.n, other.weekday.n
+            if n1 != n2 and not ((not n1 or n1 == 1) and (not n2 or n2 == 1)):
+                return False
+        return (self.years == other.years and
+                self.months == other.months and
+                self.days == other.days and
+                self.hours == other.hours and
+                self.minutes == other.minutes and
+                self.seconds == other.seconds and
+                self.microseconds == other.microseconds and
+                self.leapdays == other.leapdays and
+                self.year == other.year and
+                self.month == other.month and
+                self.day == other.day and
+                self.hour == other.hour and
+                self.minute == other.minute and
+                self.second == other.second and
+                self.microsecond == other.microsecond)
+
+    def __hash__(self):
+        return hash((
+            self.weekday,
+            self.years,
+            self.months,
+            self.days,
+            self.hours,
+            self.minutes,
+            self.seconds,
+            self.microseconds,
+            self.leapdays,
+            self.year,
+            self.month,
+            self.day,
+            self.hour,
+            self.minute,
+            self.second,
+            self.microsecond,
+        ))
+
+    def __ne__(self, other):
+        return not self.__eq__(other)
+
+    def __div__(self, other):
+        try:
+            reciprocal = 1 / float(other)
+        except TypeError:
+            return NotImplemented
+
+        return self.__mul__(reciprocal)
+
+    __truediv__ = __div__
+
+    def __repr__(self):
+        l = []
+        for attr in ["years", "months", "days", "leapdays",
+                     "hours", "minutes", "seconds", "microseconds"]:
+            value = getattr(self, attr)
+            if value:
+                l.append("{attr}={value:+g}".format(attr=attr, value=value))
+        for attr in ["year", "month", "day", "weekday",
+                     "hour", "minute", "second", "microsecond"]:
+            value = getattr(self, attr)
+            if value is not None:
+                l.append("{attr}={value}".format(attr=attr, value=repr(value)))
+        return "{classname}({attrs})".format(classname=self.__class__.__name__,
+                                             attrs=", ".join(l))
+
+
+def _sign(x):
+    return int(copysign(1, x))
+
+# vim:ts=4:sw=4:et
diff --git a/venv/Lib/site-packages/dateutil/rrule.py b/venv/Lib/site-packages/dateutil/rrule.py
new file mode 100644
index 0000000..b320339
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/rrule.py
@@ -0,0 +1,1737 @@
+# -*- coding: utf-8 -*-
+"""
+The rrule module offers a small, complete, and very fast, implementation of
+the recurrence rules documented in the
+`iCalendar RFC <https://tools.ietf.org/html/rfc5545>`_,
+including support for caching of results.
+"""
+import calendar
+import datetime
+import heapq
+import itertools
+import re
+import sys
+from functools import wraps
+# For warning about deprecation of until and count
+from warnings import warn
+
+from six import advance_iterator, integer_types
+
+from six.moves import _thread, range
+
+from ._common import weekday as weekdaybase
+
+try:
+    from math import gcd
+except ImportError:
+    from fractions import gcd
+
+__all__ = ["rrule", "rruleset", "rrulestr",
+           "YEARLY", "MONTHLY", "WEEKLY", "DAILY",
+           "HOURLY", "MINUTELY", "SECONDLY",
+           "MO", "TU", "WE", "TH", "FR", "SA", "SU"]
+
+# Every mask is 7 days longer to handle cross-year weekly periods.
+M366MASK = tuple([1]*31+[2]*29+[3]*31+[4]*30+[5]*31+[6]*30 +
+                 [7]*31+[8]*31+[9]*30+[10]*31+[11]*30+[12]*31+[1]*7)
+M365MASK = list(M366MASK)
+M29, M30, M31 = list(range(1, 30)), list(range(1, 31)), list(range(1, 32))
+MDAY366MASK = tuple(M31+M29+M31+M30+M31+M30+M31+M31+M30+M31+M30+M31+M31[:7])
+MDAY365MASK = list(MDAY366MASK)
+M29, M30, M31 = list(range(-29, 0)), list(range(-30, 0)), list(range(-31, 0))
+NMDAY366MASK = tuple(M31+M29+M31+M30+M31+M30+M31+M31+M30+M31+M30+M31+M31[:7])
+NMDAY365MASK = list(NMDAY366MASK)
+M366RANGE = (0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366)
+M365RANGE = (0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365)
+WDAYMASK = [0, 1, 2, 3, 4, 5, 6]*55
+del M29, M30, M31, M365MASK[59], MDAY365MASK[59], NMDAY365MASK[31]
+MDAY365MASK = tuple(MDAY365MASK)
+M365MASK = tuple(M365MASK)
+
+FREQNAMES = ['YEARLY', 'MONTHLY', 'WEEKLY', 'DAILY', 'HOURLY', 'MINUTELY', 'SECONDLY']
+
+(YEARLY,
+ MONTHLY,
+ WEEKLY,
+ DAILY,
+ HOURLY,
+ MINUTELY,
+ SECONDLY) = list(range(7))
+
+# Imported on demand.
+easter = None
+parser = None
+
+
+class weekday(weekdaybase):
+    """
+    This version of weekday does not allow n = 0.
+    """
+    def __init__(self, wkday, n=None):
+        if n == 0:
+            raise ValueError("Can't create weekday with n==0")
+
+        super(weekday, self).__init__(wkday, n)
+
+
+MO, TU, WE, TH, FR, SA, SU = weekdays = tuple(weekday(x) for x in range(7))
+
+
+def _invalidates_cache(f):
+    """
+    Decorator for rruleset methods which may invalidate the
+    cached length.
+    """
+    @wraps(f)
+    def inner_func(self, *args, **kwargs):
+        rv = f(self, *args, **kwargs)
+        self._invalidate_cache()
+        return rv
+
+    return inner_func
+
+
+class rrulebase(object):
+    def __init__(self, cache=False):
+        if cache:
+            self._cache = []
+            self._cache_lock = _thread.allocate_lock()
+            self._invalidate_cache()
+        else:
+            self._cache = None
+            self._cache_complete = False
+            self._len = None
+
+    def __iter__(self):
+        if self._cache_complete:
+            return iter(self._cache)
+        elif self._cache is None:
+            return self._iter()
+        else:
+            return self._iter_cached()
+
+    def _invalidate_cache(self):
+        if self._cache is not None:
+            self._cache = []
+            self._cache_complete = False
+            self._cache_gen = self._iter()
+
+            if self._cache_lock.locked():
+                self._cache_lock.release()
+
+        self._len = None
+
+    def _iter_cached(self):
+        i = 0
+        gen = self._cache_gen
+        cache = self._cache
+        acquire = self._cache_lock.acquire
+        release = self._cache_lock.release
+        while gen:
+            if i == len(cache):
+                acquire()
+                if self._cache_complete:
+                    break
+                try:
+                    for j in range(10):
+                        cache.append(advance_iterator(gen))
+                except StopIteration:
+                    self._cache_gen = gen = None
+                    self._cache_complete = True
+                    break
+                release()
+            yield cache[i]
+            i += 1
+        while i < self._len:
+            yield cache[i]
+            i += 1
+
+    def __getitem__(self, item):
+        if self._cache_complete:
+            return self._cache[item]
+        elif isinstance(item, slice):
+            if item.step and item.step < 0:
+                return list(iter(self))[item]
+            else:
+                return list(itertools.islice(self,
+                                             item.start or 0,
+                                             item.stop or sys.maxsize,
+                                             item.step or 1))
+        elif item >= 0:
+            gen = iter(self)
+            try:
+                for i in range(item+1):
+                    res = advance_iterator(gen)
+            except StopIteration:
+                raise IndexError
+            return res
+        else:
+            return list(iter(self))[item]
+
+    def __contains__(self, item):
+        if self._cache_complete:
+            return item in self._cache
+        else:
+            for i in self:
+                if i == item:
+                    return True
+                elif i > item:
+                    return False
+        return False
+
+    # __len__() introduces a large performance penalty.
+    def count(self):
+        """ Returns the number of recurrences in this set. It will have go
+            trough the whole recurrence, if this hasn't been done before. """
+        if self._len is None:
+            for x in self:
+                pass
+        return self._len
+
+    def before(self, dt, inc=False):
+        """ Returns the last recurrence before the given datetime instance. The
+            inc keyword defines what happens if dt is an occurrence. With
+            inc=True, if dt itself is an occurrence, it will be returned. """
+        if self._cache_complete:
+            gen = self._cache
+        else:
+            gen = self
+        last = None
+        if inc:
+            for i in gen:
+                if i > dt:
+                    break
+                last = i
+        else:
+            for i in gen:
+                if i >= dt:
+                    break
+                last = i
+        return last
+
+    def after(self, dt, inc=False):
+        """ Returns the first recurrence after the given datetime instance. The
+            inc keyword defines what happens if dt is an occurrence. With
+            inc=True, if dt itself is an occurrence, it will be returned.  """
+        if self._cache_complete:
+            gen = self._cache
+        else:
+            gen = self
+        if inc:
+            for i in gen:
+                if i >= dt:
+                    return i
+        else:
+            for i in gen:
+                if i > dt:
+                    return i
+        return None
+
+    def xafter(self, dt, count=None, inc=False):
+        """
+        Generator which yields up to `count` recurrences after the given
+        datetime instance, equivalent to `after`.
+
+        :param dt:
+            The datetime at which to start generating recurrences.
+
+        :param count:
+            The maximum number of recurrences to generate. If `None` (default),
+            dates are generated until the recurrence rule is exhausted.
+
+        :param inc:
+            If `dt` is an instance of the rule and `inc` is `True`, it is
+            included in the output.
+
+        :yields: Yields a sequence of `datetime` objects.
+        """
+
+        if self._cache_complete:
+            gen = self._cache
+        else:
+            gen = self
+
+        # Select the comparison function
+        if inc:
+            comp = lambda dc, dtc: dc >= dtc
+        else:
+            comp = lambda dc, dtc: dc > dtc
+
+        # Generate dates
+        n = 0
+        for d in gen:
+            if comp(d, dt):
+                if count is not None:
+                    n += 1
+                    if n > count:
+                        break
+
+                yield d
+
+    def between(self, after, before, inc=False, count=1):
+        """ Returns all the occurrences of the rrule between after and before.
+        The inc keyword defines what happens if after and/or before are
+        themselves occurrences. With inc=True, they will be included in the
+        list, if they are found in the recurrence set. """
+        if self._cache_complete:
+            gen = self._cache
+        else:
+            gen = self
+        started = False
+        l = []
+        if inc:
+            for i in gen:
+                if i > before:
+                    break
+                elif not started:
+                    if i >= after:
+                        started = True
+                        l.append(i)
+                else:
+                    l.append(i)
+        else:
+            for i in gen:
+                if i >= before:
+                    break
+                elif not started:
+                    if i > after:
+                        started = True
+                        l.append(i)
+                else:
+                    l.append(i)
+        return l
+
+
+class rrule(rrulebase):
+    """
+    That's the base of the rrule operation. It accepts all the keywords
+    defined in the RFC as its constructor parameters (except byday,
+    which was renamed to byweekday) and more. The constructor prototype is::
+
+            rrule(freq)
+
+    Where freq must be one of YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY,
+    or SECONDLY.
+
+    .. note::
+        Per RFC section 3.3.10, recurrence instances falling on invalid dates
+        and times are ignored rather than coerced:
+
+            Recurrence rules may generate recurrence instances with an invalid
+            date (e.g., February 30) or nonexistent local time (e.g., 1:30 AM
+            on a day where the local time is moved forward by an hour at 1:00
+            AM).  Such recurrence instances MUST be ignored and MUST NOT be
+            counted as part of the recurrence set.
+
+        This can lead to possibly surprising behavior when, for example, the
+        start date occurs at the end of the month:
+
+        >>> from dateutil.rrule import rrule, MONTHLY
+        >>> from datetime import datetime
+        >>> start_date = datetime(2014, 12, 31)
+        >>> list(rrule(freq=MONTHLY, count=4, dtstart=start_date))
+        ... # doctest: +NORMALIZE_WHITESPACE
+        [datetime.datetime(2014, 12, 31, 0, 0),
+         datetime.datetime(2015, 1, 31, 0, 0),
+         datetime.datetime(2015, 3, 31, 0, 0),
+         datetime.datetime(2015, 5, 31, 0, 0)]
+
+    Additionally, it supports the following keyword arguments:
+
+    :param dtstart:
+        The recurrence start. Besides being the base for the recurrence,
+        missing parameters in the final recurrence instances will also be
+        extracted from this date. If not given, datetime.now() will be used
+        instead.
+    :param interval:
+        The interval between each freq iteration. For example, when using
+        YEARLY, an interval of 2 means once every two years, but with HOURLY,
+        it means once every two hours. The default interval is 1.
+    :param wkst:
+        The week start day. Must be one of the MO, TU, WE constants, or an
+        integer, specifying the first day of the week. This will affect
+        recurrences based on weekly periods. The default week start is got
+        from calendar.firstweekday(), and may be modified by
+        calendar.setfirstweekday().
+    :param count:
+        If given, this determines how many occurrences will be generated.
+
+        .. note::
+            As of version 2.5.0, the use of the keyword ``until`` in conjunction
+            with ``count`` is deprecated, to make sure ``dateutil`` is fully
+            compliant with `RFC-5545 Sec. 3.3.10 <https://tools.ietf.org/
+            html/rfc5545#section-3.3.10>`_. Therefore, ``until`` and ``count``
+            **must not** occur in the same call to ``rrule``.
+    :param until:
+        If given, this must be a datetime instance specifying the upper-bound
+        limit of the recurrence. The last recurrence in the rule is the greatest
+        datetime that is less than or equal to the value specified in the
+        ``until`` parameter.
+
+        .. note::
+            As of version 2.5.0, the use of the keyword ``until`` in conjunction
+            with ``count`` is deprecated, to make sure ``dateutil`` is fully
+            compliant with `RFC-5545 Sec. 3.3.10 <https://tools.ietf.org/
+            html/rfc5545#section-3.3.10>`_. Therefore, ``until`` and ``count``
+            **must not** occur in the same call to ``rrule``.
+    :param bysetpos:
+        If given, it must be either an integer, or a sequence of integers,
+        positive or negative. Each given integer will specify an occurrence
+        number, corresponding to the nth occurrence of the rule inside the
+        frequency period. For example, a bysetpos of -1 if combined with a
+        MONTHLY frequency, and a byweekday of (MO, TU, WE, TH, FR), will
+        result in the last work day of every month.
+    :param bymonth:
+        If given, it must be either an integer, or a sequence of integers,
+        meaning the months to apply the recurrence to.
+    :param bymonthday:
+        If given, it must be either an integer, or a sequence of integers,
+        meaning the month days to apply the recurrence to.
+    :param byyearday:
+        If given, it must be either an integer, or a sequence of integers,
+        meaning the year days to apply the recurrence to.
+    :param byeaster:
+        If given, it must be either an integer, or a sequence of integers,
+        positive or negative. Each integer will define an offset from the
+        Easter Sunday. Passing the offset 0 to byeaster will yield the Easter
+        Sunday itself. This is an extension to the RFC specification.
+    :param byweekno:
+        If given, it must be either an integer, or a sequence of integers,
+        meaning the week numbers to apply the recurrence to. Week numbers
+        have the meaning described in ISO8601, that is, the first week of
+        the year is that containing at least four days of the new year.
+    :param byweekday:
+        If given, it must be either an integer (0 == MO), a sequence of
+        integers, one of the weekday constants (MO, TU, etc), or a sequence
+        of these constants. When given, these variables will define the
+        weekdays where the recurrence will be applied. It's also possible to
+        use an argument n for the weekday instances, which will mean the nth
+        occurrence of this weekday in the period. For example, with MONTHLY,
+        or with YEARLY and BYMONTH, using FR(+1) in byweekday will specify the
+        first friday of the month where the recurrence happens. Notice that in
+        the RFC documentation, this is specified as BYDAY, but was renamed to
+        avoid the ambiguity of that keyword.
+    :param byhour:
+        If given, it must be either an integer, or a sequence of integers,
+        meaning the hours to apply the recurrence to.
+    :param byminute:
+        If given, it must be either an integer, or a sequence of integers,
+        meaning the minutes to apply the recurrence to.
+    :param bysecond:
+        If given, it must be either an integer, or a sequence of integers,
+        meaning the seconds to apply the recurrence to.
+    :param cache:
+        If given, it must be a boolean value specifying to enable or disable
+        caching of results. If you will use the same rrule instance multiple
+        times, enabling caching will improve the performance considerably.
+     """
+    def __init__(self, freq, dtstart=None,
+                 interval=1, wkst=None, count=None, until=None, bysetpos=None,
+                 bymonth=None, bymonthday=None, byyearday=None, byeaster=None,
+                 byweekno=None, byweekday=None,
+                 byhour=None, byminute=None, bysecond=None,
+                 cache=False):
+        super(rrule, self).__init__(cache)
+        global easter
+        if not dtstart:
+            if until and until.tzinfo:
+                dtstart = datetime.datetime.now(tz=until.tzinfo).replace(microsecond=0)
+            else:
+                dtstart = datetime.datetime.now().replace(microsecond=0)
+        elif not isinstance(dtstart, datetime.datetime):
+            dtstart = datetime.datetime.fromordinal(dtstart.toordinal())
+        else:
+            dtstart = dtstart.replace(microsecond=0)
+        self._dtstart = dtstart
+        self._tzinfo = dtstart.tzinfo
+        self._freq = freq
+        self._interval = interval
+        self._count = count
+
+        # Cache the original byxxx rules, if they are provided, as the _byxxx
+        # attributes do not necessarily map to the inputs, and this can be
+        # a problem in generating the strings. Only store things if they've
+        # been supplied (the string retrieval will just use .get())
+        self._original_rule = {}
+
+        if until and not isinstance(until, datetime.datetime):
+            until = datetime.datetime.fromordinal(until.toordinal())
+        self._until = until
+
+        if self._dtstart and self._until:
+            if (self._dtstart.tzinfo is not None) != (self._until.tzinfo is not None):
+                # According to RFC5545 Section 3.3.10:
+                # https://tools.ietf.org/html/rfc5545#section-3.3.10
+                #
+                # > If the "DTSTART" property is specified as a date with UTC
+                # > time or a date with local time and time zone reference,
+                # > then the UNTIL rule part MUST be specified as a date with
+                # > UTC time.
+                raise ValueError(
+                    'RRULE UNTIL values must be specified in UTC when DTSTART '
+                    'is timezone-aware'
+                )
+
+        if count is not None and until:
+            warn("Using both 'count' and 'until' is inconsistent with RFC 5545"
+                 " and has been deprecated in dateutil. Future versions will "
+                 "raise an error.", DeprecationWarning)
+
+        if wkst is None:
+            self._wkst = calendar.firstweekday()
+        elif isinstance(wkst, integer_types):
+            self._wkst = wkst
+        else:
+            self._wkst = wkst.weekday
+
+        if bysetpos is None:
+            self._bysetpos = None
+        elif isinstance(bysetpos, integer_types):
+            if bysetpos == 0 or not (-366 <= bysetpos <= 366):
+                raise ValueError("bysetpos must be between 1 and 366, "
+                                 "or between -366 and -1")
+            self._bysetpos = (bysetpos,)
+        else:
+            self._bysetpos = tuple(bysetpos)
+            for pos in self._bysetpos:
+                if pos == 0 or not (-366 <= pos <= 366):
+                    raise ValueError("bysetpos must be between 1 and 366, "
+                                     "or between -366 and -1")
+
+        if self._bysetpos:
+            self._original_rule['bysetpos'] = self._bysetpos
+
+        if (byweekno is None and byyearday is None and bymonthday is None and
+                byweekday is None and byeaster is None):
+            if freq == YEARLY:
+                if bymonth is None:
+                    bymonth = dtstart.month
+                    self._original_rule['bymonth'] = None
+                bymonthday = dtstart.day
+                self._original_rule['bymonthday'] = None
+            elif freq == MONTHLY:
+                bymonthday = dtstart.day
+                self._original_rule['bymonthday'] = None
+            elif freq == WEEKLY:
+                byweekday = dtstart.weekday()
+                self._original_rule['byweekday'] = None
+
+        # bymonth
+        if bymonth is None:
+            self._bymonth = None
+        else:
+            if isinstance(bymonth, integer_types):
+                bymonth = (bymonth,)
+
+            self._bymonth = tuple(sorted(set(bymonth)))
+
+            if 'bymonth' not in self._original_rule:
+                self._original_rule['bymonth'] = self._bymonth
+
+        # byyearday
+        if byyearday is None:
+            self._byyearday = None
+        else:
+            if isinstance(byyearday, integer_types):
+                byyearday = (byyearday,)
+
+            self._byyearday = tuple(sorted(set(byyearday)))
+            self._original_rule['byyearday'] = self._byyearday
+
+        # byeaster
+        if byeaster is not None:
+            if not easter:
+                from dateutil import easter
+            if isinstance(byeaster, integer_types):
+                self._byeaster = (byeaster,)
+            else:
+                self._byeaster = tuple(sorted(byeaster))
+
+            self._original_rule['byeaster'] = self._byeaster
+        else:
+            self._byeaster = None
+
+        # bymonthday
+        if bymonthday is None:
+            self._bymonthday = ()
+            self._bynmonthday = ()
+        else:
+            if isinstance(bymonthday, integer_types):
+                bymonthday = (bymonthday,)
+
+            bymonthday = set(bymonthday)            # Ensure it's unique
+
+            self._bymonthday = tuple(sorted(x for x in bymonthday if x > 0))
+            self._bynmonthday = tuple(sorted(x for x in bymonthday if x < 0))
+
+            # Storing positive numbers first, then negative numbers
+            if 'bymonthday' not in self._original_rule:
+                self._original_rule['bymonthday'] = tuple(
+                    itertools.chain(self._bymonthday, self._bynmonthday))
+
+        # byweekno
+        if byweekno is None:
+            self._byweekno = None
+        else:
+            if isinstance(byweekno, integer_types):
+                byweekno = (byweekno,)
+
+            self._byweekno = tuple(sorted(set(byweekno)))
+
+            self._original_rule['byweekno'] = self._byweekno
+
+        # byweekday / bynweekday
+        if byweekday is None:
+            self._byweekday = None
+            self._bynweekday = None
+        else:
+            # If it's one of the valid non-sequence types, convert to a
+            # single-element sequence before the iterator that builds the
+            # byweekday set.
+            if isinstance(byweekday, integer_types) or hasattr(byweekday, "n"):
+                byweekday = (byweekday,)
+
+            self._byweekday = set()
+            self._bynweekday = set()
+            for wday in byweekday:
+                if isinstance(wday, integer_types):
+                    self._byweekday.add(wday)
+                elif not wday.n or freq > MONTHLY:
+                    self._byweekday.add(wday.weekday)
+                else:
+                    self._bynweekday.add((wday.weekday, wday.n))
+
+            if not self._byweekday:
+                self._byweekday = None
+            elif not self._bynweekday:
+                self._bynweekday = None
+
+            if self._byweekday is not None:
+                self._byweekday = tuple(sorted(self._byweekday))
+                orig_byweekday = [weekday(x) for x in self._byweekday]
+            else:
+                orig_byweekday = ()
+
+            if self._bynweekday is not None:
+                self._bynweekday = tuple(sorted(self._bynweekday))
+                orig_bynweekday = [weekday(*x) for x in self._bynweekday]
+            else:
+                orig_bynweekday = ()
+
+            if 'byweekday' not in self._original_rule:
+                self._original_rule['byweekday'] = tuple(itertools.chain(
+                    orig_byweekday, orig_bynweekday))
+
+        # byhour
+        if byhour is None:
+            if freq < HOURLY:
+                self._byhour = {dtstart.hour}
+            else:
+                self._byhour = None
+        else:
+            if isinstance(byhour, integer_types):
+                byhour = (byhour,)
+
+            if freq == HOURLY:
+                self._byhour = self.__construct_byset(start=dtstart.hour,
+                                                      byxxx=byhour,
+                                                      base=24)
+            else:
+                self._byhour = set(byhour)
+
+            self._byhour = tuple(sorted(self._byhour))
+            self._original_rule['byhour'] = self._byhour
+
+        # byminute
+        if byminute is None:
+            if freq < MINUTELY:
+                self._byminute = {dtstart.minute}
+            else:
+                self._byminute = None
+        else:
+            if isinstance(byminute, integer_types):
+                byminute = (byminute,)
+
+            if freq == MINUTELY:
+                self._byminute = self.__construct_byset(start=dtstart.minute,
+                                                        byxxx=byminute,
+                                                        base=60)
+            else:
+                self._byminute = set(byminute)
+
+            self._byminute = tuple(sorted(self._byminute))
+            self._original_rule['byminute'] = self._byminute
+
+        # bysecond
+        if bysecond is None:
+            if freq < SECONDLY:
+                self._bysecond = ((dtstart.second,))
+            else:
+                self._bysecond = None
+        else:
+            if isinstance(bysecond, integer_types):
+                bysecond = (bysecond,)
+
+            self._bysecond = set(bysecond)
+
+            if freq == SECONDLY:
+                self._bysecond = self.__construct_byset(start=dtstart.second,
+                                                        byxxx=bysecond,
+                                                        base=60)
+            else:
+                self._bysecond = set(bysecond)
+
+            self._bysecond = tuple(sorted(self._bysecond))
+            self._original_rule['bysecond'] = self._bysecond
+
+        if self._freq >= HOURLY:
+            self._timeset = None
+        else:
+            self._timeset = []
+            for hour in self._byhour:
+                for minute in self._byminute:
+                    for second in self._bysecond:
+                        self._timeset.append(
+                            datetime.time(hour, minute, second,
+                                          tzinfo=self._tzinfo))
+            self._timeset.sort()
+            self._timeset = tuple(self._timeset)
+
+    def __str__(self):
+        """
+        Output a string that would generate this RRULE if passed to rrulestr.
+        This is mostly compatible with RFC5545, except for the
+        dateutil-specific extension BYEASTER.
+        """
+
+        output = []
+        h, m, s = [None] * 3
+        if self._dtstart:
+            output.append(self._dtstart.strftime('DTSTART:%Y%m%dT%H%M%S'))
+            h, m, s = self._dtstart.timetuple()[3:6]
+
+        parts = ['FREQ=' + FREQNAMES[self._freq]]
+        if self._interval != 1:
+            parts.append('INTERVAL=' + str(self._interval))
+
+        if self._wkst:
+            parts.append('WKST=' + repr(weekday(self._wkst))[0:2])
+
+        if self._count is not None:
+            parts.append('COUNT=' + str(self._count))
+
+        if self._until:
+            parts.append(self._until.strftime('UNTIL=%Y%m%dT%H%M%S'))
+
+        if self._original_rule.get('byweekday') is not None:
+            # The str() method on weekday objects doesn't generate
+            # RFC5545-compliant strings, so we should modify that.
+            original_rule = dict(self._original_rule)
+            wday_strings = []
+            for wday in original_rule['byweekday']:
+                if wday.n:
+                    wday_strings.append('{n:+d}{wday}'.format(
+                        n=wday.n,
+                        wday=repr(wday)[0:2]))
+                else:
+                    wday_strings.append(repr(wday))
+
+            original_rule['byweekday'] = wday_strings
+        else:
+            original_rule = self._original_rule
+
+        partfmt = '{name}={vals}'
+        for name, key in [('BYSETPOS', 'bysetpos'),
+                          ('BYMONTH', 'bymonth'),
+                          ('BYMONTHDAY', 'bymonthday'),
+                          ('BYYEARDAY', 'byyearday'),
+                          ('BYWEEKNO', 'byweekno'),
+                          ('BYDAY', 'byweekday'),
+                          ('BYHOUR', 'byhour'),
+                          ('BYMINUTE', 'byminute'),
+                          ('BYSECOND', 'bysecond'),
+                          ('BYEASTER', 'byeaster')]:
+            value = original_rule.get(key)
+            if value:
+                parts.append(partfmt.format(name=name, vals=(','.join(str(v)
+                                                             for v in value))))
+
+        output.append('RRULE:' + ';'.join(parts))
+        return '\n'.join(output)
+
+    def replace(self, **kwargs):
+        """Return new rrule with same attributes except for those attributes given new
+           values by whichever keyword arguments are specified."""
+        new_kwargs = {"interval": self._interval,
+                      "count": self._count,
+                      "dtstart": self._dtstart,
+                      "freq": self._freq,
+                      "until": self._until,
+                      "wkst": self._wkst,
+                      "cache": False if self._cache is None else True }
+        new_kwargs.update(self._original_rule)
+        new_kwargs.update(kwargs)
+        return rrule(**new_kwargs)
+
+    def _iter(self):
+        year, month, day, hour, minute, second, weekday, yearday, _ = \
+            self._dtstart.timetuple()
+
+        # Some local variables to speed things up a bit
+        freq = self._freq
+        interval = self._interval
+        wkst = self._wkst
+        until = self._until
+        bymonth = self._bymonth
+        byweekno = self._byweekno
+        byyearday = self._byyearday
+        byweekday = self._byweekday
+        byeaster = self._byeaster
+        bymonthday = self._bymonthday
+        bynmonthday = self._bynmonthday
+        bysetpos = self._bysetpos
+        byhour = self._byhour
+        byminute = self._byminute
+        bysecond = self._bysecond
+
+        ii = _iterinfo(self)
+        ii.rebuild(year, month)
+
+        getdayset = {YEARLY: ii.ydayset,
+                     MONTHLY: ii.mdayset,
+                     WEEKLY: ii.wdayset,
+                     DAILY: ii.ddayset,
+                     HOURLY: ii.ddayset,
+                     MINUTELY: ii.ddayset,
+                     SECONDLY: ii.ddayset}[freq]
+
+        if freq < HOURLY:
+            timeset = self._timeset
+        else:
+            gettimeset = {HOURLY: ii.htimeset,
+                          MINUTELY: ii.mtimeset,
+                          SECONDLY: ii.stimeset}[freq]
+            if ((freq >= HOURLY and
+                 self._byhour and hour not in self._byhour) or
+                (freq >= MINUTELY and
+                 self._byminute and minute not in self._byminute) or
+                (freq >= SECONDLY and
+                 self._bysecond and second not in self._bysecond)):
+                timeset = ()
+            else:
+                timeset = gettimeset(hour, minute, second)
+
+        total = 0
+        count = self._count
+        while True:
+            # Get dayset with the right frequency
+            dayset, start, end = getdayset(year, month, day)
+
+            # Do the "hard" work ;-)
+            filtered = False
+            for i in dayset[start:end]:
+                if ((bymonth and ii.mmask[i] not in bymonth) or
+                    (byweekno and not ii.wnomask[i]) or
+                    (byweekday and ii.wdaymask[i] not in byweekday) or
+                    (ii.nwdaymask and not ii.nwdaymask[i]) or
+                    (byeaster and not ii.eastermask[i]) or
+                    ((bymonthday or bynmonthday) and
+                     ii.mdaymask[i] not in bymonthday and
+                     ii.nmdaymask[i] not in bynmonthday) or
+                    (byyearday and
+                     ((i < ii.yearlen and i+1 not in byyearday and
+                       -ii.yearlen+i not in byyearday) or
+                      (i >= ii.yearlen and i+1-ii.yearlen not in byyearday and
+                       -ii.nextyearlen+i-ii.yearlen not in byyearday)))):
+                    dayset[i] = None
+                    filtered = True
+
+            # Output results
+            if bysetpos and timeset:
+                poslist = []
+                for pos in bysetpos:
+                    if pos < 0:
+                        daypos, timepos = divmod(pos, len(timeset))
+                    else:
+                        daypos, timepos = divmod(pos-1, len(timeset))
+                    try:
+                        i = [x for x in dayset[start:end]
+                             if x is not None][daypos]
+                        time = timeset[timepos]
+                    except IndexError:
+                        pass
+                    else:
+                        date = datetime.date.fromordinal(ii.yearordinal+i)
+                        res = datetime.datetime.combine(date, time)
+                        if res not in poslist:
+                            poslist.append(res)
+                poslist.sort()
+                for res in poslist:
+                    if until and res > until:
+                        self._len = total
+                        return
+                    elif res >= self._dtstart:
+                        if count is not None:
+                            count -= 1
+                            if count < 0:
+                                self._len = total
+                                return
+                        total += 1
+                        yield res
+            else:
+                for i in dayset[start:end]:
+                    if i is not None:
+                        date = datetime.date.fromordinal(ii.yearordinal + i)
+                        for time in timeset:
+                            res = datetime.datetime.combine(date, time)
+                            if until and res > until:
+                                self._len = total
+                                return
+                            elif res >= self._dtstart:
+                                if count is not None:
+                                    count -= 1
+                                    if count < 0:
+                                        self._len = total
+                                        return
+
+                                total += 1
+                                yield res
+
+            # Handle frequency and interval
+            fixday = False
+            if freq == YEARLY:
+                year += interval
+                if year > datetime.MAXYEAR:
+                    self._len = total
+                    return
+                ii.rebuild(year, month)
+            elif freq == MONTHLY:
+                month += interval
+                if month > 12:
+                    div, mod = divmod(month, 12)
+                    month = mod
+                    year += div
+                    if month == 0:
+                        month = 12
+                        year -= 1
+                    if year > datetime.MAXYEAR:
+                        self._len = total
+                        return
+                ii.rebuild(year, month)
+            elif freq == WEEKLY:
+                if wkst > weekday:
+                    day += -(weekday+1+(6-wkst))+self._interval*7
+                else:
+                    day += -(weekday-wkst)+self._interval*7
+                weekday = wkst
+                fixday = True
+            elif freq == DAILY:
+                day += interval
+                fixday = True
+            elif freq == HOURLY:
+                if filtered:
+                    # Jump to one iteration before next day
+                    hour += ((23-hour)//interval)*interval
+
+                if byhour:
+                    ndays, hour = self.__mod_distance(value=hour,
+                                                      byxxx=self._byhour,
+                                                      base=24)
+                else:
+                    ndays, hour = divmod(hour+interval, 24)
+
+                if ndays:
+                    day += ndays
+                    fixday = True
+
+                timeset = gettimeset(hour, minute, second)
+            elif freq == MINUTELY:
+                if filtered:
+                    # Jump to one iteration before next day
+                    minute += ((1439-(hour*60+minute))//interval)*interval
+
+                valid = False
+                rep_rate = (24*60)
+                for j in range(rep_rate // gcd(interval, rep_rate)):
+                    if byminute:
+                        nhours, minute = \
+                            self.__mod_distance(value=minute,
+                                                byxxx=self._byminute,
+                                                base=60)
+                    else:
+                        nhours, minute = divmod(minute+interval, 60)
+
+                    div, hour = divmod(hour+nhours, 24)
+                    if div:
+                        day += div
+                        fixday = True
+                        filtered = False
+
+                    if not byhour or hour in byhour:
+                        valid = True
+                        break
+
+                if not valid:
+                    raise ValueError('Invalid combination of interval and ' +
+                                     'byhour resulting in empty rule.')
+
+                timeset = gettimeset(hour, minute, second)
+            elif freq == SECONDLY:
+                if filtered:
+                    # Jump to one iteration before next day
+                    second += (((86399 - (hour * 3600 + minute * 60 + second))
+                                // interval) * interval)
+
+                rep_rate = (24 * 3600)
+                valid = False
+                for j in range(0, rep_rate // gcd(interval, rep_rate)):
+                    if bysecond:
+                        nminutes, second = \
+                            self.__mod_distance(value=second,
+                                                byxxx=self._bysecond,
+                                                base=60)
+                    else:
+                        nminutes, second = divmod(second+interval, 60)
+
+                    div, minute = divmod(minute+nminutes, 60)
+                    if div:
+                        hour += div
+                        div, hour = divmod(hour, 24)
+                        if div:
+                            day += div
+                            fixday = True
+
+                    if ((not byhour or hour in byhour) and
+                            (not byminute or minute in byminute) and
+                            (not bysecond or second in bysecond)):
+                        valid = True
+                        break
+
+                if not valid:
+                    raise ValueError('Invalid combination of interval, ' +
+                                     'byhour and byminute resulting in empty' +
+                                     ' rule.')
+
+                timeset = gettimeset(hour, minute, second)
+
+            if fixday and day > 28:
+                daysinmonth = calendar.monthrange(year, month)[1]
+                if day > daysinmonth:
+                    while day > daysinmonth:
+                        day -= daysinmonth
+                        month += 1
+                        if month == 13:
+                            month = 1
+                            year += 1
+                            if year > datetime.MAXYEAR:
+                                self._len = total
+                                return
+                        daysinmonth = calendar.monthrange(year, month)[1]
+                    ii.rebuild(year, month)
+
+    def __construct_byset(self, start, byxxx, base):
+        """
+        If a `BYXXX` sequence is passed to the constructor at the same level as
+        `FREQ` (e.g. `FREQ=HOURLY,BYHOUR={2,4,7},INTERVAL=3`), there are some
+        specifications which cannot be reached given some starting conditions.
+
+        This occurs whenever the interval is not coprime with the base of a
+        given unit and the difference between the starting position and the
+        ending position is not coprime with the greatest common denominator
+        between the interval and the base. For example, with a FREQ of hourly
+        starting at 17:00 and an interval of 4, the only valid values for
+        BYHOUR would be {21, 1, 5, 9, 13, 17}, because 4 and 24 are not
+        coprime.
+
+        :param start:
+            Specifies the starting position.
+        :param byxxx:
+            An iterable containing the list of allowed values.
+        :param base:
+            The largest allowable value for the specified frequency (e.g.
+            24 hours, 60 minutes).
+
+        This does not preserve the type of the iterable, returning a set, since
+        the values should be unique and the order is irrelevant, this will
+        speed up later lookups.
+
+        In the event of an empty set, raises a :exception:`ValueError`, as this
+        results in an empty rrule.
+        """
+
+        cset = set()
+
+        # Support a single byxxx value.
+        if isinstance(byxxx, integer_types):
+            byxxx = (byxxx, )
+
+        for num in byxxx:
+            i_gcd = gcd(self._interval, base)
+            # Use divmod rather than % because we need to wrap negative nums.
+            if i_gcd == 1 or divmod(num - start, i_gcd)[1] == 0:
+                cset.add(num)
+
+        if len(cset) == 0:
+            raise ValueError("Invalid rrule byxxx generates an empty set.")
+
+        return cset
+
+    def __mod_distance(self, value, byxxx, base):
+        """
+        Calculates the next value in a sequence where the `FREQ` parameter is
+        specified along with a `BYXXX` parameter at the same "level"
+        (e.g. `HOURLY` specified with `BYHOUR`).
+
+        :param value:
+            The old value of the component.
+        :param byxxx:
+            The `BYXXX` set, which should have been generated by
+            `rrule._construct_byset`, or something else which checks that a
+            valid rule is present.
+        :param base:
+            The largest allowable value for the specified frequency (e.g.
+            24 hours, 60 minutes).
+
+        If a valid value is not found after `base` iterations (the maximum
+        number before the sequence would start to repeat), this raises a
+        :exception:`ValueError`, as no valid values were found.
+
+        This returns a tuple of `divmod(n*interval, base)`, where `n` is the
+        smallest number of `interval` repetitions until the next specified
+        value in `byxxx` is found.
+        """
+        accumulator = 0
+        for ii in range(1, base + 1):
+            # Using divmod() over % to account for negative intervals
+            div, value = divmod(value + self._interval, base)
+            accumulator += div
+            if value in byxxx:
+                return (accumulator, value)
+
+
+class _iterinfo(object):
+    __slots__ = ["rrule", "lastyear", "lastmonth",
+                 "yearlen", "nextyearlen", "yearordinal", "yearweekday",
+                 "mmask", "mrange", "mdaymask", "nmdaymask",
+                 "wdaymask", "wnomask", "nwdaymask", "eastermask"]
+
+    def __init__(self, rrule):
+        for attr in self.__slots__:
+            setattr(self, attr, None)
+        self.rrule = rrule
+
+    def rebuild(self, year, month):
+        # Every mask is 7 days longer to handle cross-year weekly periods.
+        rr = self.rrule
+        if year != self.lastyear:
+            self.yearlen = 365 + calendar.isleap(year)
+            self.nextyearlen = 365 + calendar.isleap(year + 1)
+            firstyday = datetime.date(year, 1, 1)
+            self.yearordinal = firstyday.toordinal()
+            self.yearweekday = firstyday.weekday()
+
+            wday = datetime.date(year, 1, 1).weekday()
+            if self.yearlen == 365:
+                self.mmask = M365MASK
+                self.mdaymask = MDAY365MASK
+                self.nmdaymask = NMDAY365MASK
+                self.wdaymask = WDAYMASK[wday:]
+                self.mrange = M365RANGE
+            else:
+                self.mmask = M366MASK
+                self.mdaymask = MDAY366MASK
+                self.nmdaymask = NMDAY366MASK
+                self.wdaymask = WDAYMASK[wday:]
+                self.mrange = M366RANGE
+
+            if not rr._byweekno:
+                self.wnomask = None
+            else:
+                self.wnomask = [0]*(self.yearlen+7)
+                # no1wkst = firstwkst = self.wdaymask.index(rr._wkst)
+                no1wkst = firstwkst = (7-self.yearweekday+rr._wkst) % 7
+                if no1wkst >= 4:
+                    no1wkst = 0
+                    # Number of days in the year, plus the days we got
+                    # from last year.
+                    wyearlen = self.yearlen+(self.yearweekday-rr._wkst) % 7
+                else:
+                    # Number of days in the year, minus the days we
+                    # left in last year.
+                    wyearlen = self.yearlen-no1wkst
+                div, mod = divmod(wyearlen, 7)
+                numweeks = div+mod//4
+                for n in rr._byweekno:
+                    if n < 0:
+                        n += numweeks+1
+                    if not (0 < n <= numweeks):
+                        continue
+                    if n > 1:
+                        i = no1wkst+(n-1)*7
+                        if no1wkst != firstwkst:
+                            i -= 7-firstwkst
+                    else:
+                        i = no1wkst
+                    for j in range(7):
+                        self.wnomask[i] = 1
+                        i += 1
+                        if self.wdaymask[i] == rr._wkst:
+                            break
+                if 1 in rr._byweekno:
+                    # Check week number 1 of next year as well
+                    # TODO: Check -numweeks for next year.
+                    i = no1wkst+numweeks*7
+                    if no1wkst != firstwkst:
+                        i -= 7-firstwkst
+                    if i < self.yearlen:
+                        # If week starts in next year, we
+                        # don't care about it.
+                        for j in range(7):
+                            self.wnomask[i] = 1
+                            i += 1
+                            if self.wdaymask[i] == rr._wkst:
+                                break
+                if no1wkst:
+                    # Check last week number of last year as
+                    # well. If no1wkst is 0, either the year
+                    # started on week start, or week number 1
+                    # got days from last year, so there are no
+                    # days from last year's last week number in
+                    # this year.
+                    if -1 not in rr._byweekno:
+                        lyearweekday = datetime.date(year-1, 1, 1).weekday()
+                        lno1wkst = (7-lyearweekday+rr._wkst) % 7
+                        lyearlen = 365+calendar.isleap(year-1)
+                        if lno1wkst >= 4:
+                            lno1wkst = 0
+                            lnumweeks = 52+(lyearlen +
+                                            (lyearweekday-rr._wkst) % 7) % 7//4
+                        else:
+                            lnumweeks = 52+(self.yearlen-no1wkst) % 7//4
+                    else:
+                        lnumweeks = -1
+                    if lnumweeks in rr._byweekno:
+                        for i in range(no1wkst):
+                            self.wnomask[i] = 1
+
+        if (rr._bynweekday and (month != self.lastmonth or
+                                year != self.lastyear)):
+            ranges = []
+            if rr._freq == YEARLY:
+                if rr._bymonth:
+                    for month in rr._bymonth:
+                        ranges.append(self.mrange[month-1:month+1])
+                else:
+                    ranges = [(0, self.yearlen)]
+            elif rr._freq == MONTHLY:
+                ranges = [self.mrange[month-1:month+1]]
+            if ranges:
+                # Weekly frequency won't get here, so we may not
+                # care about cross-year weekly periods.
+                self.nwdaymask = [0]*self.yearlen
+                for first, last in ranges:
+                    last -= 1
+                    for wday, n in rr._bynweekday:
+                        if n < 0:
+                            i = last+(n+1)*7
+                            i -= (self.wdaymask[i]-wday) % 7
+                        else:
+                            i = first+(n-1)*7
+                            i += (7-self.wdaymask[i]+wday) % 7
+                        if first <= i <= last:
+                            self.nwdaymask[i] = 1
+
+        if rr._byeaster:
+            self.eastermask = [0]*(self.yearlen+7)
+            eyday = easter.easter(year).toordinal()-self.yearordinal
+            for offset in rr._byeaster:
+                self.eastermask[eyday+offset] = 1
+
+        self.lastyear = year
+        self.lastmonth = month
+
+    def ydayset(self, year, month, day):
+        return list(range(self.yearlen)), 0, self.yearlen
+
+    def mdayset(self, year, month, day):
+        dset = [None]*self.yearlen
+        start, end = self.mrange[month-1:month+1]
+        for i in range(start, end):
+            dset[i] = i
+        return dset, start, end
+
+    def wdayset(self, year, month, day):
+        # We need to handle cross-year weeks here.
+        dset = [None]*(self.yearlen+7)
+        i = datetime.date(year, month, day).toordinal()-self.yearordinal
+        start = i
+        for j in range(7):
+            dset[i] = i
+            i += 1
+            # if (not (0 <= i < self.yearlen) or
+            #    self.wdaymask[i] == self.rrule._wkst):
+            # This will cross the year boundary, if necessary.
+            if self.wdaymask[i] == self.rrule._wkst:
+                break
+        return dset, start, i
+
+    def ddayset(self, year, month, day):
+        dset = [None] * self.yearlen
+        i = datetime.date(year, month, day).toordinal() - self.yearordinal
+        dset[i] = i
+        return dset, i, i + 1
+
+    def htimeset(self, hour, minute, second):
+        tset = []
+        rr = self.rrule
+        for minute in rr._byminute:
+            for second in rr._bysecond:
+                tset.append(datetime.time(hour, minute, second,
+                                          tzinfo=rr._tzinfo))
+        tset.sort()
+        return tset
+
+    def mtimeset(self, hour, minute, second):
+        tset = []
+        rr = self.rrule
+        for second in rr._bysecond:
+            tset.append(datetime.time(hour, minute, second, tzinfo=rr._tzinfo))
+        tset.sort()
+        return tset
+
+    def stimeset(self, hour, minute, second):
+        return (datetime.time(hour, minute, second,
+                tzinfo=self.rrule._tzinfo),)
+
+
+class rruleset(rrulebase):
+    """ The rruleset type allows more complex recurrence setups, mixing
+    multiple rules, dates, exclusion rules, and exclusion dates. The type
+    constructor takes the following keyword arguments:
+
+    :param cache: If True, caching of results will be enabled, improving
+                  performance of multiple queries considerably. """
+
+    class _genitem(object):
+        def __init__(self, genlist, gen):
+            try:
+                self.dt = advance_iterator(gen)
+                genlist.append(self)
+            except StopIteration:
+                pass
+            self.genlist = genlist
+            self.gen = gen
+
+        def __next__(self):
+            try:
+                self.dt = advance_iterator(self.gen)
+            except StopIteration:
+                if self.genlist[0] is self:
+                    heapq.heappop(self.genlist)
+                else:
+                    self.genlist.remove(self)
+                    heapq.heapify(self.genlist)
+
+        next = __next__
+
+        def __lt__(self, other):
+            return self.dt < other.dt
+
+        def __gt__(self, other):
+            return self.dt > other.dt
+
+        def __eq__(self, other):
+            return self.dt == other.dt
+
+        def __ne__(self, other):
+            return self.dt != other.dt
+
+    def __init__(self, cache=False):
+        super(rruleset, self).__init__(cache)
+        self._rrule = []
+        self._rdate = []
+        self._exrule = []
+        self._exdate = []
+
+    @_invalidates_cache
+    def rrule(self, rrule):
+        """ Include the given :py:class:`rrule` instance in the recurrence set
+            generation. """
+        self._rrule.append(rrule)
+
+    @_invalidates_cache
+    def rdate(self, rdate):
+        """ Include the given :py:class:`datetime` instance in the recurrence
+            set generation. """
+        self._rdate.append(rdate)
+
+    @_invalidates_cache
+    def exrule(self, exrule):
+        """ Include the given rrule instance in the recurrence set exclusion
+            list. Dates which are part of the given recurrence rules will not
+            be generated, even if some inclusive rrule or rdate matches them.
+        """
+        self._exrule.append(exrule)
+
+    @_invalidates_cache
+    def exdate(self, exdate):
+        """ Include the given datetime instance in the recurrence set
+            exclusion list. Dates included that way will not be generated,
+            even if some inclusive rrule or rdate matches them. """
+        self._exdate.append(exdate)
+
+    def _iter(self):
+        rlist = []
+        self._rdate.sort()
+        self._genitem(rlist, iter(self._rdate))
+        for gen in [iter(x) for x in self._rrule]:
+            self._genitem(rlist, gen)
+        exlist = []
+        self._exdate.sort()
+        self._genitem(exlist, iter(self._exdate))
+        for gen in [iter(x) for x in self._exrule]:
+            self._genitem(exlist, gen)
+        lastdt = None
+        total = 0
+        heapq.heapify(rlist)
+        heapq.heapify(exlist)
+        while rlist:
+            ritem = rlist[0]
+            if not lastdt or lastdt != ritem.dt:
+                while exlist and exlist[0] < ritem:
+                    exitem = exlist[0]
+                    advance_iterator(exitem)
+                    if exlist and exlist[0] is exitem:
+                        heapq.heapreplace(exlist, exitem)
+                if not exlist or ritem != exlist[0]:
+                    total += 1
+                    yield ritem.dt
+                lastdt = ritem.dt
+            advance_iterator(ritem)
+            if rlist and rlist[0] is ritem:
+                heapq.heapreplace(rlist, ritem)
+        self._len = total
+
+
+
+
+class _rrulestr(object):
+    """ Parses a string representation of a recurrence rule or set of
+    recurrence rules.
+
+    :param s:
+        Required, a string defining one or more recurrence rules.
+
+    :param dtstart:
+        If given, used as the default recurrence start if not specified in the
+        rule string.
+
+    :param cache:
+        If set ``True`` caching of results will be enabled, improving
+        performance of multiple queries considerably.
+
+    :param unfold:
+        If set ``True`` indicates that a rule string is split over more
+        than one line and should be joined before processing.
+
+    :param forceset:
+        If set ``True`` forces a :class:`dateutil.rrule.rruleset` to
+        be returned.
+
+    :param compatible:
+        If set ``True`` forces ``unfold`` and ``forceset`` to be ``True``.
+
+    :param ignoretz:
+        If set ``True``, time zones in parsed strings are ignored and a naive
+        :class:`datetime.datetime` object is returned.
+
+    :param tzids:
+        If given, a callable or mapping used to retrieve a
+        :class:`datetime.tzinfo` from a string representation.
+        Defaults to :func:`dateutil.tz.gettz`.
+
+    :param tzinfos:
+        Additional time zone names / aliases which may be present in a string
+        representation.  See :func:`dateutil.parser.parse` for more
+        information.
+
+    :return:
+        Returns a :class:`dateutil.rrule.rruleset` or
+        :class:`dateutil.rrule.rrule`
+    """
+
+    _freq_map = {"YEARLY": YEARLY,
+                 "MONTHLY": MONTHLY,
+                 "WEEKLY": WEEKLY,
+                 "DAILY": DAILY,
+                 "HOURLY": HOURLY,
+                 "MINUTELY": MINUTELY,
+                 "SECONDLY": SECONDLY}
+
+    _weekday_map = {"MO": 0, "TU": 1, "WE": 2, "TH": 3,
+                    "FR": 4, "SA": 5, "SU": 6}
+
+    def _handle_int(self, rrkwargs, name, value, **kwargs):
+        rrkwargs[name.lower()] = int(value)
+
+    def _handle_int_list(self, rrkwargs, name, value, **kwargs):
+        rrkwargs[name.lower()] = [int(x) for x in value.split(',')]
+
+    _handle_INTERVAL = _handle_int
+    _handle_COUNT = _handle_int
+    _handle_BYSETPOS = _handle_int_list
+    _handle_BYMONTH = _handle_int_list
+    _handle_BYMONTHDAY = _handle_int_list
+    _handle_BYYEARDAY = _handle_int_list
+    _handle_BYEASTER = _handle_int_list
+    _handle_BYWEEKNO = _handle_int_list
+    _handle_BYHOUR = _handle_int_list
+    _handle_BYMINUTE = _handle_int_list
+    _handle_BYSECOND = _handle_int_list
+
+    def _handle_FREQ(self, rrkwargs, name, value, **kwargs):
+        rrkwargs["freq"] = self._freq_map[value]
+
+    def _handle_UNTIL(self, rrkwargs, name, value, **kwargs):
+        global parser
+        if not parser:
+            from dateutil import parser
+        try:
+            rrkwargs["until"] = parser.parse(value,
+                                             ignoretz=kwargs.get("ignoretz"),
+                                             tzinfos=kwargs.get("tzinfos"))
+        except ValueError:
+            raise ValueError("invalid until date")
+
+    def _handle_WKST(self, rrkwargs, name, value, **kwargs):
+        rrkwargs["wkst"] = self._weekday_map[value]
+
+    def _handle_BYWEEKDAY(self, rrkwargs, name, value, **kwargs):
+        """
+        Two ways to specify this: +1MO or MO(+1)
+        """
+        l = []
+        for wday in value.split(','):
+            if '(' in wday:
+                # If it's of the form TH(+1), etc.
+                splt = wday.split('(')
+                w = splt[0]
+                n = int(splt[1][:-1])
+            elif len(wday):
+                # If it's of the form +1MO
+                for i in range(len(wday)):
+                    if wday[i] not in '+-0123456789':
+                        break
+                n = wday[:i] or None
+                w = wday[i:]
+                if n:
+                    n = int(n)
+            else:
+                raise ValueError("Invalid (empty) BYDAY specification.")
+
+            l.append(weekdays[self._weekday_map[w]](n))
+        rrkwargs["byweekday"] = l
+
+    _handle_BYDAY = _handle_BYWEEKDAY
+
+    def _parse_rfc_rrule(self, line,
+                         dtstart=None,
+                         cache=False,
+                         ignoretz=False,
+                         tzinfos=None):
+        if line.find(':') != -1:
+            name, value = line.split(':')
+            if name != "RRULE":
+                raise ValueError("unknown parameter name")
+        else:
+            value = line
+        rrkwargs = {}
+        for pair in value.split(';'):
+            name, value = pair.split('=')
+            name = name.upper()
+            value = value.upper()
+            try:
+                getattr(self, "_handle_"+name)(rrkwargs, name, value,
+                                               ignoretz=ignoretz,
+                                               tzinfos=tzinfos)
+            except AttributeError:
+                raise ValueError("unknown parameter '%s'" % name)
+            except (KeyError, ValueError):
+                raise ValueError("invalid '%s': %s" % (name, value))
+        return rrule(dtstart=dtstart, cache=cache, **rrkwargs)
+
+    def _parse_date_value(self, date_value, parms, rule_tzids,
+                          ignoretz, tzids, tzinfos):
+        global parser
+        if not parser:
+            from dateutil import parser
+
+        datevals = []
+        value_found = False
+        TZID = None
+
+        for parm in parms:
+            if parm.startswith("TZID="):
+                try:
+                    tzkey = rule_tzids[parm.split('TZID=')[-1]]
+                except KeyError:
+                    continue
+                if tzids is None:
+                    from . import tz
+                    tzlookup = tz.gettz
+                elif callable(tzids):
+                    tzlookup = tzids
+                else:
+                    tzlookup = getattr(tzids, 'get', None)
+                    if tzlookup is None:
+                        msg = ('tzids must be a callable, mapping, or None, '
+                               'not %s' % tzids)
+                        raise ValueError(msg)
+
+                TZID = tzlookup(tzkey)
+                continue
+
+            # RFC 5445 3.8.2.4: The VALUE parameter is optional, but may be found
+            # only once.
+            if parm not in {"VALUE=DATE-TIME", "VALUE=DATE"}:
+                raise ValueError("unsupported parm: " + parm)
+            else:
+                if value_found:
+                    msg = ("Duplicate value parameter found in: " + parm)
+                    raise ValueError(msg)
+                value_found = True
+
+        for datestr in date_value.split(','):
+            date = parser.parse(datestr, ignoretz=ignoretz, tzinfos=tzinfos)
+            if TZID is not None:
+                if date.tzinfo is None:
+                    date = date.replace(tzinfo=TZID)
+                else:
+                    raise ValueError('DTSTART/EXDATE specifies multiple timezone')
+            datevals.append(date)
+
+        return datevals
+
+    def _parse_rfc(self, s,
+                   dtstart=None,
+                   cache=False,
+                   unfold=False,
+                   forceset=False,
+                   compatible=False,
+                   ignoretz=False,
+                   tzids=None,
+                   tzinfos=None):
+        global parser
+        if compatible:
+            forceset = True
+            unfold = True
+
+        TZID_NAMES = dict(map(
+            lambda x: (x.upper(), x),
+            re.findall('TZID=(?P<name>[^:]+):', s)
+        ))
+        s = s.upper()
+        if not s.strip():
+            raise ValueError("empty string")
+        if unfold:
+            lines = s.splitlines()
+            i = 0
+            while i < len(lines):
+                line = lines[i].rstrip()
+                if not line:
+                    del lines[i]
+                elif i > 0 and line[0] == " ":
+                    lines[i-1] += line[1:]
+                    del lines[i]
+                else:
+                    i += 1
+        else:
+            lines = s.split()
+        if (not forceset and len(lines) == 1 and (s.find(':') == -1 or
+                                                  s.startswith('RRULE:'))):
+            return self._parse_rfc_rrule(lines[0], cache=cache,
+                                         dtstart=dtstart, ignoretz=ignoretz,
+                                         tzinfos=tzinfos)
+        else:
+            rrulevals = []
+            rdatevals = []
+            exrulevals = []
+            exdatevals = []
+            for line in lines:
+                if not line:
+                    continue
+                if line.find(':') == -1:
+                    name = "RRULE"
+                    value = line
+                else:
+                    name, value = line.split(':', 1)
+                parms = name.split(';')
+                if not parms:
+                    raise ValueError("empty property name")
+                name = parms[0]
+                parms = parms[1:]
+                if name == "RRULE":
+                    for parm in parms:
+                        raise ValueError("unsupported RRULE parm: "+parm)
+                    rrulevals.append(value)
+                elif name == "RDATE":
+                    for parm in parms:
+                        if parm != "VALUE=DATE-TIME":
+                            raise ValueError("unsupported RDATE parm: "+parm)
+                    rdatevals.append(value)
+                elif name == "EXRULE":
+                    for parm in parms:
+                        raise ValueError("unsupported EXRULE parm: "+parm)
+                    exrulevals.append(value)
+                elif name == "EXDATE":
+                    exdatevals.extend(
+                        self._parse_date_value(value, parms,
+                                               TZID_NAMES, ignoretz,
+                                               tzids, tzinfos)
+                    )
+                elif name == "DTSTART":
+                    dtvals = self._parse_date_value(value, parms, TZID_NAMES,
+                                                    ignoretz, tzids, tzinfos)
+                    if len(dtvals) != 1:
+                        raise ValueError("Multiple DTSTART values specified:" +
+                                         value)
+                    dtstart = dtvals[0]
+                else:
+                    raise ValueError("unsupported property: "+name)
+            if (forceset or len(rrulevals) > 1 or rdatevals
+                    or exrulevals or exdatevals):
+                if not parser and (rdatevals or exdatevals):
+                    from dateutil import parser
+                rset = rruleset(cache=cache)
+                for value in rrulevals:
+                    rset.rrule(self._parse_rfc_rrule(value, dtstart=dtstart,
+                                                     ignoretz=ignoretz,
+                                                     tzinfos=tzinfos))
+                for value in rdatevals:
+                    for datestr in value.split(','):
+                        rset.rdate(parser.parse(datestr,
+                                                ignoretz=ignoretz,
+                                                tzinfos=tzinfos))
+                for value in exrulevals:
+                    rset.exrule(self._parse_rfc_rrule(value, dtstart=dtstart,
+                                                      ignoretz=ignoretz,
+                                                      tzinfos=tzinfos))
+                for value in exdatevals:
+                    rset.exdate(value)
+                if compatible and dtstart:
+                    rset.rdate(dtstart)
+                return rset
+            else:
+                return self._parse_rfc_rrule(rrulevals[0],
+                                             dtstart=dtstart,
+                                             cache=cache,
+                                             ignoretz=ignoretz,
+                                             tzinfos=tzinfos)
+
+    def __call__(self, s, **kwargs):
+        return self._parse_rfc(s, **kwargs)
+
+
+rrulestr = _rrulestr()
+
+# vim:ts=4:sw=4:et
diff --git a/venv/Lib/site-packages/dateutil/tz/__init__.py b/venv/Lib/site-packages/dateutil/tz/__init__.py
new file mode 100644
index 0000000..af1352c
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/tz/__init__.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+from .tz import *
+from .tz import __doc__
+
+__all__ = ["tzutc", "tzoffset", "tzlocal", "tzfile", "tzrange",
+           "tzstr", "tzical", "tzwin", "tzwinlocal", "gettz",
+           "enfold", "datetime_ambiguous", "datetime_exists",
+           "resolve_imaginary", "UTC", "DeprecatedTzFormatWarning"]
+
+
+class DeprecatedTzFormatWarning(Warning):
+    """Warning raised when time zones are parsed from deprecated formats."""
diff --git a/venv/Lib/site-packages/dateutil/tz/__pycache__/__init__.cpython-311.pyc b/venv/Lib/site-packages/dateutil/tz/__pycache__/__init__.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..6f3205086220891882a7386ec5328937f7dcdd11
GIT binary patch
literal 831
zcmZ`%OKTKC5boaD&4xVC1W}>~=eojf$W>$yZcvaU2yPITfu=KEJGPmZ-95WzPC0n<
z2jnUq6!G96@JHkr`XqSrwh~V{Sv~s@L2G)xuCA}Ts=uE3xW2wZ(7wFw!dFVjcej{Z
zW9D3T(K#c62pW^Vn`<#i=zvlZ5#hb3gIbL|CZhg^hz58cJVHL>JGDVwEIlKw<`1k+
zTGY~e2u;RB7BbelZX2d7OlX%)nGJ^;jBT1S&O#pBB~uP%3@)H}8i7mIM!C3jJTAvF
zwJX&$-O`A_n9?pmI?Q5WHw8CfWCDyQM=~n1LfdPL7`&F+XuF|6XYmM_On4+yu1>6X
z*zeh`UC0%LSV8p5N0~~vdCpZT(<q#4bF-7>>~a&~i~t!>K?XHJ2cD>*a8KPpqI@{p
z>nkob2!H$nQr{iTFS8W1&lUJNSB@I0Eb+ynxj(FW>&`)|ZkHKLIqG3{g|Q?PMeO`F
z#$FXXo-(SA{XUUPL~<4N?gxh&lnzvp^E~K`beIVUo;=;}u|C(wI{}vG5wu_CN!Zq7
zXd8^ScY+b5qhL=S1zH+t=R7>dEFHMpD~yb{O}WjOOr>G0lb=)~D_F(0`X<8Z;<>2r
zozI85jZ~F*&}!Hkep+{2_e1bFMk&qNJxvR4x#Vic9rUi2A50~8)m>b=o7V-x#G{mc
qBOB-QaY1gK|2-ykZ*`YW$R9jyPSz;h$JoE|UGrzf{Q3`H9qTu-lJY$O

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/tz/__pycache__/_common.cpython-311.pyc b/venv/Lib/site-packages/dateutil/tz/__pycache__/_common.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..32a79b9349a1844cf2ded2dccf9b739966e2d1c0
GIT binary patch
literal 15269
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
Doxoy|

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/tz/__pycache__/_factories.cpython-311.pyc b/venv/Lib/site-packages/dateutil/tz/__pycache__/_factories.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..800450de08cef789fd652187cd4a7c41455c4b5d
GIT binary patch
literal 5228
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

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/tz/__pycache__/tz.cpython-311.pyc b/venv/Lib/site-packages/dateutil/tz/__pycache__/tz.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..e5a927445f85d8a991837a54ca58b4032c9c5893
GIT binary patch
literal 70528
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
W;YZ%AWBY`U_7xv@S%01@BK&U#eukj{

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/tz/__pycache__/win.cpython-311.pyc b/venv/Lib/site-packages/dateutil/tz/__pycache__/win.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..437194cdfc8b5adfe02787bc1d8817a37c9ca383
GIT binary patch
literal 18417
zcmcJ1Yit`=mSz>-4@nely)9W~OR`1BRxH1gD7Ir+k{@YXPHZLaD4I|-t7OxrNTsS|
z$BdL{f-IWp@ocLbZbSpPci21bjC-7(@c=uE#?A~dPWJ+h1r`v60xT5P3uCwQBmZbP
zy)c3WcE59rtOq4$CbQV0czElc`>Ojm_k8Ev(qGorhB#b*^CyR;AMD|{|4BEM%UcdS
zIl*(>r<}-*b0ROg()>8jeqG}({JPWbY0tQaC!Qzmo%W6UcrIw9^pE=y>rMNo1LFan
z%QSRxQm~toYk1DZNg>hq8A`s3uW^0EU*q0$zr|hSMZXwGho@`Ck@6xZ2LC-jUW*+3
z<+@5*G33lU9udRi^<vF<RIDA}Al7}%jc-Jbjh`XI-AX2IyurmC=fudzoLDb4e&z-b
zU*j5YV!SAL8>E^lUNhru1g}AAuHv;YUL$x-Yj~|<Gg{Inwt#LDUFW!1Ywq`<u}djM
zn9ho`X-SxovsY81qzH+Okjki%Je5dFf|?c7OOlXDsHv;COHE5cE}M}AF`*`eY(_Yr
z%81!(%Fa+KlT6Qwsmw)TVCMQjGM!MAfk~v2C{Lf7OJ%0AlR|2GCM``%85QMaGfH15
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

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/tz/_common.py b/venv/Lib/site-packages/dateutil/tz/_common.py
new file mode 100644
index 0000000..e6ac118
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/tz/_common.py
@@ -0,0 +1,419 @@
+from six import PY2
+
+from functools import wraps
+
+from datetime import datetime, timedelta, tzinfo
+
+
+ZERO = timedelta(0)
+
+__all__ = ['tzname_in_python2', 'enfold']
+
+
+def tzname_in_python2(namefunc):
+    """Change unicode output into bytestrings in Python 2
+
+    tzname() API changed in Python 3. It used to return bytes, but was changed
+    to unicode strings
+    """
+    if PY2:
+        @wraps(namefunc)
+        def adjust_encoding(*args, **kwargs):
+            name = namefunc(*args, **kwargs)
+            if name is not None:
+                name = name.encode()
+
+            return name
+
+        return adjust_encoding
+    else:
+        return namefunc
+
+
+# The following is adapted from Alexander Belopolsky's tz library
+# https://github.com/abalkin/tz
+if hasattr(datetime, 'fold'):
+    # This is the pre-python 3.6 fold situation
+    def enfold(dt, fold=1):
+        """
+        Provides a unified interface for assigning the ``fold`` attribute to
+        datetimes both before and after the implementation of PEP-495.
+
+        :param fold:
+            The value for the ``fold`` attribute in the returned datetime. This
+            should be either 0 or 1.
+
+        :return:
+            Returns an object for which ``getattr(dt, 'fold', 0)`` returns
+            ``fold`` for all versions of Python. In versions prior to
+            Python 3.6, this is a ``_DatetimeWithFold`` object, which is a
+            subclass of :py:class:`datetime.datetime` with the ``fold``
+            attribute added, if ``fold`` is 1.
+
+        .. versionadded:: 2.6.0
+        """
+        return dt.replace(fold=fold)
+
+else:
+    class _DatetimeWithFold(datetime):
+        """
+        This is a class designed to provide a PEP 495-compliant interface for
+        Python versions before 3.6. It is used only for dates in a fold, so
+        the ``fold`` attribute is fixed at ``1``.
+
+        .. versionadded:: 2.6.0
+        """
+        __slots__ = ()
+
+        def replace(self, *args, **kwargs):
+            """
+            Return a datetime with the same attributes, except for those
+            attributes given new values by whichever keyword arguments are
+            specified. Note that tzinfo=None can be specified to create a naive
+            datetime from an aware datetime with no conversion of date and time
+            data.
+
+            This is reimplemented in ``_DatetimeWithFold`` because pypy3 will
+            return a ``datetime.datetime`` even if ``fold`` is unchanged.
+            """
+            argnames = (
+                'year', 'month', 'day', 'hour', 'minute', 'second',
+                'microsecond', 'tzinfo'
+            )
+
+            for arg, argname in zip(args, argnames):
+                if argname in kwargs:
+                    raise TypeError('Duplicate argument: {}'.format(argname))
+
+                kwargs[argname] = arg
+
+            for argname in argnames:
+                if argname not in kwargs:
+                    kwargs[argname] = getattr(self, argname)
+
+            dt_class = self.__class__ if kwargs.get('fold', 1) else datetime
+
+            return dt_class(**kwargs)
+
+        @property
+        def fold(self):
+            return 1
+
+    def enfold(dt, fold=1):
+        """
+        Provides a unified interface for assigning the ``fold`` attribute to
+        datetimes both before and after the implementation of PEP-495.
+
+        :param fold:
+            The value for the ``fold`` attribute in the returned datetime. This
+            should be either 0 or 1.
+
+        :return:
+            Returns an object for which ``getattr(dt, 'fold', 0)`` returns
+            ``fold`` for all versions of Python. In versions prior to
+            Python 3.6, this is a ``_DatetimeWithFold`` object, which is a
+            subclass of :py:class:`datetime.datetime` with the ``fold``
+            attribute added, if ``fold`` is 1.
+
+        .. versionadded:: 2.6.0
+        """
+        if getattr(dt, 'fold', 0) == fold:
+            return dt
+
+        args = dt.timetuple()[:6]
+        args += (dt.microsecond, dt.tzinfo)
+
+        if fold:
+            return _DatetimeWithFold(*args)
+        else:
+            return datetime(*args)
+
+
+def _validate_fromutc_inputs(f):
+    """
+    The CPython version of ``fromutc`` checks that the input is a ``datetime``
+    object and that ``self`` is attached as its ``tzinfo``.
+    """
+    @wraps(f)
+    def fromutc(self, dt):
+        if not isinstance(dt, datetime):
+            raise TypeError("fromutc() requires a datetime argument")
+        if dt.tzinfo is not self:
+            raise ValueError("dt.tzinfo is not self")
+
+        return f(self, dt)
+
+    return fromutc
+
+
+class _tzinfo(tzinfo):
+    """
+    Base class for all ``dateutil`` ``tzinfo`` objects.
+    """
+
+    def is_ambiguous(self, dt):
+        """
+        Whether or not the "wall time" of a given datetime is ambiguous in this
+        zone.
+
+        :param dt:
+            A :py:class:`datetime.datetime`, naive or time zone aware.
+
+
+        :return:
+            Returns ``True`` if ambiguous, ``False`` otherwise.
+
+        .. versionadded:: 2.6.0
+        """
+
+        dt = dt.replace(tzinfo=self)
+
+        wall_0 = enfold(dt, fold=0)
+        wall_1 = enfold(dt, fold=1)
+
+        same_offset = wall_0.utcoffset() == wall_1.utcoffset()
+        same_dt = wall_0.replace(tzinfo=None) == wall_1.replace(tzinfo=None)
+
+        return same_dt and not same_offset
+
+    def _fold_status(self, dt_utc, dt_wall):
+        """
+        Determine the fold status of a "wall" datetime, given a representation
+        of the same datetime as a (naive) UTC datetime. This is calculated based
+        on the assumption that ``dt.utcoffset() - dt.dst()`` is constant for all
+        datetimes, and that this offset is the actual number of hours separating
+        ``dt_utc`` and ``dt_wall``.
+
+        :param dt_utc:
+            Representation of the datetime as UTC
+
+        :param dt_wall:
+            Representation of the datetime as "wall time". This parameter must
+            either have a `fold` attribute or have a fold-naive
+            :class:`datetime.tzinfo` attached, otherwise the calculation may
+            fail.
+        """
+        if self.is_ambiguous(dt_wall):
+            delta_wall = dt_wall - dt_utc
+            _fold = int(delta_wall == (dt_utc.utcoffset() - dt_utc.dst()))
+        else:
+            _fold = 0
+
+        return _fold
+
+    def _fold(self, dt):
+        return getattr(dt, 'fold', 0)
+
+    def _fromutc(self, dt):
+        """
+        Given a timezone-aware datetime in a given timezone, calculates a
+        timezone-aware datetime in a new timezone.
+
+        Since this is the one time that we *know* we have an unambiguous
+        datetime object, we take this opportunity to determine whether the
+        datetime is ambiguous and in a "fold" state (e.g. if it's the first
+        occurrence, chronologically, of the ambiguous datetime).
+
+        :param dt:
+            A timezone-aware :class:`datetime.datetime` object.
+        """
+
+        # Re-implement the algorithm from Python's datetime.py
+        dtoff = dt.utcoffset()
+        if dtoff is None:
+            raise ValueError("fromutc() requires a non-None utcoffset() "
+                             "result")
+
+        # The original datetime.py code assumes that `dst()` defaults to
+        # zero during ambiguous times. PEP 495 inverts this presumption, so
+        # for pre-PEP 495 versions of python, we need to tweak the algorithm.
+        dtdst = dt.dst()
+        if dtdst is None:
+            raise ValueError("fromutc() requires a non-None dst() result")
+        delta = dtoff - dtdst
+
+        dt += delta
+        # Set fold=1 so we can default to being in the fold for
+        # ambiguous dates.
+        dtdst = enfold(dt, fold=1).dst()
+        if dtdst is None:
+            raise ValueError("fromutc(): dt.dst gave inconsistent "
+                             "results; cannot convert")
+        return dt + dtdst
+
+    @_validate_fromutc_inputs
+    def fromutc(self, dt):
+        """
+        Given a timezone-aware datetime in a given timezone, calculates a
+        timezone-aware datetime in a new timezone.
+
+        Since this is the one time that we *know* we have an unambiguous
+        datetime object, we take this opportunity to determine whether the
+        datetime is ambiguous and in a "fold" state (e.g. if it's the first
+        occurrence, chronologically, of the ambiguous datetime).
+
+        :param dt:
+            A timezone-aware :class:`datetime.datetime` object.
+        """
+        dt_wall = self._fromutc(dt)
+
+        # Calculate the fold status given the two datetimes.
+        _fold = self._fold_status(dt, dt_wall)
+
+        # Set the default fold value for ambiguous dates
+        return enfold(dt_wall, fold=_fold)
+
+
+class tzrangebase(_tzinfo):
+    """
+    This is an abstract base class for time zones represented by an annual
+    transition into and out of DST. Child classes should implement the following
+    methods:
+
+        * ``__init__(self, *args, **kwargs)``
+        * ``transitions(self, year)`` - this is expected to return a tuple of
+          datetimes representing the DST on and off transitions in standard
+          time.
+
+    A fully initialized ``tzrangebase`` subclass should also provide the
+    following attributes:
+        * ``hasdst``: Boolean whether or not the zone uses DST.
+        * ``_dst_offset`` / ``_std_offset``: :class:`datetime.timedelta` objects
+          representing the respective UTC offsets.
+        * ``_dst_abbr`` / ``_std_abbr``: Strings representing the timezone short
+          abbreviations in DST and STD, respectively.
+        * ``_hasdst``: Whether or not the zone has DST.
+
+    .. versionadded:: 2.6.0
+    """
+    def __init__(self):
+        raise NotImplementedError('tzrangebase is an abstract base class')
+
+    def utcoffset(self, dt):
+        isdst = self._isdst(dt)
+
+        if isdst is None:
+            return None
+        elif isdst:
+            return self._dst_offset
+        else:
+            return self._std_offset
+
+    def dst(self, dt):
+        isdst = self._isdst(dt)
+
+        if isdst is None:
+            return None
+        elif isdst:
+            return self._dst_base_offset
+        else:
+            return ZERO
+
+    @tzname_in_python2
+    def tzname(self, dt):
+        if self._isdst(dt):
+            return self._dst_abbr
+        else:
+            return self._std_abbr
+
+    def fromutc(self, dt):
+        """ Given a datetime in UTC, return local time """
+        if not isinstance(dt, datetime):
+            raise TypeError("fromutc() requires a datetime argument")
+
+        if dt.tzinfo is not self:
+            raise ValueError("dt.tzinfo is not self")
+
+        # Get transitions - if there are none, fixed offset
+        transitions = self.transitions(dt.year)
+        if transitions is None:
+            return dt + self.utcoffset(dt)
+
+        # Get the transition times in UTC
+        dston, dstoff = transitions
+
+        dston -= self._std_offset
+        dstoff -= self._std_offset
+
+        utc_transitions = (dston, dstoff)
+        dt_utc = dt.replace(tzinfo=None)
+
+        isdst = self._naive_isdst(dt_utc, utc_transitions)
+
+        if isdst:
+            dt_wall = dt + self._dst_offset
+        else:
+            dt_wall = dt + self._std_offset
+
+        _fold = int(not isdst and self.is_ambiguous(dt_wall))
+
+        return enfold(dt_wall, fold=_fold)
+
+    def is_ambiguous(self, dt):
+        """
+        Whether or not the "wall time" of a given datetime is ambiguous in this
+        zone.
+
+        :param dt:
+            A :py:class:`datetime.datetime`, naive or time zone aware.
+
+
+        :return:
+            Returns ``True`` if ambiguous, ``False`` otherwise.
+
+        .. versionadded:: 2.6.0
+        """
+        if not self.hasdst:
+            return False
+
+        start, end = self.transitions(dt.year)
+
+        dt = dt.replace(tzinfo=None)
+        return (end <= dt < end + self._dst_base_offset)
+
+    def _isdst(self, dt):
+        if not self.hasdst:
+            return False
+        elif dt is None:
+            return None
+
+        transitions = self.transitions(dt.year)
+
+        if transitions is None:
+            return False
+
+        dt = dt.replace(tzinfo=None)
+
+        isdst = self._naive_isdst(dt, transitions)
+
+        # Handle ambiguous dates
+        if not isdst and self.is_ambiguous(dt):
+            return not self._fold(dt)
+        else:
+            return isdst
+
+    def _naive_isdst(self, dt, transitions):
+        dston, dstoff = transitions
+
+        dt = dt.replace(tzinfo=None)
+
+        if dston < dstoff:
+            isdst = dston <= dt < dstoff
+        else:
+            isdst = not dstoff <= dt < dston
+
+        return isdst
+
+    @property
+    def _dst_base_offset(self):
+        return self._dst_offset - self._std_offset
+
+    __hash__ = None
+
+    def __ne__(self, other):
+        return not (self == other)
+
+    def __repr__(self):
+        return "%s(...)" % self.__class__.__name__
+
+    __reduce__ = object.__reduce__
diff --git a/venv/Lib/site-packages/dateutil/tz/_factories.py b/venv/Lib/site-packages/dateutil/tz/_factories.py
new file mode 100644
index 0000000..f8a6589
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/tz/_factories.py
@@ -0,0 +1,80 @@
+from datetime import timedelta
+import weakref
+from collections import OrderedDict
+
+from six.moves import _thread
+
+
+class _TzSingleton(type):
+    def __init__(cls, *args, **kwargs):
+        cls.__instance = None
+        super(_TzSingleton, cls).__init__(*args, **kwargs)
+
+    def __call__(cls):
+        if cls.__instance is None:
+            cls.__instance = super(_TzSingleton, cls).__call__()
+        return cls.__instance
+
+
+class _TzFactory(type):
+    def instance(cls, *args, **kwargs):
+        """Alternate constructor that returns a fresh instance"""
+        return type.__call__(cls, *args, **kwargs)
+
+
+class _TzOffsetFactory(_TzFactory):
+    def __init__(cls, *args, **kwargs):
+        cls.__instances = weakref.WeakValueDictionary()
+        cls.__strong_cache = OrderedDict()
+        cls.__strong_cache_size = 8
+
+        cls._cache_lock = _thread.allocate_lock()
+
+    def __call__(cls, name, offset):
+        if isinstance(offset, timedelta):
+            key = (name, offset.total_seconds())
+        else:
+            key = (name, offset)
+
+        instance = cls.__instances.get(key, None)
+        if instance is None:
+            instance = cls.__instances.setdefault(key,
+                                                  cls.instance(name, offset))
+
+        # This lock may not be necessary in Python 3. See GH issue #901
+        with cls._cache_lock:
+            cls.__strong_cache[key] = cls.__strong_cache.pop(key, instance)
+
+            # Remove an item if the strong cache is overpopulated
+            if len(cls.__strong_cache) > cls.__strong_cache_size:
+                cls.__strong_cache.popitem(last=False)
+
+        return instance
+
+
+class _TzStrFactory(_TzFactory):
+    def __init__(cls, *args, **kwargs):
+        cls.__instances = weakref.WeakValueDictionary()
+        cls.__strong_cache = OrderedDict()
+        cls.__strong_cache_size = 8
+
+        cls.__cache_lock = _thread.allocate_lock()
+
+    def __call__(cls, s, posix_offset=False):
+        key = (s, posix_offset)
+        instance = cls.__instances.get(key, None)
+
+        if instance is None:
+            instance = cls.__instances.setdefault(key,
+                cls.instance(s, posix_offset))
+
+        # This lock may not be necessary in Python 3. See GH issue #901
+        with cls.__cache_lock:
+            cls.__strong_cache[key] = cls.__strong_cache.pop(key, instance)
+
+            # Remove an item if the strong cache is overpopulated
+            if len(cls.__strong_cache) > cls.__strong_cache_size:
+                cls.__strong_cache.popitem(last=False)
+
+        return instance
+
diff --git a/venv/Lib/site-packages/dateutil/tz/tz.py b/venv/Lib/site-packages/dateutil/tz/tz.py
new file mode 100644
index 0000000..c67f56d
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/tz/tz.py
@@ -0,0 +1,1849 @@
+# -*- coding: utf-8 -*-
+"""
+This module offers timezone implementations subclassing the abstract
+:py:class:`datetime.tzinfo` type. There are classes to handle tzfile format
+files (usually are in :file:`/etc/localtime`, :file:`/usr/share/zoneinfo`,
+etc), TZ environment string (in all known formats), given ranges (with help
+from relative deltas), local machine timezone, fixed offset timezone, and UTC
+timezone.
+"""
+import datetime
+import struct
+import time
+import sys
+import os
+import bisect
+import weakref
+from collections import OrderedDict
+
+import six
+from six import string_types
+from six.moves import _thread
+from ._common import tzname_in_python2, _tzinfo
+from ._common import tzrangebase, enfold
+from ._common import _validate_fromutc_inputs
+
+from ._factories import _TzSingleton, _TzOffsetFactory
+from ._factories import _TzStrFactory
+try:
+    from .win import tzwin, tzwinlocal
+except ImportError:
+    tzwin = tzwinlocal = None
+
+# For warning about rounding tzinfo
+from warnings import warn
+
+ZERO = datetime.timedelta(0)
+EPOCH = datetime.datetime.utcfromtimestamp(0)
+EPOCHORDINAL = EPOCH.toordinal()
+
+
+@six.add_metaclass(_TzSingleton)
+class tzutc(datetime.tzinfo):
+    """
+    This is a tzinfo object that represents the UTC time zone.
+
+    **Examples:**
+
+    .. doctest::
+
+        >>> from datetime import *
+        >>> from dateutil.tz import *
+
+        >>> datetime.now()
+        datetime.datetime(2003, 9, 27, 9, 40, 1, 521290)
+
+        >>> datetime.now(tzutc())
+        datetime.datetime(2003, 9, 27, 12, 40, 12, 156379, tzinfo=tzutc())
+
+        >>> datetime.now(tzutc()).tzname()
+        'UTC'
+
+    .. versionchanged:: 2.7.0
+        ``tzutc()`` is now a singleton, so the result of ``tzutc()`` will
+        always return the same object.
+
+        .. doctest::
+
+            >>> from dateutil.tz import tzutc, UTC
+            >>> tzutc() is tzutc()
+            True
+            >>> tzutc() is UTC
+            True
+    """
+    def utcoffset(self, dt):
+        return ZERO
+
+    def dst(self, dt):
+        return ZERO
+
+    @tzname_in_python2
+    def tzname(self, dt):
+        return "UTC"
+
+    def is_ambiguous(self, dt):
+        """
+        Whether or not the "wall time" of a given datetime is ambiguous in this
+        zone.
+
+        :param dt:
+            A :py:class:`datetime.datetime`, naive or time zone aware.
+
+
+        :return:
+            Returns ``True`` if ambiguous, ``False`` otherwise.
+
+        .. versionadded:: 2.6.0
+        """
+        return False
+
+    @_validate_fromutc_inputs
+    def fromutc(self, dt):
+        """
+        Fast track version of fromutc() returns the original ``dt`` object for
+        any valid :py:class:`datetime.datetime` object.
+        """
+        return dt
+
+    def __eq__(self, other):
+        if not isinstance(other, (tzutc, tzoffset)):
+            return NotImplemented
+
+        return (isinstance(other, tzutc) or
+                (isinstance(other, tzoffset) and other._offset == ZERO))
+
+    __hash__ = None
+
+    def __ne__(self, other):
+        return not (self == other)
+
+    def __repr__(self):
+        return "%s()" % self.__class__.__name__
+
+    __reduce__ = object.__reduce__
+
+
+#: Convenience constant providing a :class:`tzutc()` instance
+#:
+#: .. versionadded:: 2.7.0
+UTC = tzutc()
+
+
+@six.add_metaclass(_TzOffsetFactory)
+class tzoffset(datetime.tzinfo):
+    """
+    A simple class for representing a fixed offset from UTC.
+
+    :param name:
+        The timezone name, to be returned when ``tzname()`` is called.
+    :param offset:
+        The time zone offset in seconds, or (since version 2.6.0, represented
+        as a :py:class:`datetime.timedelta` object).
+    """
+    def __init__(self, name, offset):
+        self._name = name
+
+        try:
+            # Allow a timedelta
+            offset = offset.total_seconds()
+        except (TypeError, AttributeError):
+            pass
+
+        self._offset = datetime.timedelta(seconds=_get_supported_offset(offset))
+
+    def utcoffset(self, dt):
+        return self._offset
+
+    def dst(self, dt):
+        return ZERO
+
+    @tzname_in_python2
+    def tzname(self, dt):
+        return self._name
+
+    @_validate_fromutc_inputs
+    def fromutc(self, dt):
+        return dt + self._offset
+
+    def is_ambiguous(self, dt):
+        """
+        Whether or not the "wall time" of a given datetime is ambiguous in this
+        zone.
+
+        :param dt:
+            A :py:class:`datetime.datetime`, naive or time zone aware.
+        :return:
+            Returns ``True`` if ambiguous, ``False`` otherwise.
+
+        .. versionadded:: 2.6.0
+        """
+        return False
+
+    def __eq__(self, other):
+        if not isinstance(other, tzoffset):
+            return NotImplemented
+
+        return self._offset == other._offset
+
+    __hash__ = None
+
+    def __ne__(self, other):
+        return not (self == other)
+
+    def __repr__(self):
+        return "%s(%s, %s)" % (self.__class__.__name__,
+                               repr(self._name),
+                               int(self._offset.total_seconds()))
+
+    __reduce__ = object.__reduce__
+
+
+class tzlocal(_tzinfo):
+    """
+    A :class:`tzinfo` subclass built around the ``time`` timezone functions.
+    """
+    def __init__(self):
+        super(tzlocal, self).__init__()
+
+        self._std_offset = datetime.timedelta(seconds=-time.timezone)
+        if time.daylight:
+            self._dst_offset = datetime.timedelta(seconds=-time.altzone)
+        else:
+            self._dst_offset = self._std_offset
+
+        self._dst_saved = self._dst_offset - self._std_offset
+        self._hasdst = bool(self._dst_saved)
+        self._tznames = tuple(time.tzname)
+
+    def utcoffset(self, dt):
+        if dt is None and self._hasdst:
+            return None
+
+        if self._isdst(dt):
+            return self._dst_offset
+        else:
+            return self._std_offset
+
+    def dst(self, dt):
+        if dt is None and self._hasdst:
+            return None
+
+        if self._isdst(dt):
+            return self._dst_offset - self._std_offset
+        else:
+            return ZERO
+
+    @tzname_in_python2
+    def tzname(self, dt):
+        return self._tznames[self._isdst(dt)]
+
+    def is_ambiguous(self, dt):
+        """
+        Whether or not the "wall time" of a given datetime is ambiguous in this
+        zone.
+
+        :param dt:
+            A :py:class:`datetime.datetime`, naive or time zone aware.
+
+
+        :return:
+            Returns ``True`` if ambiguous, ``False`` otherwise.
+
+        .. versionadded:: 2.6.0
+        """
+        naive_dst = self._naive_is_dst(dt)
+        return (not naive_dst and
+                (naive_dst != self._naive_is_dst(dt - self._dst_saved)))
+
+    def _naive_is_dst(self, dt):
+        timestamp = _datetime_to_timestamp(dt)
+        return time.localtime(timestamp + time.timezone).tm_isdst
+
+    def _isdst(self, dt, fold_naive=True):
+        # We can't use mktime here. It is unstable when deciding if
+        # the hour near to a change is DST or not.
+        #
+        # timestamp = time.mktime((dt.year, dt.month, dt.day, dt.hour,
+        #                         dt.minute, dt.second, dt.weekday(), 0, -1))
+        # return time.localtime(timestamp).tm_isdst
+        #
+        # The code above yields the following result:
+        #
+        # >>> import tz, datetime
+        # >>> t = tz.tzlocal()
+        # >>> datetime.datetime(2003,2,15,23,tzinfo=t).tzname()
+        # 'BRDT'
+        # >>> datetime.datetime(2003,2,16,0,tzinfo=t).tzname()
+        # 'BRST'
+        # >>> datetime.datetime(2003,2,15,23,tzinfo=t).tzname()
+        # 'BRST'
+        # >>> datetime.datetime(2003,2,15,22,tzinfo=t).tzname()
+        # 'BRDT'
+        # >>> datetime.datetime(2003,2,15,23,tzinfo=t).tzname()
+        # 'BRDT'
+        #
+        # Here is a more stable implementation:
+        #
+        if not self._hasdst:
+            return False
+
+        # Check for ambiguous times:
+        dstval = self._naive_is_dst(dt)
+        fold = getattr(dt, 'fold', None)
+
+        if self.is_ambiguous(dt):
+            if fold is not None:
+                return not self._fold(dt)
+            else:
+                return True
+
+        return dstval
+
+    def __eq__(self, other):
+        if isinstance(other, tzlocal):
+            return (self._std_offset == other._std_offset and
+                    self._dst_offset == other._dst_offset)
+        elif isinstance(other, tzutc):
+            return (not self._hasdst and
+                    self._tznames[0] in {'UTC', 'GMT'} and
+                    self._std_offset == ZERO)
+        elif isinstance(other, tzoffset):
+            return (not self._hasdst and
+                    self._tznames[0] == other._name and
+                    self._std_offset == other._offset)
+        else:
+            return NotImplemented
+
+    __hash__ = None
+
+    def __ne__(self, other):
+        return not (self == other)
+
+    def __repr__(self):
+        return "%s()" % self.__class__.__name__
+
+    __reduce__ = object.__reduce__
+
+
+class _ttinfo(object):
+    __slots__ = ["offset", "delta", "isdst", "abbr",
+                 "isstd", "isgmt", "dstoffset"]
+
+    def __init__(self):
+        for attr in self.__slots__:
+            setattr(self, attr, None)
+
+    def __repr__(self):
+        l = []
+        for attr in self.__slots__:
+            value = getattr(self, attr)
+            if value is not None:
+                l.append("%s=%s" % (attr, repr(value)))
+        return "%s(%s)" % (self.__class__.__name__, ", ".join(l))
+
+    def __eq__(self, other):
+        if not isinstance(other, _ttinfo):
+            return NotImplemented
+
+        return (self.offset == other.offset and
+                self.delta == other.delta and
+                self.isdst == other.isdst and
+                self.abbr == other.abbr and
+                self.isstd == other.isstd and
+                self.isgmt == other.isgmt and
+                self.dstoffset == other.dstoffset)
+
+    __hash__ = None
+
+    def __ne__(self, other):
+        return not (self == other)
+
+    def __getstate__(self):
+        state = {}
+        for name in self.__slots__:
+            state[name] = getattr(self, name, None)
+        return state
+
+    def __setstate__(self, state):
+        for name in self.__slots__:
+            if name in state:
+                setattr(self, name, state[name])
+
+
+class _tzfile(object):
+    """
+    Lightweight class for holding the relevant transition and time zone
+    information read from binary tzfiles.
+    """
+    attrs = ['trans_list', 'trans_list_utc', 'trans_idx', 'ttinfo_list',
+             'ttinfo_std', 'ttinfo_dst', 'ttinfo_before', 'ttinfo_first']
+
+    def __init__(self, **kwargs):
+        for attr in self.attrs:
+            setattr(self, attr, kwargs.get(attr, None))
+
+
+class tzfile(_tzinfo):
+    """
+    This is a ``tzinfo`` subclass that allows one to use the ``tzfile(5)``
+    format timezone files to extract current and historical zone information.
+
+    :param fileobj:
+        This can be an opened file stream or a file name that the time zone
+        information can be read from.
+
+    :param filename:
+        This is an optional parameter specifying the source of the time zone
+        information in the event that ``fileobj`` is a file object. If omitted
+        and ``fileobj`` is a file stream, this parameter will be set either to
+        ``fileobj``'s ``name`` attribute or to ``repr(fileobj)``.
+
+    See `Sources for Time Zone and Daylight Saving Time Data
+    <https://data.iana.org/time-zones/tz-link.html>`_ for more information.
+    Time zone files can be compiled from the `IANA Time Zone database files
+    <https://www.iana.org/time-zones>`_ with the `zic time zone compiler
+    <https://www.freebsd.org/cgi/man.cgi?query=zic&sektion=8>`_
+
+    .. note::
+
+        Only construct a ``tzfile`` directly if you have a specific timezone
+        file on disk that you want to read into a Python ``tzinfo`` object.
+        If you want to get a ``tzfile`` representing a specific IANA zone,
+        (e.g. ``'America/New_York'``), you should call
+        :func:`dateutil.tz.gettz` with the zone identifier.
+
+
+    **Examples:**
+
+    Using the US Eastern time zone as an example, we can see that a ``tzfile``
+    provides time zone information for the standard Daylight Saving offsets:
+
+    .. testsetup:: tzfile
+
+        from dateutil.tz import gettz
+        from datetime import datetime
+
+    .. doctest:: tzfile
+
+        >>> NYC = gettz('America/New_York')
+        >>> NYC
+        tzfile('/usr/share/zoneinfo/America/New_York')
+
+        >>> print(datetime(2016, 1, 3, tzinfo=NYC))     # EST
+        2016-01-03 00:00:00-05:00
+
+        >>> print(datetime(2016, 7, 7, tzinfo=NYC))     # EDT
+        2016-07-07 00:00:00-04:00
+
+
+    The ``tzfile`` structure contains a fully history of the time zone,
+    so historical dates will also have the right offsets. For example, before
+    the adoption of the UTC standards, New York used local solar  mean time:
+
+    .. doctest:: tzfile
+
+       >>> print(datetime(1901, 4, 12, tzinfo=NYC))    # LMT
+       1901-04-12 00:00:00-04:56
+
+    And during World War II, New York was on "Eastern War Time", which was a
+    state of permanent daylight saving time:
+
+    .. doctest:: tzfile
+
+        >>> print(datetime(1944, 2, 7, tzinfo=NYC))    # EWT
+        1944-02-07 00:00:00-04:00
+
+    """
+
+    def __init__(self, fileobj, filename=None):
+        super(tzfile, self).__init__()
+
+        file_opened_here = False
+        if isinstance(fileobj, string_types):
+            self._filename = fileobj
+            fileobj = open(fileobj, 'rb')
+            file_opened_here = True
+        elif filename is not None:
+            self._filename = filename
+        elif hasattr(fileobj, "name"):
+            self._filename = fileobj.name
+        else:
+            self._filename = repr(fileobj)
+
+        if fileobj is not None:
+            if not file_opened_here:
+                fileobj = _nullcontext(fileobj)
+
+            with fileobj as file_stream:
+                tzobj = self._read_tzfile(file_stream)
+
+            self._set_tzdata(tzobj)
+
+    def _set_tzdata(self, tzobj):
+        """ Set the time zone data of this object from a _tzfile object """
+        # Copy the relevant attributes over as private attributes
+        for attr in _tzfile.attrs:
+            setattr(self, '_' + attr, getattr(tzobj, attr))
+
+    def _read_tzfile(self, fileobj):
+        out = _tzfile()
+
+        # From tzfile(5):
+        #
+        # The time zone information files used by tzset(3)
+        # begin with the magic characters "TZif" to identify
+        # them as time zone information files, followed by
+        # sixteen bytes reserved for future use, followed by
+        # six four-byte values of type long, written in a
+        # ``standard'' byte order (the high-order  byte
+        # of the value is written first).
+        if fileobj.read(4).decode() != "TZif":
+            raise ValueError("magic not found")
+
+        fileobj.read(16)
+
+        (
+            # The number of UTC/local indicators stored in the file.
+            ttisgmtcnt,
+
+            # The number of standard/wall indicators stored in the file.
+            ttisstdcnt,
+
+            # The number of leap seconds for which data is
+            # stored in the file.
+            leapcnt,
+
+            # The number of "transition times" for which data
+            # is stored in the file.
+            timecnt,
+
+            # The number of "local time types" for which data
+            # is stored in the file (must not be zero).
+            typecnt,
+
+            # The  number  of  characters  of "time zone
+            # abbreviation strings" stored in the file.
+            charcnt,
+
+        ) = struct.unpack(">6l", fileobj.read(24))
+
+        # The above header is followed by tzh_timecnt four-byte
+        # values  of  type long,  sorted  in ascending order.
+        # These values are written in ``standard'' byte order.
+        # Each is used as a transition time (as  returned  by
+        # time(2)) at which the rules for computing local time
+        # change.
+
+        if timecnt:
+            out.trans_list_utc = list(struct.unpack(">%dl" % timecnt,
+                                                    fileobj.read(timecnt*4)))
+        else:
+            out.trans_list_utc = []
+
+        # Next come tzh_timecnt one-byte values of type unsigned
+        # char; each one tells which of the different types of
+        # ``local time'' types described in the file is associated
+        # with the same-indexed transition time. These values
+        # serve as indices into an array of ttinfo structures that
+        # appears next in the file.
+
+        if timecnt:
+            out.trans_idx = struct.unpack(">%dB" % timecnt,
+                                          fileobj.read(timecnt))
+        else:
+            out.trans_idx = []
+
+        # Each ttinfo structure is written as a four-byte value
+        # for tt_gmtoff  of  type long,  in  a  standard  byte
+        # order, followed  by a one-byte value for tt_isdst
+        # and a one-byte  value  for  tt_abbrind.   In  each
+        # structure, tt_gmtoff  gives  the  number  of
+        # seconds to be added to UTC, tt_isdst tells whether
+        # tm_isdst should be set by  localtime(3),  and
+        # tt_abbrind serves  as an index into the array of
+        # time zone abbreviation characters that follow the
+        # ttinfo structure(s) in the file.
+
+        ttinfo = []
+
+        for i in range(typecnt):
+            ttinfo.append(struct.unpack(">lbb", fileobj.read(6)))
+
+        abbr = fileobj.read(charcnt).decode()
+
+        # Then there are tzh_leapcnt pairs of four-byte
+        # values, written in  standard byte  order;  the
+        # first  value  of  each pair gives the time (as
+        # returned by time(2)) at which a leap second
+        # occurs;  the  second  gives the  total  number of
+        # leap seconds to be applied after the given time.
+        # The pairs of values are sorted in ascending order
+        # by time.
+
+        # Not used, for now (but seek for correct file position)
+        if leapcnt:
+            fileobj.seek(leapcnt * 8, os.SEEK_CUR)
+
+        # Then there are tzh_ttisstdcnt standard/wall
+        # indicators, each stored as a one-byte value;
+        # they tell whether the transition times associated
+        # with local time types were specified as standard
+        # time or wall clock time, and are used when
+        # a time zone file is used in handling POSIX-style
+        # time zone environment variables.
+
+        if ttisstdcnt:
+            isstd = struct.unpack(">%db" % ttisstdcnt,
+                                  fileobj.read(ttisstdcnt))
+
+        # Finally, there are tzh_ttisgmtcnt UTC/local
+        # indicators, each stored as a one-byte value;
+        # they tell whether the transition times associated
+        # with local time types were specified as UTC or
+        # local time, and are used when a time zone file
+        # is used in handling POSIX-style time zone envi-
+        # ronment variables.
+
+        if ttisgmtcnt:
+            isgmt = struct.unpack(">%db" % ttisgmtcnt,
+                                  fileobj.read(ttisgmtcnt))
+
+        # Build ttinfo list
+        out.ttinfo_list = []
+        for i in range(typecnt):
+            gmtoff, isdst, abbrind = ttinfo[i]
+            gmtoff = _get_supported_offset(gmtoff)
+            tti = _ttinfo()
+            tti.offset = gmtoff
+            tti.dstoffset = datetime.timedelta(0)
+            tti.delta = datetime.timedelta(seconds=gmtoff)
+            tti.isdst = isdst
+            tti.abbr = abbr[abbrind:abbr.find('\x00', abbrind)]
+            tti.isstd = (ttisstdcnt > i and isstd[i] != 0)
+            tti.isgmt = (ttisgmtcnt > i and isgmt[i] != 0)
+            out.ttinfo_list.append(tti)
+
+        # Replace ttinfo indexes for ttinfo objects.
+        out.trans_idx = [out.ttinfo_list[idx] for idx in out.trans_idx]
+
+        # Set standard, dst, and before ttinfos. before will be
+        # used when a given time is before any transitions,
+        # and will be set to the first non-dst ttinfo, or to
+        # the first dst, if all of them are dst.
+        out.ttinfo_std = None
+        out.ttinfo_dst = None
+        out.ttinfo_before = None
+        if out.ttinfo_list:
+            if not out.trans_list_utc:
+                out.ttinfo_std = out.ttinfo_first = out.ttinfo_list[0]
+            else:
+                for i in range(timecnt-1, -1, -1):
+                    tti = out.trans_idx[i]
+                    if not out.ttinfo_std and not tti.isdst:
+                        out.ttinfo_std = tti
+                    elif not out.ttinfo_dst and tti.isdst:
+                        out.ttinfo_dst = tti
+
+                    if out.ttinfo_std and out.ttinfo_dst:
+                        break
+                else:
+                    if out.ttinfo_dst and not out.ttinfo_std:
+                        out.ttinfo_std = out.ttinfo_dst
+
+                for tti in out.ttinfo_list:
+                    if not tti.isdst:
+                        out.ttinfo_before = tti
+                        break
+                else:
+                    out.ttinfo_before = out.ttinfo_list[0]
+
+        # Now fix transition times to become relative to wall time.
+        #
+        # I'm not sure about this. In my tests, the tz source file
+        # is setup to wall time, and in the binary file isstd and
+        # isgmt are off, so it should be in wall time. OTOH, it's
+        # always in gmt time. Let me know if you have comments
+        # about this.
+        lastdst = None
+        lastoffset = None
+        lastdstoffset = None
+        lastbaseoffset = None
+        out.trans_list = []
+
+        for i, tti in enumerate(out.trans_idx):
+            offset = tti.offset
+            dstoffset = 0
+
+            if lastdst is not None:
+                if tti.isdst:
+                    if not lastdst:
+                        dstoffset = offset - lastoffset
+
+                    if not dstoffset and lastdstoffset:
+                        dstoffset = lastdstoffset
+
+                    tti.dstoffset = datetime.timedelta(seconds=dstoffset)
+                    lastdstoffset = dstoffset
+
+            # If a time zone changes its base offset during a DST transition,
+            # then you need to adjust by the previous base offset to get the
+            # transition time in local time. Otherwise you use the current
+            # base offset. Ideally, I would have some mathematical proof of
+            # why this is true, but I haven't really thought about it enough.
+            baseoffset = offset - dstoffset
+            adjustment = baseoffset
+            if (lastbaseoffset is not None and baseoffset != lastbaseoffset
+                    and tti.isdst != lastdst):
+                # The base DST has changed
+                adjustment = lastbaseoffset
+
+            lastdst = tti.isdst
+            lastoffset = offset
+            lastbaseoffset = baseoffset
+
+            out.trans_list.append(out.trans_list_utc[i] + adjustment)
+
+        out.trans_idx = tuple(out.trans_idx)
+        out.trans_list = tuple(out.trans_list)
+        out.trans_list_utc = tuple(out.trans_list_utc)
+
+        return out
+
+    def _find_last_transition(self, dt, in_utc=False):
+        # If there's no list, there are no transitions to find
+        if not self._trans_list:
+            return None
+
+        timestamp = _datetime_to_timestamp(dt)
+
+        # Find where the timestamp fits in the transition list - if the
+        # timestamp is a transition time, it's part of the "after" period.
+        trans_list = self._trans_list_utc if in_utc else self._trans_list
+        idx = bisect.bisect_right(trans_list, timestamp)
+
+        # We want to know when the previous transition was, so subtract off 1
+        return idx - 1
+
+    def _get_ttinfo(self, idx):
+        # For no list or after the last transition, default to _ttinfo_std
+        if idx is None or (idx + 1) >= len(self._trans_list):
+            return self._ttinfo_std
+
+        # If there is a list and the time is before it, return _ttinfo_before
+        if idx < 0:
+            return self._ttinfo_before
+
+        return self._trans_idx[idx]
+
+    def _find_ttinfo(self, dt):
+        idx = self._resolve_ambiguous_time(dt)
+
+        return self._get_ttinfo(idx)
+
+    def fromutc(self, dt):
+        """
+        The ``tzfile`` implementation of :py:func:`datetime.tzinfo.fromutc`.
+
+        :param dt:
+            A :py:class:`datetime.datetime` object.
+
+        :raises TypeError:
+            Raised if ``dt`` is not a :py:class:`datetime.datetime` object.
+
+        :raises ValueError:
+            Raised if this is called with a ``dt`` which does not have this
+            ``tzinfo`` attached.
+
+        :return:
+            Returns a :py:class:`datetime.datetime` object representing the
+            wall time in ``self``'s time zone.
+        """
+        # These isinstance checks are in datetime.tzinfo, so we'll preserve
+        # them, even if we don't care about duck typing.
+        if not isinstance(dt, datetime.datetime):
+            raise TypeError("fromutc() requires a datetime argument")
+
+        if dt.tzinfo is not self:
+            raise ValueError("dt.tzinfo is not self")
+
+        # First treat UTC as wall time and get the transition we're in.
+        idx = self._find_last_transition(dt, in_utc=True)
+        tti = self._get_ttinfo(idx)
+
+        dt_out = dt + datetime.timedelta(seconds=tti.offset)
+
+        fold = self.is_ambiguous(dt_out, idx=idx)
+
+        return enfold(dt_out, fold=int(fold))
+
+    def is_ambiguous(self, dt, idx=None):
+        """
+        Whether or not the "wall time" of a given datetime is ambiguous in this
+        zone.
+
+        :param dt:
+            A :py:class:`datetime.datetime`, naive or time zone aware.
+
+
+        :return:
+            Returns ``True`` if ambiguous, ``False`` otherwise.
+
+        .. versionadded:: 2.6.0
+        """
+        if idx is None:
+            idx = self._find_last_transition(dt)
+
+        # Calculate the difference in offsets from current to previous
+        timestamp = _datetime_to_timestamp(dt)
+        tti = self._get_ttinfo(idx)
+
+        if idx is None or idx <= 0:
+            return False
+
+        od = self._get_ttinfo(idx - 1).offset - tti.offset
+        tt = self._trans_list[idx]          # Transition time
+
+        return timestamp < tt + od
+
+    def _resolve_ambiguous_time(self, dt):
+        idx = self._find_last_transition(dt)
+
+        # If we have no transitions, return the index
+        _fold = self._fold(dt)
+        if idx is None or idx == 0:
+            return idx
+
+        # If it's ambiguous and we're in a fold, shift to a different index.
+        idx_offset = int(not _fold and self.is_ambiguous(dt, idx))
+
+        return idx - idx_offset
+
+    def utcoffset(self, dt):
+        if dt is None:
+            return None
+
+        if not self._ttinfo_std:
+            return ZERO
+
+        return self._find_ttinfo(dt).delta
+
+    def dst(self, dt):
+        if dt is None:
+            return None
+
+        if not self._ttinfo_dst:
+            return ZERO
+
+        tti = self._find_ttinfo(dt)
+
+        if not tti.isdst:
+            return ZERO
+
+        # The documentation says that utcoffset()-dst() must
+        # be constant for every dt.
+        return tti.dstoffset
+
+    @tzname_in_python2
+    def tzname(self, dt):
+        if not self._ttinfo_std or dt is None:
+            return None
+        return self._find_ttinfo(dt).abbr
+
+    def __eq__(self, other):
+        if not isinstance(other, tzfile):
+            return NotImplemented
+        return (self._trans_list == other._trans_list and
+                self._trans_idx == other._trans_idx and
+                self._ttinfo_list == other._ttinfo_list)
+
+    __hash__ = None
+
+    def __ne__(self, other):
+        return not (self == other)
+
+    def __repr__(self):
+        return "%s(%s)" % (self.__class__.__name__, repr(self._filename))
+
+    def __reduce__(self):
+        return self.__reduce_ex__(None)
+
+    def __reduce_ex__(self, protocol):
+        return (self.__class__, (None, self._filename), self.__dict__)
+
+
+class tzrange(tzrangebase):
+    """
+    The ``tzrange`` object is a time zone specified by a set of offsets and
+    abbreviations, equivalent to the way the ``TZ`` variable can be specified
+    in POSIX-like systems, but using Python delta objects to specify DST
+    start, end and offsets.
+
+    :param stdabbr:
+        The abbreviation for standard time (e.g. ``'EST'``).
+
+    :param stdoffset:
+        An integer or :class:`datetime.timedelta` object or equivalent
+        specifying the base offset from UTC.
+
+        If unspecified, +00:00 is used.
+
+    :param dstabbr:
+        The abbreviation for DST / "Summer" time (e.g. ``'EDT'``).
+
+        If specified, with no other DST information, DST is assumed to occur
+        and the default behavior or ``dstoffset``, ``start`` and ``end`` is
+        used. If unspecified and no other DST information is specified, it
+        is assumed that this zone has no DST.
+
+        If this is unspecified and other DST information is *is* specified,
+        DST occurs in the zone but the time zone abbreviation is left
+        unchanged.
+
+    :param dstoffset:
+        A an integer or :class:`datetime.timedelta` object or equivalent
+        specifying the UTC offset during DST. If unspecified and any other DST
+        information is specified, it is assumed to be the STD offset +1 hour.
+
+    :param start:
+        A :class:`relativedelta.relativedelta` object or equivalent specifying
+        the time and time of year that daylight savings time starts. To
+        specify, for example, that DST starts at 2AM on the 2nd Sunday in
+        March, pass:
+
+            ``relativedelta(hours=2, month=3, day=1, weekday=SU(+2))``
+
+        If unspecified and any other DST information is specified, the default
+        value is 2 AM on the first Sunday in April.
+
+    :param end:
+        A :class:`relativedelta.relativedelta` object or equivalent
+        representing the time and time of year that daylight savings time
+        ends, with the same specification method as in ``start``. One note is
+        that this should point to the first time in the *standard* zone, so if
+        a transition occurs at 2AM in the DST zone and the clocks are set back
+        1 hour to 1AM, set the ``hours`` parameter to +1.
+
+
+    **Examples:**
+
+    .. testsetup:: tzrange
+
+        from dateutil.tz import tzrange, tzstr
+
+    .. doctest:: tzrange
+
+        >>> tzstr('EST5EDT') == tzrange("EST", -18000, "EDT")
+        True
+
+        >>> from dateutil.relativedelta import *
+        >>> range1 = tzrange("EST", -18000, "EDT")
+        >>> range2 = tzrange("EST", -18000, "EDT", -14400,
+        ...                  relativedelta(hours=+2, month=4, day=1,
+        ...                                weekday=SU(+1)),
+        ...                  relativedelta(hours=+1, month=10, day=31,
+        ...                                weekday=SU(-1)))
+        >>> tzstr('EST5EDT') == range1 == range2
+        True
+
+    """
+    def __init__(self, stdabbr, stdoffset=None,
+                 dstabbr=None, dstoffset=None,
+                 start=None, end=None):
+
+        global relativedelta
+        from dateutil import relativedelta
+
+        self._std_abbr = stdabbr
+        self._dst_abbr = dstabbr
+
+        try:
+            stdoffset = stdoffset.total_seconds()
+        except (TypeError, AttributeError):
+            pass
+
+        try:
+            dstoffset = dstoffset.total_seconds()
+        except (TypeError, AttributeError):
+            pass
+
+        if stdoffset is not None:
+            self._std_offset = datetime.timedelta(seconds=stdoffset)
+        else:
+            self._std_offset = ZERO
+
+        if dstoffset is not None:
+            self._dst_offset = datetime.timedelta(seconds=dstoffset)
+        elif dstabbr and stdoffset is not None:
+            self._dst_offset = self._std_offset + datetime.timedelta(hours=+1)
+        else:
+            self._dst_offset = ZERO
+
+        if dstabbr and start is None:
+            self._start_delta = relativedelta.relativedelta(
+                hours=+2, month=4, day=1, weekday=relativedelta.SU(+1))
+        else:
+            self._start_delta = start
+
+        if dstabbr and end is None:
+            self._end_delta = relativedelta.relativedelta(
+                hours=+1, month=10, day=31, weekday=relativedelta.SU(-1))
+        else:
+            self._end_delta = end
+
+        self._dst_base_offset_ = self._dst_offset - self._std_offset
+        self.hasdst = bool(self._start_delta)
+
+    def transitions(self, year):
+        """
+        For a given year, get the DST on and off transition times, expressed
+        always on the standard time side. For zones with no transitions, this
+        function returns ``None``.
+
+        :param year:
+            The year whose transitions you would like to query.
+
+        :return:
+            Returns a :class:`tuple` of :class:`datetime.datetime` objects,
+            ``(dston, dstoff)`` for zones with an annual DST transition, or
+            ``None`` for fixed offset zones.
+        """
+        if not self.hasdst:
+            return None
+
+        base_year = datetime.datetime(year, 1, 1)
+
+        start = base_year + self._start_delta
+        end = base_year + self._end_delta
+
+        return (start, end)
+
+    def __eq__(self, other):
+        if not isinstance(other, tzrange):
+            return NotImplemented
+
+        return (self._std_abbr == other._std_abbr and
+                self._dst_abbr == other._dst_abbr and
+                self._std_offset == other._std_offset and
+                self._dst_offset == other._dst_offset and
+                self._start_delta == other._start_delta and
+                self._end_delta == other._end_delta)
+
+    @property
+    def _dst_base_offset(self):
+        return self._dst_base_offset_
+
+
+@six.add_metaclass(_TzStrFactory)
+class tzstr(tzrange):
+    """
+    ``tzstr`` objects are time zone objects specified by a time-zone string as
+    it would be passed to a ``TZ`` variable on POSIX-style systems (see
+    the `GNU C Library: TZ Variable`_ for more details).
+
+    There is one notable exception, which is that POSIX-style time zones use an
+    inverted offset format, so normally ``GMT+3`` would be parsed as an offset
+    3 hours *behind* GMT. The ``tzstr`` time zone object will parse this as an
+    offset 3 hours *ahead* of GMT. If you would like to maintain the POSIX
+    behavior, pass a ``True`` value to ``posix_offset``.
+
+    The :class:`tzrange` object provides the same functionality, but is
+    specified using :class:`relativedelta.relativedelta` objects. rather than
+    strings.
+
+    :param s:
+        A time zone string in ``TZ`` variable format. This can be a
+        :class:`bytes` (2.x: :class:`str`), :class:`str` (2.x:
+        :class:`unicode`) or a stream emitting unicode characters
+        (e.g. :class:`StringIO`).
+
+    :param posix_offset:
+        Optional. If set to ``True``, interpret strings such as ``GMT+3`` or
+        ``UTC+3`` as being 3 hours *behind* UTC rather than ahead, per the
+        POSIX standard.
+
+    .. caution::
+
+        Prior to version 2.7.0, this function also supported time zones
+        in the format:
+
+            * ``EST5EDT,4,0,6,7200,10,0,26,7200,3600``
+            * ``EST5EDT,4,1,0,7200,10,-1,0,7200,3600``
+
+        This format is non-standard and has been deprecated; this function
+        will raise a :class:`DeprecatedTZFormatWarning` until
+        support is removed in a future version.
+
+    .. _`GNU C Library: TZ Variable`:
+        https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html
+    """
+    def __init__(self, s, posix_offset=False):
+        global parser
+        from dateutil.parser import _parser as parser
+
+        self._s = s
+
+        res = parser._parsetz(s)
+        if res is None or res.any_unused_tokens:
+            raise ValueError("unknown string format")
+
+        # Here we break the compatibility with the TZ variable handling.
+        # GMT-3 actually *means* the timezone -3.
+        if res.stdabbr in ("GMT", "UTC") and not posix_offset:
+            res.stdoffset *= -1
+
+        # We must initialize it first, since _delta() needs
+        # _std_offset and _dst_offset set. Use False in start/end
+        # to avoid building it two times.
+        tzrange.__init__(self, res.stdabbr, res.stdoffset,
+                         res.dstabbr, res.dstoffset,
+                         start=False, end=False)
+
+        if not res.dstabbr:
+            self._start_delta = None
+            self._end_delta = None
+        else:
+            self._start_delta = self._delta(res.start)
+            if self._start_delta:
+                self._end_delta = self._delta(res.end, isend=1)
+
+        self.hasdst = bool(self._start_delta)
+
+    def _delta(self, x, isend=0):
+        from dateutil import relativedelta
+        kwargs = {}
+        if x.month is not None:
+            kwargs["month"] = x.month
+            if x.weekday is not None:
+                kwargs["weekday"] = relativedelta.weekday(x.weekday, x.week)
+                if x.week > 0:
+                    kwargs["day"] = 1
+                else:
+                    kwargs["day"] = 31
+            elif x.day:
+                kwargs["day"] = x.day
+        elif x.yday is not None:
+            kwargs["yearday"] = x.yday
+        elif x.jyday is not None:
+            kwargs["nlyearday"] = x.jyday
+        if not kwargs:
+            # Default is to start on first sunday of april, and end
+            # on last sunday of october.
+            if not isend:
+                kwargs["month"] = 4
+                kwargs["day"] = 1
+                kwargs["weekday"] = relativedelta.SU(+1)
+            else:
+                kwargs["month"] = 10
+                kwargs["day"] = 31
+                kwargs["weekday"] = relativedelta.SU(-1)
+        if x.time is not None:
+            kwargs["seconds"] = x.time
+        else:
+            # Default is 2AM.
+            kwargs["seconds"] = 7200
+        if isend:
+            # Convert to standard time, to follow the documented way
+            # of working with the extra hour. See the documentation
+            # of the tzinfo class.
+            delta = self._dst_offset - self._std_offset
+            kwargs["seconds"] -= delta.seconds + delta.days * 86400
+        return relativedelta.relativedelta(**kwargs)
+
+    def __repr__(self):
+        return "%s(%s)" % (self.__class__.__name__, repr(self._s))
+
+
+class _tzicalvtzcomp(object):
+    def __init__(self, tzoffsetfrom, tzoffsetto, isdst,
+                 tzname=None, rrule=None):
+        self.tzoffsetfrom = datetime.timedelta(seconds=tzoffsetfrom)
+        self.tzoffsetto = datetime.timedelta(seconds=tzoffsetto)
+        self.tzoffsetdiff = self.tzoffsetto - self.tzoffsetfrom
+        self.isdst = isdst
+        self.tzname = tzname
+        self.rrule = rrule
+
+
+class _tzicalvtz(_tzinfo):
+    def __init__(self, tzid, comps=[]):
+        super(_tzicalvtz, self).__init__()
+
+        self._tzid = tzid
+        self._comps = comps
+        self._cachedate = []
+        self._cachecomp = []
+        self._cache_lock = _thread.allocate_lock()
+
+    def _find_comp(self, dt):
+        if len(self._comps) == 1:
+            return self._comps[0]
+
+        dt = dt.replace(tzinfo=None)
+
+        try:
+            with self._cache_lock:
+                return self._cachecomp[self._cachedate.index(
+                    (dt, self._fold(dt)))]
+        except ValueError:
+            pass
+
+        lastcompdt = None
+        lastcomp = None
+
+        for comp in self._comps:
+            compdt = self._find_compdt(comp, dt)
+
+            if compdt and (not lastcompdt or lastcompdt < compdt):
+                lastcompdt = compdt
+                lastcomp = comp
+
+        if not lastcomp:
+            # RFC says nothing about what to do when a given
+            # time is before the first onset date. We'll look for the
+            # first standard component, or the first component, if
+            # none is found.
+            for comp in self._comps:
+                if not comp.isdst:
+                    lastcomp = comp
+                    break
+            else:
+                lastcomp = comp[0]
+
+        with self._cache_lock:
+            self._cachedate.insert(0, (dt, self._fold(dt)))
+            self._cachecomp.insert(0, lastcomp)
+
+            if len(self._cachedate) > 10:
+                self._cachedate.pop()
+                self._cachecomp.pop()
+
+        return lastcomp
+
+    def _find_compdt(self, comp, dt):
+        if comp.tzoffsetdiff < ZERO and self._fold(dt):
+            dt -= comp.tzoffsetdiff
+
+        compdt = comp.rrule.before(dt, inc=True)
+
+        return compdt
+
+    def utcoffset(self, dt):
+        if dt is None:
+            return None
+
+        return self._find_comp(dt).tzoffsetto
+
+    def dst(self, dt):
+        comp = self._find_comp(dt)
+        if comp.isdst:
+            return comp.tzoffsetdiff
+        else:
+            return ZERO
+
+    @tzname_in_python2
+    def tzname(self, dt):
+        return self._find_comp(dt).tzname
+
+    def __repr__(self):
+        return "<tzicalvtz %s>" % repr(self._tzid)
+
+    __reduce__ = object.__reduce__
+
+
+class tzical(object):
+    """
+    This object is designed to parse an iCalendar-style ``VTIMEZONE`` structure
+    as set out in `RFC 5545`_ Section 4.6.5 into one or more `tzinfo` objects.
+
+    :param `fileobj`:
+        A file or stream in iCalendar format, which should be UTF-8 encoded
+        with CRLF endings.
+
+    .. _`RFC 5545`: https://tools.ietf.org/html/rfc5545
+    """
+    def __init__(self, fileobj):
+        global rrule
+        from dateutil import rrule
+
+        if isinstance(fileobj, string_types):
+            self._s = fileobj
+            # ical should be encoded in UTF-8 with CRLF
+            fileobj = open(fileobj, 'r')
+        else:
+            self._s = getattr(fileobj, 'name', repr(fileobj))
+            fileobj = _nullcontext(fileobj)
+
+        self._vtz = {}
+
+        with fileobj as fobj:
+            self._parse_rfc(fobj.read())
+
+    def keys(self):
+        """
+        Retrieves the available time zones as a list.
+        """
+        return list(self._vtz.keys())
+
+    def get(self, tzid=None):
+        """
+        Retrieve a :py:class:`datetime.tzinfo` object by its ``tzid``.
+
+        :param tzid:
+            If there is exactly one time zone available, omitting ``tzid``
+            or passing :py:const:`None` value returns it. Otherwise a valid
+            key (which can be retrieved from :func:`keys`) is required.
+
+        :raises ValueError:
+            Raised if ``tzid`` is not specified but there are either more
+            or fewer than 1 zone defined.
+
+        :returns:
+            Returns either a :py:class:`datetime.tzinfo` object representing
+            the relevant time zone or :py:const:`None` if the ``tzid`` was
+            not found.
+        """
+        if tzid is None:
+            if len(self._vtz) == 0:
+                raise ValueError("no timezones defined")
+            elif len(self._vtz) > 1:
+                raise ValueError("more than one timezone available")
+            tzid = next(iter(self._vtz))
+
+        return self._vtz.get(tzid)
+
+    def _parse_offset(self, s):
+        s = s.strip()
+        if not s:
+            raise ValueError("empty offset")
+        if s[0] in ('+', '-'):
+            signal = (-1, +1)[s[0] == '+']
+            s = s[1:]
+        else:
+            signal = +1
+        if len(s) == 4:
+            return (int(s[:2]) * 3600 + int(s[2:]) * 60) * signal
+        elif len(s) == 6:
+            return (int(s[:2]) * 3600 + int(s[2:4]) * 60 + int(s[4:])) * signal
+        else:
+            raise ValueError("invalid offset: " + s)
+
+    def _parse_rfc(self, s):
+        lines = s.splitlines()
+        if not lines:
+            raise ValueError("empty string")
+
+        # Unfold
+        i = 0
+        while i < len(lines):
+            line = lines[i].rstrip()
+            if not line:
+                del lines[i]
+            elif i > 0 and line[0] == " ":
+                lines[i-1] += line[1:]
+                del lines[i]
+            else:
+                i += 1
+
+        tzid = None
+        comps = []
+        invtz = False
+        comptype = None
+        for line in lines:
+            if not line:
+                continue
+            name, value = line.split(':', 1)
+            parms = name.split(';')
+            if not parms:
+                raise ValueError("empty property name")
+            name = parms[0].upper()
+            parms = parms[1:]
+            if invtz:
+                if name == "BEGIN":
+                    if value in ("STANDARD", "DAYLIGHT"):
+                        # Process component
+                        pass
+                    else:
+                        raise ValueError("unknown component: "+value)
+                    comptype = value
+                    founddtstart = False
+                    tzoffsetfrom = None
+                    tzoffsetto = None
+                    rrulelines = []
+                    tzname = None
+                elif name == "END":
+                    if value == "VTIMEZONE":
+                        if comptype:
+                            raise ValueError("component not closed: "+comptype)
+                        if not tzid:
+                            raise ValueError("mandatory TZID not found")
+                        if not comps:
+                            raise ValueError(
+                                "at least one component is needed")
+                        # Process vtimezone
+                        self._vtz[tzid] = _tzicalvtz(tzid, comps)
+                        invtz = False
+                    elif value == comptype:
+                        if not founddtstart:
+                            raise ValueError("mandatory DTSTART not found")
+                        if tzoffsetfrom is None:
+                            raise ValueError(
+                                "mandatory TZOFFSETFROM not found")
+                        if tzoffsetto is None:
+                            raise ValueError(
+                                "mandatory TZOFFSETFROM not found")
+                        # Process component
+                        rr = None
+                        if rrulelines:
+                            rr = rrule.rrulestr("\n".join(rrulelines),
+                                                compatible=True,
+                                                ignoretz=True,
+                                                cache=True)
+                        comp = _tzicalvtzcomp(tzoffsetfrom, tzoffsetto,
+                                              (comptype == "DAYLIGHT"),
+                                              tzname, rr)
+                        comps.append(comp)
+                        comptype = None
+                    else:
+                        raise ValueError("invalid component end: "+value)
+                elif comptype:
+                    if name == "DTSTART":
+                        # DTSTART in VTIMEZONE takes a subset of valid RRULE
+                        # values under RFC 5545.
+                        for parm in parms:
+                            if parm != 'VALUE=DATE-TIME':
+                                msg = ('Unsupported DTSTART param in ' +
+                                       'VTIMEZONE: ' + parm)
+                                raise ValueError(msg)
+                        rrulelines.append(line)
+                        founddtstart = True
+                    elif name in ("RRULE", "RDATE", "EXRULE", "EXDATE"):
+                        rrulelines.append(line)
+                    elif name == "TZOFFSETFROM":
+                        if parms:
+                            raise ValueError(
+                                "unsupported %s parm: %s " % (name, parms[0]))
+                        tzoffsetfrom = self._parse_offset(value)
+                    elif name == "TZOFFSETTO":
+                        if parms:
+                            raise ValueError(
+                                "unsupported TZOFFSETTO parm: "+parms[0])
+                        tzoffsetto = self._parse_offset(value)
+                    elif name == "TZNAME":
+                        if parms:
+                            raise ValueError(
+                                "unsupported TZNAME parm: "+parms[0])
+                        tzname = value
+                    elif name == "COMMENT":
+                        pass
+                    else:
+                        raise ValueError("unsupported property: "+name)
+                else:
+                    if name == "TZID":
+                        if parms:
+                            raise ValueError(
+                                "unsupported TZID parm: "+parms[0])
+                        tzid = value
+                    elif name in ("TZURL", "LAST-MODIFIED", "COMMENT"):
+                        pass
+                    else:
+                        raise ValueError("unsupported property: "+name)
+            elif name == "BEGIN" and value == "VTIMEZONE":
+                tzid = None
+                comps = []
+                invtz = True
+
+    def __repr__(self):
+        return "%s(%s)" % (self.__class__.__name__, repr(self._s))
+
+
+if sys.platform != "win32":
+    TZFILES = ["/etc/localtime", "localtime"]
+    TZPATHS = ["/usr/share/zoneinfo",
+               "/usr/lib/zoneinfo",
+               "/usr/share/lib/zoneinfo",
+               "/etc/zoneinfo"]
+else:
+    TZFILES = []
+    TZPATHS = []
+
+
+def __get_gettz():
+    tzlocal_classes = (tzlocal,)
+    if tzwinlocal is not None:
+        tzlocal_classes += (tzwinlocal,)
+
+    class GettzFunc(object):
+        """
+        Retrieve a time zone object from a string representation
+
+        This function is intended to retrieve the :py:class:`tzinfo` subclass
+        that best represents the time zone that would be used if a POSIX
+        `TZ variable`_ were set to the same value.
+
+        If no argument or an empty string is passed to ``gettz``, local time
+        is returned:
+
+        .. code-block:: python3
+
+            >>> gettz()
+            tzfile('/etc/localtime')
+
+        This function is also the preferred way to map IANA tz database keys
+        to :class:`tzfile` objects:
+
+        .. code-block:: python3
+
+            >>> gettz('Pacific/Kiritimati')
+            tzfile('/usr/share/zoneinfo/Pacific/Kiritimati')
+
+        On Windows, the standard is extended to include the Windows-specific
+        zone names provided by the operating system:
+
+        .. code-block:: python3
+
+            >>> gettz('Egypt Standard Time')
+            tzwin('Egypt Standard Time')
+
+        Passing a GNU ``TZ`` style string time zone specification returns a
+        :class:`tzstr` object:
+
+        .. code-block:: python3
+
+            >>> gettz('AEST-10AEDT-11,M10.1.0/2,M4.1.0/3')
+            tzstr('AEST-10AEDT-11,M10.1.0/2,M4.1.0/3')
+
+        :param name:
+            A time zone name (IANA, or, on Windows, Windows keys), location of
+            a ``tzfile(5)`` zoneinfo file or ``TZ`` variable style time zone
+            specifier. An empty string, no argument or ``None`` is interpreted
+            as local time.
+
+        :return:
+            Returns an instance of one of ``dateutil``'s :py:class:`tzinfo`
+            subclasses.
+
+        .. versionchanged:: 2.7.0
+
+            After version 2.7.0, any two calls to ``gettz`` using the same
+            input strings will return the same object:
+
+            .. code-block:: python3
+
+                >>> tz.gettz('America/Chicago') is tz.gettz('America/Chicago')
+                True
+
+            In addition to improving performance, this ensures that
+            `"same zone" semantics`_ are used for datetimes in the same zone.
+
+
+        .. _`TZ variable`:
+            https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html
+
+        .. _`"same zone" semantics`:
+            https://blog.ganssle.io/articles/2018/02/aware-datetime-arithmetic.html
+        """
+        def __init__(self):
+
+            self.__instances = weakref.WeakValueDictionary()
+            self.__strong_cache_size = 8
+            self.__strong_cache = OrderedDict()
+            self._cache_lock = _thread.allocate_lock()
+
+        def __call__(self, name=None):
+            with self._cache_lock:
+                rv = self.__instances.get(name, None)
+
+                if rv is None:
+                    rv = self.nocache(name=name)
+                    if not (name is None
+                            or isinstance(rv, tzlocal_classes)
+                            or rv is None):
+                        # tzlocal is slightly more complicated than the other
+                        # time zone providers because it depends on environment
+                        # at construction time, so don't cache that.
+                        #
+                        # We also cannot store weak references to None, so we
+                        # will also not store that.
+                        self.__instances[name] = rv
+                    else:
+                        # No need for strong caching, return immediately
+                        return rv
+
+                self.__strong_cache[name] = self.__strong_cache.pop(name, rv)
+
+                if len(self.__strong_cache) > self.__strong_cache_size:
+                    self.__strong_cache.popitem(last=False)
+
+            return rv
+
+        def set_cache_size(self, size):
+            with self._cache_lock:
+                self.__strong_cache_size = size
+                while len(self.__strong_cache) > size:
+                    self.__strong_cache.popitem(last=False)
+
+        def cache_clear(self):
+            with self._cache_lock:
+                self.__instances = weakref.WeakValueDictionary()
+                self.__strong_cache.clear()
+
+        @staticmethod
+        def nocache(name=None):
+            """A non-cached version of gettz"""
+            tz = None
+            if not name:
+                try:
+                    name = os.environ["TZ"]
+                except KeyError:
+                    pass
+            if name is None or name in ("", ":"):
+                for filepath in TZFILES:
+                    if not os.path.isabs(filepath):
+                        filename = filepath
+                        for path in TZPATHS:
+                            filepath = os.path.join(path, filename)
+                            if os.path.isfile(filepath):
+                                break
+                        else:
+                            continue
+                    if os.path.isfile(filepath):
+                        try:
+                            tz = tzfile(filepath)
+                            break
+                        except (IOError, OSError, ValueError):
+                            pass
+                else:
+                    tz = tzlocal()
+            else:
+                try:
+                    if name.startswith(":"):
+                        name = name[1:]
+                except TypeError as e:
+                    if isinstance(name, bytes):
+                        new_msg = "gettz argument should be str, not bytes"
+                        six.raise_from(TypeError(new_msg), e)
+                    else:
+                        raise
+                if os.path.isabs(name):
+                    if os.path.isfile(name):
+                        tz = tzfile(name)
+                    else:
+                        tz = None
+                else:
+                    for path in TZPATHS:
+                        filepath = os.path.join(path, name)
+                        if not os.path.isfile(filepath):
+                            filepath = filepath.replace(' ', '_')
+                            if not os.path.isfile(filepath):
+                                continue
+                        try:
+                            tz = tzfile(filepath)
+                            break
+                        except (IOError, OSError, ValueError):
+                            pass
+                    else:
+                        tz = None
+                        if tzwin is not None:
+                            try:
+                                tz = tzwin(name)
+                            except (WindowsError, UnicodeEncodeError):
+                                # UnicodeEncodeError is for Python 2.7 compat
+                                tz = None
+
+                        if not tz:
+                            from dateutil.zoneinfo import get_zonefile_instance
+                            tz = get_zonefile_instance().get(name)
+
+                        if not tz:
+                            for c in name:
+                                # name is not a tzstr unless it has at least
+                                # one offset. For short values of "name", an
+                                # explicit for loop seems to be the fastest way
+                                # To determine if a string contains a digit
+                                if c in "0123456789":
+                                    try:
+                                        tz = tzstr(name)
+                                    except ValueError:
+                                        pass
+                                    break
+                            else:
+                                if name in ("GMT", "UTC"):
+                                    tz = UTC
+                                elif name in time.tzname:
+                                    tz = tzlocal()
+            return tz
+
+    return GettzFunc()
+
+
+gettz = __get_gettz()
+del __get_gettz
+
+
+def datetime_exists(dt, tz=None):
+    """
+    Given a datetime and a time zone, determine whether or not a given datetime
+    would fall in a gap.
+
+    :param dt:
+        A :class:`datetime.datetime` (whose time zone will be ignored if ``tz``
+        is provided.)
+
+    :param tz:
+        A :class:`datetime.tzinfo` with support for the ``fold`` attribute. If
+        ``None`` or not provided, the datetime's own time zone will be used.
+
+    :return:
+        Returns a boolean value whether or not the "wall time" exists in
+        ``tz``.
+
+    .. versionadded:: 2.7.0
+    """
+    if tz is None:
+        if dt.tzinfo is None:
+            raise ValueError('Datetime is naive and no time zone provided.')
+        tz = dt.tzinfo
+
+    dt = dt.replace(tzinfo=None)
+
+    # This is essentially a test of whether or not the datetime can survive
+    # a round trip to UTC.
+    dt_rt = dt.replace(tzinfo=tz).astimezone(UTC).astimezone(tz)
+    dt_rt = dt_rt.replace(tzinfo=None)
+
+    return dt == dt_rt
+
+
+def datetime_ambiguous(dt, tz=None):
+    """
+    Given a datetime and a time zone, determine whether or not a given datetime
+    is ambiguous (i.e if there are two times differentiated only by their DST
+    status).
+
+    :param dt:
+        A :class:`datetime.datetime` (whose time zone will be ignored if ``tz``
+        is provided.)
+
+    :param tz:
+        A :class:`datetime.tzinfo` with support for the ``fold`` attribute. If
+        ``None`` or not provided, the datetime's own time zone will be used.
+
+    :return:
+        Returns a boolean value whether or not the "wall time" is ambiguous in
+        ``tz``.
+
+    .. versionadded:: 2.6.0
+    """
+    if tz is None:
+        if dt.tzinfo is None:
+            raise ValueError('Datetime is naive and no time zone provided.')
+
+        tz = dt.tzinfo
+
+    # If a time zone defines its own "is_ambiguous" function, we'll use that.
+    is_ambiguous_fn = getattr(tz, 'is_ambiguous', None)
+    if is_ambiguous_fn is not None:
+        try:
+            return tz.is_ambiguous(dt)
+        except Exception:
+            pass
+
+    # If it doesn't come out and tell us it's ambiguous, we'll just check if
+    # the fold attribute has any effect on this particular date and time.
+    dt = dt.replace(tzinfo=tz)
+    wall_0 = enfold(dt, fold=0)
+    wall_1 = enfold(dt, fold=1)
+
+    same_offset = wall_0.utcoffset() == wall_1.utcoffset()
+    same_dst = wall_0.dst() == wall_1.dst()
+
+    return not (same_offset and same_dst)
+
+
+def resolve_imaginary(dt):
+    """
+    Given a datetime that may be imaginary, return an existing datetime.
+
+    This function assumes that an imaginary datetime represents what the
+    wall time would be in a zone had the offset transition not occurred, so
+    it will always fall forward by the transition's change in offset.
+
+    .. doctest::
+
+        >>> from dateutil import tz
+        >>> from datetime import datetime
+        >>> NYC = tz.gettz('America/New_York')
+        >>> print(tz.resolve_imaginary(datetime(2017, 3, 12, 2, 30, tzinfo=NYC)))
+        2017-03-12 03:30:00-04:00
+
+        >>> KIR = tz.gettz('Pacific/Kiritimati')
+        >>> print(tz.resolve_imaginary(datetime(1995, 1, 1, 12, 30, tzinfo=KIR)))
+        1995-01-02 12:30:00+14:00
+
+    As a note, :func:`datetime.astimezone` is guaranteed to produce a valid,
+    existing datetime, so a round-trip to and from UTC is sufficient to get
+    an extant datetime, however, this generally "falls back" to an earlier time
+    rather than falling forward to the STD side (though no guarantees are made
+    about this behavior).
+
+    :param dt:
+        A :class:`datetime.datetime` which may or may not exist.
+
+    :return:
+        Returns an existing :class:`datetime.datetime`. If ``dt`` was not
+        imaginary, the datetime returned is guaranteed to be the same object
+        passed to the function.
+
+    .. versionadded:: 2.7.0
+    """
+    if dt.tzinfo is not None and not datetime_exists(dt):
+
+        curr_offset = (dt + datetime.timedelta(hours=24)).utcoffset()
+        old_offset = (dt - datetime.timedelta(hours=24)).utcoffset()
+
+        dt += curr_offset - old_offset
+
+    return dt
+
+
+def _datetime_to_timestamp(dt):
+    """
+    Convert a :class:`datetime.datetime` object to an epoch timestamp in
+    seconds since January 1, 1970, ignoring the time zone.
+    """
+    return (dt.replace(tzinfo=None) - EPOCH).total_seconds()
+
+
+if sys.version_info >= (3, 6):
+    def _get_supported_offset(second_offset):
+        return second_offset
+else:
+    def _get_supported_offset(second_offset):
+        # For python pre-3.6, round to full-minutes if that's not the case.
+        # Python's datetime doesn't accept sub-minute timezones. Check
+        # http://python.org/sf/1447945 or https://bugs.python.org/issue5288
+        # for some information.
+        old_offset = second_offset
+        calculated_offset = 60 * ((second_offset + 30) // 60)
+        return calculated_offset
+
+
+try:
+    # Python 3.7 feature
+    from contextlib import nullcontext as _nullcontext
+except ImportError:
+    class _nullcontext(object):
+        """
+        Class for wrapping contexts so that they are passed through in a
+        with statement.
+        """
+        def __init__(self, context):
+            self.context = context
+
+        def __enter__(self):
+            return self.context
+
+        def __exit__(*args, **kwargs):
+            pass
+
+# vim:ts=4:sw=4:et
diff --git a/venv/Lib/site-packages/dateutil/tz/win.py b/venv/Lib/site-packages/dateutil/tz/win.py
new file mode 100644
index 0000000..cde07ba
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/tz/win.py
@@ -0,0 +1,370 @@
+# -*- coding: utf-8 -*-
+"""
+This module provides an interface to the native time zone data on Windows,
+including :py:class:`datetime.tzinfo` implementations.
+
+Attempting to import this module on a non-Windows platform will raise an
+:py:obj:`ImportError`.
+"""
+# This code was originally contributed by Jeffrey Harris.
+import datetime
+import struct
+
+from six.moves import winreg
+from six import text_type
+
+try:
+    import ctypes
+    from ctypes import wintypes
+except ValueError:
+    # ValueError is raised on non-Windows systems for some horrible reason.
+    raise ImportError("Running tzwin on non-Windows system")
+
+from ._common import tzrangebase
+
+__all__ = ["tzwin", "tzwinlocal", "tzres"]
+
+ONEWEEK = datetime.timedelta(7)
+
+TZKEYNAMENT = r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones"
+TZKEYNAME9X = r"SOFTWARE\Microsoft\Windows\CurrentVersion\Time Zones"
+TZLOCALKEYNAME = r"SYSTEM\CurrentControlSet\Control\TimeZoneInformation"
+
+
+def _settzkeyname():
+    handle = winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE)
+    try:
+        winreg.OpenKey(handle, TZKEYNAMENT).Close()
+        TZKEYNAME = TZKEYNAMENT
+    except WindowsError:
+        TZKEYNAME = TZKEYNAME9X
+    handle.Close()
+    return TZKEYNAME
+
+
+TZKEYNAME = _settzkeyname()
+
+
+class tzres(object):
+    """
+    Class for accessing ``tzres.dll``, which contains timezone name related
+    resources.
+
+    .. versionadded:: 2.5.0
+    """
+    p_wchar = ctypes.POINTER(wintypes.WCHAR)        # Pointer to a wide char
+
+    def __init__(self, tzres_loc='tzres.dll'):
+        # Load the user32 DLL so we can load strings from tzres
+        user32 = ctypes.WinDLL('user32')
+
+        # Specify the LoadStringW function
+        user32.LoadStringW.argtypes = (wintypes.HINSTANCE,
+                                       wintypes.UINT,
+                                       wintypes.LPWSTR,
+                                       ctypes.c_int)
+
+        self.LoadStringW = user32.LoadStringW
+        self._tzres = ctypes.WinDLL(tzres_loc)
+        self.tzres_loc = tzres_loc
+
+    def load_name(self, offset):
+        """
+        Load a timezone name from a DLL offset (integer).
+
+        >>> from dateutil.tzwin import tzres
+        >>> tzr = tzres()
+        >>> print(tzr.load_name(112))
+        'Eastern Standard Time'
+
+        :param offset:
+            A positive integer value referring to a string from the tzres dll.
+
+        .. note::
+
+            Offsets found in the registry are generally of the form
+            ``@tzres.dll,-114``. The offset in this case is 114, not -114.
+
+        """
+        resource = self.p_wchar()
+        lpBuffer = ctypes.cast(ctypes.byref(resource), wintypes.LPWSTR)
+        nchar = self.LoadStringW(self._tzres._handle, offset, lpBuffer, 0)
+        return resource[:nchar]
+
+    def name_from_string(self, tzname_str):
+        """
+        Parse strings as returned from the Windows registry into the time zone
+        name as defined in the registry.
+
+        >>> from dateutil.tzwin import tzres
+        >>> tzr = tzres()
+        >>> print(tzr.name_from_string('@tzres.dll,-251'))
+        'Dateline Daylight Time'
+        >>> print(tzr.name_from_string('Eastern Standard Time'))
+        'Eastern Standard Time'
+
+        :param tzname_str:
+            A timezone name string as returned from a Windows registry key.
+
+        :return:
+            Returns the localized timezone string from tzres.dll if the string
+            is of the form `@tzres.dll,-offset`, else returns the input string.
+        """
+        if not tzname_str.startswith('@'):
+            return tzname_str
+
+        name_splt = tzname_str.split(',-')
+        try:
+            offset = int(name_splt[1])
+        except:
+            raise ValueError("Malformed timezone string.")
+
+        return self.load_name(offset)
+
+
+class tzwinbase(tzrangebase):
+    """tzinfo class based on win32's timezones available in the registry."""
+    def __init__(self):
+        raise NotImplementedError('tzwinbase is an abstract base class')
+
+    def __eq__(self, other):
+        # Compare on all relevant dimensions, including name.
+        if not isinstance(other, tzwinbase):
+            return NotImplemented
+
+        return  (self._std_offset == other._std_offset and
+                 self._dst_offset == other._dst_offset and
+                 self._stddayofweek == other._stddayofweek and
+                 self._dstdayofweek == other._dstdayofweek and
+                 self._stdweeknumber == other._stdweeknumber and
+                 self._dstweeknumber == other._dstweeknumber and
+                 self._stdhour == other._stdhour and
+                 self._dsthour == other._dsthour and
+                 self._stdminute == other._stdminute and
+                 self._dstminute == other._dstminute and
+                 self._std_abbr == other._std_abbr and
+                 self._dst_abbr == other._dst_abbr)
+
+    @staticmethod
+    def list():
+        """Return a list of all time zones known to the system."""
+        with winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE) as handle:
+            with winreg.OpenKey(handle, TZKEYNAME) as tzkey:
+                result = [winreg.EnumKey(tzkey, i)
+                          for i in range(winreg.QueryInfoKey(tzkey)[0])]
+        return result
+
+    def display(self):
+        """
+        Return the display name of the time zone.
+        """
+        return self._display
+
+    def transitions(self, year):
+        """
+        For a given year, get the DST on and off transition times, expressed
+        always on the standard time side. For zones with no transitions, this
+        function returns ``None``.
+
+        :param year:
+            The year whose transitions you would like to query.
+
+        :return:
+            Returns a :class:`tuple` of :class:`datetime.datetime` objects,
+            ``(dston, dstoff)`` for zones with an annual DST transition, or
+            ``None`` for fixed offset zones.
+        """
+
+        if not self.hasdst:
+            return None
+
+        dston = picknthweekday(year, self._dstmonth, self._dstdayofweek,
+                               self._dsthour, self._dstminute,
+                               self._dstweeknumber)
+
+        dstoff = picknthweekday(year, self._stdmonth, self._stddayofweek,
+                                self._stdhour, self._stdminute,
+                                self._stdweeknumber)
+
+        # Ambiguous dates default to the STD side
+        dstoff -= self._dst_base_offset
+
+        return dston, dstoff
+
+    def _get_hasdst(self):
+        return self._dstmonth != 0
+
+    @property
+    def _dst_base_offset(self):
+        return self._dst_base_offset_
+
+
+class tzwin(tzwinbase):
+    """
+    Time zone object created from the zone info in the Windows registry
+
+    These are similar to :py:class:`dateutil.tz.tzrange` objects in that
+    the time zone data is provided in the format of a single offset rule
+    for either 0 or 2 time zone transitions per year.
+
+    :param: name
+        The name of a Windows time zone key, e.g. "Eastern Standard Time".
+        The full list of keys can be retrieved with :func:`tzwin.list`.
+    """
+
+    def __init__(self, name):
+        self._name = name
+
+        with winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE) as handle:
+            tzkeyname = text_type("{kn}\\{name}").format(kn=TZKEYNAME, name=name)
+            with winreg.OpenKey(handle, tzkeyname) as tzkey:
+                keydict = valuestodict(tzkey)
+
+        self._std_abbr = keydict["Std"]
+        self._dst_abbr = keydict["Dlt"]
+
+        self._display = keydict["Display"]
+
+        # See http://ww_winreg.jsiinc.com/SUBA/tip0300/rh0398.htm
+        tup = struct.unpack("=3l16h", keydict["TZI"])
+        stdoffset = -tup[0]-tup[1]          # Bias + StandardBias * -1
+        dstoffset = stdoffset-tup[2]        # + DaylightBias * -1
+        self._std_offset = datetime.timedelta(minutes=stdoffset)
+        self._dst_offset = datetime.timedelta(minutes=dstoffset)
+
+        # for the meaning see the win32 TIME_ZONE_INFORMATION structure docs
+        # http://msdn.microsoft.com/en-us/library/windows/desktop/ms725481(v=vs.85).aspx
+        (self._stdmonth,
+         self._stddayofweek,   # Sunday = 0
+         self._stdweeknumber,  # Last = 5
+         self._stdhour,
+         self._stdminute) = tup[4:9]
+
+        (self._dstmonth,
+         self._dstdayofweek,   # Sunday = 0
+         self._dstweeknumber,  # Last = 5
+         self._dsthour,
+         self._dstminute) = tup[12:17]
+
+        self._dst_base_offset_ = self._dst_offset - self._std_offset
+        self.hasdst = self._get_hasdst()
+
+    def __repr__(self):
+        return "tzwin(%s)" % repr(self._name)
+
+    def __reduce__(self):
+        return (self.__class__, (self._name,))
+
+
+class tzwinlocal(tzwinbase):
+    """
+    Class representing the local time zone information in the Windows registry
+
+    While :class:`dateutil.tz.tzlocal` makes system calls (via the :mod:`time`
+    module) to retrieve time zone information, ``tzwinlocal`` retrieves the
+    rules directly from the Windows registry and creates an object like
+    :class:`dateutil.tz.tzwin`.
+
+    Because Windows does not have an equivalent of :func:`time.tzset`, on
+    Windows, :class:`dateutil.tz.tzlocal` instances will always reflect the
+    time zone settings *at the time that the process was started*, meaning
+    changes to the machine's time zone settings during the run of a program
+    on Windows will **not** be reflected by :class:`dateutil.tz.tzlocal`.
+    Because ``tzwinlocal`` reads the registry directly, it is unaffected by
+    this issue.
+    """
+    def __init__(self):
+        with winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE) as handle:
+            with winreg.OpenKey(handle, TZLOCALKEYNAME) as tzlocalkey:
+                keydict = valuestodict(tzlocalkey)
+
+            self._std_abbr = keydict["StandardName"]
+            self._dst_abbr = keydict["DaylightName"]
+
+            try:
+                tzkeyname = text_type('{kn}\\{sn}').format(kn=TZKEYNAME,
+                                                          sn=self._std_abbr)
+                with winreg.OpenKey(handle, tzkeyname) as tzkey:
+                    _keydict = valuestodict(tzkey)
+                    self._display = _keydict["Display"]
+            except OSError:
+                self._display = None
+
+        stdoffset = -keydict["Bias"]-keydict["StandardBias"]
+        dstoffset = stdoffset-keydict["DaylightBias"]
+
+        self._std_offset = datetime.timedelta(minutes=stdoffset)
+        self._dst_offset = datetime.timedelta(minutes=dstoffset)
+
+        # For reasons unclear, in this particular key, the day of week has been
+        # moved to the END of the SYSTEMTIME structure.
+        tup = struct.unpack("=8h", keydict["StandardStart"])
+
+        (self._stdmonth,
+         self._stdweeknumber,  # Last = 5
+         self._stdhour,
+         self._stdminute) = tup[1:5]
+
+        self._stddayofweek = tup[7]
+
+        tup = struct.unpack("=8h", keydict["DaylightStart"])
+
+        (self._dstmonth,
+         self._dstweeknumber,  # Last = 5
+         self._dsthour,
+         self._dstminute) = tup[1:5]
+
+        self._dstdayofweek = tup[7]
+
+        self._dst_base_offset_ = self._dst_offset - self._std_offset
+        self.hasdst = self._get_hasdst()
+
+    def __repr__(self):
+        return "tzwinlocal()"
+
+    def __str__(self):
+        # str will return the standard name, not the daylight name.
+        return "tzwinlocal(%s)" % repr(self._std_abbr)
+
+    def __reduce__(self):
+        return (self.__class__, ())
+
+
+def picknthweekday(year, month, dayofweek, hour, minute, whichweek):
+    """ dayofweek == 0 means Sunday, whichweek 5 means last instance """
+    first = datetime.datetime(year, month, 1, hour, minute)
+
+    # This will work if dayofweek is ISO weekday (1-7) or Microsoft-style (0-6),
+    # Because 7 % 7 = 0
+    weekdayone = first.replace(day=((dayofweek - first.isoweekday()) % 7) + 1)
+    wd = weekdayone + ((whichweek - 1) * ONEWEEK)
+    if (wd.month != month):
+        wd -= ONEWEEK
+
+    return wd
+
+
+def valuestodict(key):
+    """Convert a registry key's values to a dictionary."""
+    dout = {}
+    size = winreg.QueryInfoKey(key)[1]
+    tz_res = None
+
+    for i in range(size):
+        key_name, value, dtype = winreg.EnumValue(key, i)
+        if dtype == winreg.REG_DWORD or dtype == winreg.REG_DWORD_LITTLE_ENDIAN:
+            # If it's a DWORD (32-bit integer), it's stored as unsigned - convert
+            # that to a proper signed integer
+            if value & (1 << 31):
+                value = value - (1 << 32)
+        elif dtype == winreg.REG_SZ:
+            # If it's a reference to the tzres DLL, load the actual string
+            if value.startswith('@tzres'):
+                tz_res = tz_res or tzres()
+                value = tz_res.name_from_string(value)
+
+            value = value.rstrip('\x00')    # Remove trailing nulls
+
+        dout[key_name] = value
+
+    return dout
diff --git a/venv/Lib/site-packages/dateutil/tzwin.py b/venv/Lib/site-packages/dateutil/tzwin.py
new file mode 100644
index 0000000..cebc673
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/tzwin.py
@@ -0,0 +1,2 @@
+# tzwin has moved to dateutil.tz.win
+from .tz.win import *
diff --git a/venv/Lib/site-packages/dateutil/utils.py b/venv/Lib/site-packages/dateutil/utils.py
new file mode 100644
index 0000000..dd2d245
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/utils.py
@@ -0,0 +1,71 @@
+# -*- coding: utf-8 -*-
+"""
+This module offers general convenience and utility functions for dealing with
+datetimes.
+
+.. versionadded:: 2.7.0
+"""
+from __future__ import unicode_literals
+
+from datetime import datetime, time
+
+
+def today(tzinfo=None):
+    """
+    Returns a :py:class:`datetime` representing the current day at midnight
+
+    :param tzinfo:
+        The time zone to attach (also used to determine the current day).
+
+    :return:
+        A :py:class:`datetime.datetime` object representing the current day
+        at midnight.
+    """
+
+    dt = datetime.now(tzinfo)
+    return datetime.combine(dt.date(), time(0, tzinfo=tzinfo))
+
+
+def default_tzinfo(dt, tzinfo):
+    """
+    Sets the ``tzinfo`` parameter on naive datetimes only
+
+    This is useful for example when you are provided a datetime that may have
+    either an implicit or explicit time zone, such as when parsing a time zone
+    string.
+
+    .. doctest::
+
+        >>> from dateutil.tz import tzoffset
+        >>> from dateutil.parser import parse
+        >>> from dateutil.utils import default_tzinfo
+        >>> dflt_tz = tzoffset("EST", -18000)
+        >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))
+        2014-01-01 12:30:00+00:00
+        >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))
+        2014-01-01 12:30:00-05:00
+
+    :param dt:
+        The datetime on which to replace the time zone
+
+    :param tzinfo:
+        The :py:class:`datetime.tzinfo` subclass instance to assign to
+        ``dt`` if (and only if) it is naive.
+
+    :return:
+        Returns an aware :py:class:`datetime.datetime`.
+    """
+    if dt.tzinfo is not None:
+        return dt
+    else:
+        return dt.replace(tzinfo=tzinfo)
+
+
+def within_delta(dt1, dt2, delta):
+    """
+    Useful for comparing two datetimes that may have a negligible difference
+    to be considered equal.
+    """
+    delta = abs(delta)
+    difference = dt1 - dt2
+    return -delta <= difference <= delta
diff --git a/venv/Lib/site-packages/dateutil/zoneinfo/__init__.py b/venv/Lib/site-packages/dateutil/zoneinfo/__init__.py
new file mode 100644
index 0000000..34f11ad
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/zoneinfo/__init__.py
@@ -0,0 +1,167 @@
+# -*- coding: utf-8 -*-
+import warnings
+import json
+
+from tarfile import TarFile
+from pkgutil import get_data
+from io import BytesIO
+
+from dateutil.tz import tzfile as _tzfile
+
+__all__ = ["get_zonefile_instance", "gettz", "gettz_db_metadata"]
+
+ZONEFILENAME = "dateutil-zoneinfo.tar.gz"
+METADATA_FN = 'METADATA'
+
+
+class tzfile(_tzfile):
+    def __reduce__(self):
+        return (gettz, (self._filename,))
+
+
+def getzoneinfofile_stream():
+    try:
+        return BytesIO(get_data(__name__, ZONEFILENAME))
+    except IOError as e:  # TODO  switch to FileNotFoundError?
+        warnings.warn("I/O error({0}): {1}".format(e.errno, e.strerror))
+        return None
+
+
+class ZoneInfoFile(object):
+    def __init__(self, zonefile_stream=None):
+        if zonefile_stream is not None:
+            with TarFile.open(fileobj=zonefile_stream) as tf:
+                self.zones = {zf.name: tzfile(tf.extractfile(zf), filename=zf.name)
+                              for zf in tf.getmembers()
+                              if zf.isfile() and zf.name != METADATA_FN}
+                # deal with links: They'll point to their parent object. Less
+                # waste of memory
+                links = {zl.name: self.zones[zl.linkname]
+                         for zl in tf.getmembers() if
+                         zl.islnk() or zl.issym()}
+                self.zones.update(links)
+                try:
+                    metadata_json = tf.extractfile(tf.getmember(METADATA_FN))
+                    metadata_str = metadata_json.read().decode('UTF-8')
+                    self.metadata = json.loads(metadata_str)
+                except KeyError:
+                    # no metadata in tar file
+                    self.metadata = None
+        else:
+            self.zones = {}
+            self.metadata = None
+
+    def get(self, name, default=None):
+        """
+        Wrapper for :func:`ZoneInfoFile.zones.get`. This is a convenience method
+        for retrieving zones from the zone dictionary.
+
+        :param name:
+            The name of the zone to retrieve. (Generally IANA zone names)
+
+        :param default:
+            The value to return in the event of a missing key.
+
+        .. versionadded:: 2.6.0
+
+        """
+        return self.zones.get(name, default)
+
+
+# The current API has gettz as a module function, although in fact it taps into
+# a stateful class. So as a workaround for now, without changing the API, we
+# will create a new "global" class instance the first time a user requests a
+# timezone. Ugly, but adheres to the api.
+#
+# TODO: Remove after deprecation period.
+_CLASS_ZONE_INSTANCE = []
+
+
+def get_zonefile_instance(new_instance=False):
+    """
+    This is a convenience function which provides a :class:`ZoneInfoFile`
+    instance using the data provided by the ``dateutil`` package. By default, it
+    caches a single instance of the ZoneInfoFile object and returns that.
+
+    :param new_instance:
+        If ``True``, a new instance of :class:`ZoneInfoFile` is instantiated and
+        used as the cached instance for the next call. Otherwise, new instances
+        are created only as necessary.
+
+    :return:
+        Returns a :class:`ZoneInfoFile` object.
+
+    .. versionadded:: 2.6
+    """
+    if new_instance:
+        zif = None
+    else:
+        zif = getattr(get_zonefile_instance, '_cached_instance', None)
+
+    if zif is None:
+        zif = ZoneInfoFile(getzoneinfofile_stream())
+
+        get_zonefile_instance._cached_instance = zif
+
+    return zif
+
+
+def gettz(name):
+    """
+    This retrieves a time zone from the local zoneinfo tarball that is packaged
+    with dateutil.
+
+    :param name:
+        An IANA-style time zone name, as found in the zoneinfo file.
+
+    :return:
+        Returns a :class:`dateutil.tz.tzfile` time zone object.
+
+    .. warning::
+        It is generally inadvisable to use this function, and it is only
+        provided for API compatibility with earlier versions. This is *not*
+        equivalent to ``dateutil.tz.gettz()``, which selects an appropriate
+        time zone based on the inputs, favoring system zoneinfo. This is ONLY
+        for accessing the dateutil-specific zoneinfo (which may be out of
+        date compared to the system zoneinfo).
+
+    .. deprecated:: 2.6
+        If you need to use a specific zoneinfofile over the system zoneinfo,
+        instantiate a :class:`dateutil.zoneinfo.ZoneInfoFile` object and call
+        :func:`dateutil.zoneinfo.ZoneInfoFile.get(name)` instead.
+
+        Use :func:`get_zonefile_instance` to retrieve an instance of the
+        dateutil-provided zoneinfo.
+    """
+    warnings.warn("zoneinfo.gettz() will be removed in future versions, "
+                  "to use the dateutil-provided zoneinfo files, instantiate a "
+                  "ZoneInfoFile object and use ZoneInfoFile.zones.get() "
+                  "instead. See the documentation for details.",
+                  DeprecationWarning)
+
+    if len(_CLASS_ZONE_INSTANCE) == 0:
+        _CLASS_ZONE_INSTANCE.append(ZoneInfoFile(getzoneinfofile_stream()))
+    return _CLASS_ZONE_INSTANCE[0].zones.get(name)
+
+
+def gettz_db_metadata():
+    """ Get the zonefile metadata
+
+    See `zonefile_metadata`_
+
+    :returns:
+        A dictionary with the database metadata
+
+    .. deprecated:: 2.6
+        See deprecation warning in :func:`zoneinfo.gettz`. To get metadata,
+        query the attribute ``zoneinfo.ZoneInfoFile.metadata``.
+    """
+    warnings.warn("zoneinfo.gettz_db_metadata() will be removed in future "
+                  "versions, to use the dateutil-provided zoneinfo files, "
+                  "ZoneInfoFile object and query the 'metadata' attribute "
+                  "instead. See the documentation for details.",
+                  DeprecationWarning)
+
+    if len(_CLASS_ZONE_INSTANCE) == 0:
+        _CLASS_ZONE_INSTANCE.append(ZoneInfoFile(getzoneinfofile_stream()))
+    return _CLASS_ZONE_INSTANCE[0].metadata
diff --git a/venv/Lib/site-packages/dateutil/zoneinfo/__pycache__/__init__.cpython-311.pyc b/venv/Lib/site-packages/dateutil/zoneinfo/__pycache__/__init__.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..f8b85aefeb807069d953b5ac7ec8f1c1f9f39401
GIT binary patch
literal 8483
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
T7`X1W$OzNKbd||gLO1m9HB2jv

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/zoneinfo/__pycache__/rebuild.cpython-311.pyc b/venv/Lib/site-packages/dateutil/zoneinfo/__pycache__/rebuild.cpython-311.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..d2617798d70691848e31d64f3e1c365a2959e711
GIT binary patch
literal 4653
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
T=eZi$29NnT$lZ?vXMg_%Zt-t>

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/zoneinfo/dateutil-zoneinfo.tar.gz b/venv/Lib/site-packages/dateutil/zoneinfo/dateutil-zoneinfo.tar.gz
new file mode 100644
index 0000000000000000000000000000000000000000..524c48e12db7dfe159f282e4664f71ce249e1970
GIT binary patch
literal 174394
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

literal 0
HcmV?d00001

diff --git a/venv/Lib/site-packages/dateutil/zoneinfo/rebuild.py b/venv/Lib/site-packages/dateutil/zoneinfo/rebuild.py
new file mode 100644
index 0000000..684c658
--- /dev/null
+++ b/venv/Lib/site-packages/dateutil/zoneinfo/rebuild.py
@@ -0,0 +1,75 @@
+import logging
+import os
+import tempfile
+import shutil
+import json
+from subprocess import check_call, check_output
+from tarfile import TarFile
+
+from dateutil.zoneinfo import METADATA_FN, ZONEFILENAME
+
+
+def rebuild(filename, tag=None, format="gz", zonegroups=[], metadata=None):
+    """Rebuild the internal timezone info in dateutil/zoneinfo/zoneinfo*tar*
+
+    filename is the timezone tarball from ``ftp.iana.org/tz``.
+
+    """
+    tmpdir = tempfile.mkdtemp()
+    zonedir = os.path.join(tmpdir, "zoneinfo")
+    moduledir = os.path.dirname(__file__)
+    try:
+        with TarFile.open(filename) as tf:
+            for name in zonegroups:
+                tf.extract(name, tmpdir)
+            filepaths = [os.path.join(tmpdir, n) for n in zonegroups]
+
+            _run_zic(zonedir, filepaths)
+
+        # write metadata file
+        with open(os.path.join(zonedir, METADATA_FN), 'w') as f:
+            json.dump(metadata, f, indent=4, sort_keys=True)
+        target = os.path.join(moduledir, ZONEFILENAME)
+        with TarFile.open(target, "w:%s" % format) as tf:
+            for entry in os.listdir(zonedir):
+                entrypath = os.path.join(zonedir, entry)
+                tf.add(entrypath, entry)
+    finally:
+        shutil.rmtree(tmpdir)
+
+
+def _run_zic(zonedir, filepaths):
+    """Calls the ``zic`` compiler in a compatible way to get a "fat" binary.
+
+    Recent versions of ``zic`` default to ``-b slim``, while older versions
+    don't even have the ``-b`` option (but default to "fat" binaries). The
+    current version of dateutil does not support Version 2+ TZif files, which
+    causes problems when used in conjunction with "slim" binaries, so this
+    function is used to ensure that we always get a "fat" binary.
+    """
+
+    try:
+        help_text = check_output(["zic", "--help"])
+    except OSError as e:
+        _print_on_nosuchfile(e)
+        raise
+
+    if b"-b " in help_text:
+        bloat_args = ["-b", "fat"]
+    else:
+        bloat_args = []
+
+    check_call(["zic"] + bloat_args + ["-d", zonedir] + filepaths)
+
+
+def _print_on_nosuchfile(e):
+    """Print helpful troubleshooting message
+
+    e is an exception raised by subprocess.check_call()
+
+    """
+    if e.errno == 2:
+        logging.error(
+            "Could not find zic. Perhaps you need to install "
+            "libc-bin or some other package that provides it, "
+            "or it's not in your PATH?")
diff --git a/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/INSTALLER b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/INSTALLER
new file mode 100644
index 0000000..a1b589e
--- /dev/null
+++ b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/INSTALLER
@@ -0,0 +1 @@
+pip
diff --git a/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/LICENSE b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/LICENSE
new file mode 100644
index 0000000..1e65815
--- /dev/null
+++ b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/LICENSE
@@ -0,0 +1,54 @@
+Copyright 2017- Paul Ganssle <paul@ganssle.io>
+Copyright 2017- dateutil contributors (see AUTHORS file)
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+The above license applies to all contributions after 2017-12-01, as well as
+all contributions that have been re-licensed (see AUTHORS file for the list of
+contributors who have re-licensed their code).
+--------------------------------------------------------------------------------
+dateutil - Extensions to the standard Python datetime module.
+
+Copyright (c) 2003-2011 - Gustavo Niemeyer <gustavo@niemeyer.net>
+Copyright (c) 2012-2014 - Tomi Pieviläinen <tomi.pievilainen@iki.fi>
+Copyright (c) 2014-2016 - Yaron de Leeuw <me@jarondl.net>
+Copyright (c) 2015-     - Paul Ganssle <paul@ganssle.io>
+Copyright (c) 2015-     - dateutil contributors (see AUTHORS file)
+
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+    * Redistributions of source code must retain the above copyright notice,
+      this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above copyright notice,
+      this list of conditions and the following disclaimer in the documentation
+      and/or other materials provided with the distribution.
+    * Neither the name of the copyright holder nor the names of its
+      contributors may be used to endorse or promote products derived from
+      this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+The above BSD License Applies to all code, even that also covered by Apache 2.0.
\ No newline at end of file
diff --git a/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/METADATA b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/METADATA
new file mode 100644
index 0000000..1e46c96
--- /dev/null
+++ b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/METADATA
@@ -0,0 +1,204 @@
+Metadata-Version: 2.1
+Name: python-dateutil
+Version: 2.8.2
+Summary: Extensions to the standard Python datetime module
+Home-page: https://github.com/dateutil/dateutil
+Author: Gustavo Niemeyer
+Author-email: gustavo@niemeyer.net
+Maintainer: Paul Ganssle
+Maintainer-email: dateutil@python.org
+License: Dual License
+Project-URL: Documentation, https://dateutil.readthedocs.io/en/stable/
+Project-URL: Source, https://github.com/dateutil/dateutil
+Platform: UNKNOWN
+Classifier: Development Status :: 5 - Production/Stable
+Classifier: Intended Audience :: Developers
+Classifier: License :: OSI Approved :: BSD License
+Classifier: License :: OSI Approved :: Apache Software License
+Classifier: Programming Language :: Python
+Classifier: Programming Language :: Python :: 2
+Classifier: Programming Language :: Python :: 2.7
+Classifier: Programming Language :: Python :: 3
+Classifier: Programming Language :: Python :: 3.3
+Classifier: Programming Language :: Python :: 3.4
+Classifier: Programming Language :: Python :: 3.5
+Classifier: Programming Language :: Python :: 3.6
+Classifier: Programming Language :: Python :: 3.7
+Classifier: Programming Language :: Python :: 3.8
+Classifier: Programming Language :: Python :: 3.9
+Classifier: Topic :: Software Development :: Libraries
+Requires-Python: !=3.0.*,!=3.1.*,!=3.2.*,>=2.7
+Description-Content-Type: text/x-rst
+License-File: LICENSE
+Requires-Dist: six (>=1.5)
+
+dateutil - powerful extensions to datetime
+==========================================
+
+|pypi| |support| |licence|
+
+|gitter| |readthedocs|
+
+|travis| |appveyor| |pipelines| |coverage|
+
+.. |pypi| image:: https://img.shields.io/pypi/v/python-dateutil.svg?style=flat-square
+    :target: https://pypi.org/project/python-dateutil/
+    :alt: pypi version
+
+.. |support| image:: https://img.shields.io/pypi/pyversions/python-dateutil.svg?style=flat-square
+    :target: https://pypi.org/project/python-dateutil/
+    :alt: supported Python version
+
+.. |travis| image:: https://img.shields.io/travis/dateutil/dateutil/master.svg?style=flat-square&label=Travis%20Build
+    :target: https://travis-ci.org/dateutil/dateutil
+    :alt: travis build status
+
+.. |appveyor| image:: https://img.shields.io/appveyor/ci/dateutil/dateutil/master.svg?style=flat-square&logo=appveyor
+    :target: https://ci.appveyor.com/project/dateutil/dateutil
+    :alt: appveyor build status
+
+.. |pipelines| image:: https://dev.azure.com/pythondateutilazure/dateutil/_apis/build/status/dateutil.dateutil?branchName=master
+    :target: https://dev.azure.com/pythondateutilazure/dateutil/_build/latest?definitionId=1&branchName=master
+    :alt: azure pipelines build status
+
+.. |coverage| image:: https://codecov.io/gh/dateutil/dateutil/branch/master/graphs/badge.svg?branch=master
+    :target: https://codecov.io/gh/dateutil/dateutil?branch=master
+    :alt: Code coverage
+
+.. |gitter| image:: https://badges.gitter.im/dateutil/dateutil.svg
+   :alt: Join the chat at https://gitter.im/dateutil/dateutil
+   :target: https://gitter.im/dateutil/dateutil
+
+.. |licence| image:: https://img.shields.io/pypi/l/python-dateutil.svg?style=flat-square
+    :target: https://pypi.org/project/python-dateutil/
+    :alt: licence
+
+.. |readthedocs| image:: https://img.shields.io/readthedocs/dateutil/latest.svg?style=flat-square&label=Read%20the%20Docs
+   :alt: Read the documentation at https://dateutil.readthedocs.io/en/latest/
+   :target: https://dateutil.readthedocs.io/en/latest/
+
+The `dateutil` module provides powerful extensions to
+the standard `datetime` module, available in Python.
+
+Installation
+============
+`dateutil` can be installed from PyPI using `pip` (note that the package name is
+different from the importable name)::
+
+    pip install python-dateutil
+
+Download
+========
+dateutil is available on PyPI
+https://pypi.org/project/python-dateutil/
+
+The documentation is hosted at:
+https://dateutil.readthedocs.io/en/stable/
+
+Code
+====
+The code and issue tracker are hosted on GitHub:
+https://github.com/dateutil/dateutil/
+
+Features
+========
+
+* Computing of relative deltas (next month, next year,
+  next Monday, last week of month, etc);
+* Computing of relative deltas between two given
+  date and/or datetime objects;
+* Computing of dates based on very flexible recurrence rules,
+  using a superset of the `iCalendar <https://www.ietf.org/rfc/rfc2445.txt>`_
+  specification. Parsing of RFC strings is supported as well.
+* Generic parsing of dates in almost any string format;
+* Timezone (tzinfo) implementations for tzfile(5) format
+  files (/etc/localtime, /usr/share/zoneinfo, etc), TZ
+  environment string (in all known formats), iCalendar
+  format files, given ranges (with help from relative deltas),
+  local machine timezone, fixed offset timezone, UTC timezone,
+  and Windows registry-based time zones.
+* Internal up-to-date world timezone information based on
+  Olson's database.
+* Computing of Easter Sunday dates for any given year,
+  using Western, Orthodox or Julian algorithms;
+* A comprehensive test suite.
+
+Quick example
+=============
+Here's a snapshot, just to give an idea about the power of the
+package. For more examples, look at the documentation.
+
+Suppose you want to know how much time is left, in
+years/months/days/etc, before the next easter happening on a
+year with a Friday 13th in August, and you want to get today's
+date out of the "date" unix system command. Here is the code:
+
+.. code-block:: python3
+
+    >>> from dateutil.relativedelta import *
+    >>> from dateutil.easter import *
+    >>> from dateutil.rrule import *
+    >>> from dateutil.parser import *
+    >>> from datetime import *
+    >>> now = parse("Sat Oct 11 17:13:46 UTC 2003")
+    >>> today = now.date()
+    >>> year = rrule(YEARLY,dtstart=now,bymonth=8,bymonthday=13,byweekday=FR)[0].year
+    >>> rdelta = relativedelta(easter(year), today)
+    >>> print("Today is: %s" % today)
+    Today is: 2003-10-11
+    >>> print("Year with next Aug 13th on a Friday is: %s" % year)
+    Year with next Aug 13th on a Friday is: 2004
+    >>> print("How far is the Easter of that year: %s" % rdelta)
+    How far is the Easter of that year: relativedelta(months=+6)
+    >>> print("And the Easter of that year is: %s" % (today+rdelta))
+    And the Easter of that year is: 2004-04-11
+
+Being exactly 6 months ahead was **really** a coincidence :)
+
+Contributing
+============
+
+We welcome many types of contributions - bug reports, pull requests (code, infrastructure or documentation fixes). For more information about how to contribute to the project, see the ``CONTRIBUTING.md`` file in the repository.
+
+
+Author
+======
+The dateutil module was written by Gustavo Niemeyer <gustavo@niemeyer.net>
+in 2003.
+
+It is maintained by:
+
+* Gustavo Niemeyer <gustavo@niemeyer.net> 2003-2011
+* Tomi Pieviläinen <tomi.pievilainen@iki.fi> 2012-2014
+* Yaron de Leeuw <me@jarondl.net> 2014-2016
+* Paul Ganssle <paul@ganssle.io> 2015-
+
+Starting with version 2.4.1 and running until 2.8.2, all source and binary
+distributions will be signed by a PGP key that has, at the very least, been
+signed by the key which made the previous release. A table of release signing
+keys can be found below:
+
+===========  ============================
+Releases     Signing key fingerprint
+===========  ============================
+2.4.1-2.8.2  `6B49 ACBA DCF6 BD1C A206 67AB CD54 FCE3 D964 BEFB`_ 
+===========  ============================
+
+New releases *may* have signed tags, but binary and source distributions
+uploaded to PyPI will no longer have GPG signatures attached.
+
+Contact
+=======
+Our mailing list is available at `dateutil@python.org <https://mail.python.org/mailman/listinfo/dateutil>`_. As it is hosted by the PSF, it is subject to the `PSF code of
+conduct <https://www.python.org/psf/conduct/>`_.
+
+License
+=======
+
+All contributions after December 1, 2017 released under dual license - either `Apache 2.0 License <https://www.apache.org/licenses/LICENSE-2.0>`_ or the `BSD 3-Clause License <https://opensource.org/licenses/BSD-3-Clause>`_. Contributions before December 1, 2017 - except those those explicitly relicensed - are released only under the BSD 3-Clause License.
+
+
+.. _6B49 ACBA DCF6 BD1C A206 67AB CD54 FCE3 D964 BEFB:
+   https://pgp.mit.edu/pks/lookup?op=vindex&search=0xCD54FCE3D964BEFB
+
+
diff --git a/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/RECORD b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/RECORD
new file mode 100644
index 0000000..4d5818c
--- /dev/null
+++ b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/RECORD
@@ -0,0 +1,45 @@
+dateutil/__init__.py,sha256=lXElASqwYGwqlrSWSeX19JwF5Be9tNecDa9ebk-0gmk,222
+dateutil/__pycache__/__init__.cpython-311.pyc,,
+dateutil/__pycache__/_common.cpython-311.pyc,,
+dateutil/__pycache__/_version.cpython-311.pyc,,
+dateutil/__pycache__/easter.cpython-311.pyc,,
+dateutil/__pycache__/relativedelta.cpython-311.pyc,,
+dateutil/__pycache__/rrule.cpython-311.pyc,,
+dateutil/__pycache__/tzwin.cpython-311.pyc,,
+dateutil/__pycache__/utils.cpython-311.pyc,,
+dateutil/_common.py,sha256=77w0yytkrxlYbSn--lDVPUMabUXRR9I3lBv_vQRUqUY,932
+dateutil/_version.py,sha256=awyHv2PYvDR84dxjrHyzmm8nieFwMjcuuShPh-QNkM4,142
+dateutil/easter.py,sha256=dyBi-lKvimH1u_k6p7Z0JJK72QhqVtVBsqByvpEPKvc,2678
+dateutil/parser/__init__.py,sha256=wWk6GFuxTpjoggCGtgkceJoti4pVjl4_fHQXpNOaSYg,1766
+dateutil/parser/__pycache__/__init__.cpython-311.pyc,,
+dateutil/parser/__pycache__/_parser.cpython-311.pyc,,
+dateutil/parser/__pycache__/isoparser.cpython-311.pyc,,
+dateutil/parser/_parser.py,sha256=7klDdyicksQB_Xgl-3UAmBwzCYor1AIZqklIcT6dH_8,58796
+dateutil/parser/isoparser.py,sha256=EtLY7w22HWx-XJpTWxJD3XNs6LBHRCps77tCdLnYad8,13247
+dateutil/relativedelta.py,sha256=GjVxqpAVWnG67rdbf7pkoIlJvQqmju9NSfGCcqblc7U,24904
+dateutil/rrule.py,sha256=b6GVV4MpZDbBhJ5qitQKRyx8-_OKyeAbk57or2A8AYU,66556
+dateutil/tz/__init__.py,sha256=F-Mz13v6jYseklQf9Te9J6nzcLDmq47gORa61K35_FA,444
+dateutil/tz/__pycache__/__init__.cpython-311.pyc,,
+dateutil/tz/__pycache__/_common.cpython-311.pyc,,
+dateutil/tz/__pycache__/_factories.cpython-311.pyc,,
+dateutil/tz/__pycache__/tz.cpython-311.pyc,,
+dateutil/tz/__pycache__/win.cpython-311.pyc,,
+dateutil/tz/_common.py,sha256=cgzDTANsOXvEc86cYF77EsliuSab8Puwpsl5-bX3_S4,12977
+dateutil/tz/_factories.py,sha256=unb6XQNXrPMveksTCU-Ag8jmVZs4SojoPUcAHpWnrvU,2569
+dateutil/tz/tz.py,sha256=JotVjDcF16hzoouQ0kZW-5mCYu7Xj67NI-VQgnWapKE,62857
+dateutil/tz/win.py,sha256=xJszWgSwE1xPx_HJj4ZkepyukC_hNy016WMcXhbRaB8,12935
+dateutil/tzwin.py,sha256=7Ar4vdQCnnM0mKR3MUjbIKsZrBVfHgdwsJZc_mGYRew,59
+dateutil/utils.py,sha256=dKCchEw8eObi0loGTx91unBxm_7UGlU3v_FjFMdqwYM,1965
+dateutil/zoneinfo/__init__.py,sha256=KYg0pthCMjcp5MXSEiBJn3nMjZeNZav7rlJw5-tz1S4,5889
+dateutil/zoneinfo/__pycache__/__init__.cpython-311.pyc,,
+dateutil/zoneinfo/__pycache__/rebuild.cpython-311.pyc,,
+dateutil/zoneinfo/dateutil-zoneinfo.tar.gz,sha256=AkcdBx3XkEZwMSpS_TmOEfrEFHLvgxPNDVIwGVxTVaI,174394
+dateutil/zoneinfo/rebuild.py,sha256=MiqYzCIHvNbMH-LdRYLv-4T0EIA7hDKt5GLR0IRTLdI,2392
+python_dateutil-2.8.2.dist-info/INSTALLER,sha256=zuuue4knoyJ-UwPPXg8fezS7VCrXJQrAP7zeNuwvFQg,4
+python_dateutil-2.8.2.dist-info/LICENSE,sha256=ugD1Gg2SgjtaHN4n2LW50jIeZ-2NqbwWPv-W1eF-V34,2889
+python_dateutil-2.8.2.dist-info/METADATA,sha256=RDHtGo7BnYRjmYxot_wlu_W3N2CyvPtvchbtyIlKKPA,8218
+python_dateutil-2.8.2.dist-info/RECORD,,
+python_dateutil-2.8.2.dist-info/REQUESTED,sha256=47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU,0
+python_dateutil-2.8.2.dist-info/WHEEL,sha256=Z-nyYpwrcSqxfdux5Mbn_DQ525iP7J2DG3JgGvOYyTQ,110
+python_dateutil-2.8.2.dist-info/top_level.txt,sha256=4tjdWkhRZvF7LA_BYe_L9gB2w_p2a-z5y6ArjaRkot8,9
+python_dateutil-2.8.2.dist-info/zip-safe,sha256=AbpHGcgLb-kRsJGnwFEktk7uzpZOCcBY74-YBdrKVGs,1
diff --git a/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/REQUESTED b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/REQUESTED
new file mode 100644
index 0000000..e69de29
diff --git a/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/WHEEL b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/WHEEL
new file mode 100644
index 0000000..01b8fc7
--- /dev/null
+++ b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/WHEEL
@@ -0,0 +1,6 @@
+Wheel-Version: 1.0
+Generator: bdist_wheel (0.36.2)
+Root-Is-Purelib: true
+Tag: py2-none-any
+Tag: py3-none-any
+
diff --git a/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/top_level.txt b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/top_level.txt
new file mode 100644
index 0000000..6650148
--- /dev/null
+++ b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/top_level.txt
@@ -0,0 +1 @@
+dateutil
diff --git a/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/zip-safe b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/zip-safe
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/venv/Lib/site-packages/python_dateutil-2.8.2.dist-info/zip-safe
@@ -0,0 +1 @@
+
diff --git a/venv/Lib/site-packages/six-1.16.0.dist-info/INSTALLER b/venv/Lib/site-packages/six-1.16.0.dist-info/INSTALLER
new file mode 100644
index 0000000..a1b589e
--- /dev/null
+++ b/venv/Lib/site-packages/six-1.16.0.dist-info/INSTALLER
@@ -0,0 +1 @@
+pip
diff --git a/venv/Lib/site-packages/six-1.16.0.dist-info/LICENSE b/venv/Lib/site-packages/six-1.16.0.dist-info/LICENSE
new file mode 100644
index 0000000..de66331
--- /dev/null
+++ b/venv/Lib/site-packages/six-1.16.0.dist-info/LICENSE
@@ -0,0 +1,18 @@
+Copyright (c) 2010-2020 Benjamin Peterson
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+the Software, and to permit persons to whom the Software is furnished to do so,
+subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/venv/Lib/site-packages/six-1.16.0.dist-info/METADATA b/venv/Lib/site-packages/six-1.16.0.dist-info/METADATA
new file mode 100644
index 0000000..6d7525c
--- /dev/null
+++ b/venv/Lib/site-packages/six-1.16.0.dist-info/METADATA
@@ -0,0 +1,49 @@
+Metadata-Version: 2.1
+Name: six
+Version: 1.16.0
+Summary: Python 2 and 3 compatibility utilities
+Home-page: https://github.com/benjaminp/six
+Author: Benjamin Peterson
+Author-email: benjamin@python.org
+License: MIT
+Platform: UNKNOWN
+Classifier: Development Status :: 5 - Production/Stable
+Classifier: Programming Language :: Python :: 2
+Classifier: Programming Language :: Python :: 3
+Classifier: Intended Audience :: Developers
+Classifier: License :: OSI Approved :: MIT License
+Classifier: Topic :: Software Development :: Libraries
+Classifier: Topic :: Utilities
+Requires-Python: >=2.7, !=3.0.*, !=3.1.*, !=3.2.*
+
+.. image:: https://img.shields.io/pypi/v/six.svg
+   :target: https://pypi.org/project/six/
+   :alt: six on PyPI
+
+.. image:: https://travis-ci.org/benjaminp/six.svg?branch=master
+   :target: https://travis-ci.org/benjaminp/six
+   :alt: six on TravisCI
+
+.. image:: https://readthedocs.org/projects/six/badge/?version=latest
+   :target: https://six.readthedocs.io/
+   :alt: six's documentation on Read the Docs
+
+.. image:: https://img.shields.io/badge/license-MIT-green.svg
+   :target: https://github.com/benjaminp/six/blob/master/LICENSE
+   :alt: MIT License badge
+
+Six is a Python 2 and 3 compatibility library.  It provides utility functions
+for smoothing over the differences between the Python versions with the goal of
+writing Python code that is compatible on both Python versions.  See the
+documentation for more information on what is provided.
+
+Six supports Python 2.7 and 3.3+.  It is contained in only one Python
+file, so it can be easily copied into your project. (The copyright and license
+notice must be retained.)
+
+Online documentation is at https://six.readthedocs.io/.
+
+Bugs can be reported to https://github.com/benjaminp/six.  The code can also
+be found there.
+
+
diff --git a/venv/Lib/site-packages/six-1.16.0.dist-info/RECORD b/venv/Lib/site-packages/six-1.16.0.dist-info/RECORD
new file mode 100644
index 0000000..28b18f2
--- /dev/null
+++ b/venv/Lib/site-packages/six-1.16.0.dist-info/RECORD
@@ -0,0 +1,8 @@
+__pycache__/six.cpython-311.pyc,,
+six-1.16.0.dist-info/INSTALLER,sha256=zuuue4knoyJ-UwPPXg8fezS7VCrXJQrAP7zeNuwvFQg,4
+six-1.16.0.dist-info/LICENSE,sha256=i7hQxWWqOJ_cFvOkaWWtI9gq3_YPI5P8J2K2MYXo5sk,1066
+six-1.16.0.dist-info/METADATA,sha256=VQcGIFCAEmfZcl77E5riPCN4v2TIsc_qtacnjxKHJoI,1795
+six-1.16.0.dist-info/RECORD,,
+six-1.16.0.dist-info/WHEEL,sha256=Z-nyYpwrcSqxfdux5Mbn_DQ525iP7J2DG3JgGvOYyTQ,110
+six-1.16.0.dist-info/top_level.txt,sha256=_iVH_iYEtEXnD8nYGQYpYFUvkUW9sEO1GYbkeKSAais,4
+six.py,sha256=TOOfQi7nFGfMrIvtdr6wX4wyHH8M7aknmuLfo2cBBrM,34549
diff --git a/venv/Lib/site-packages/six-1.16.0.dist-info/WHEEL b/venv/Lib/site-packages/six-1.16.0.dist-info/WHEEL
new file mode 100644
index 0000000..01b8fc7
--- /dev/null
+++ b/venv/Lib/site-packages/six-1.16.0.dist-info/WHEEL
@@ -0,0 +1,6 @@
+Wheel-Version: 1.0
+Generator: bdist_wheel (0.36.2)
+Root-Is-Purelib: true
+Tag: py2-none-any
+Tag: py3-none-any
+
diff --git a/venv/Lib/site-packages/six-1.16.0.dist-info/top_level.txt b/venv/Lib/site-packages/six-1.16.0.dist-info/top_level.txt
new file mode 100644
index 0000000..ffe2fce
--- /dev/null
+++ b/venv/Lib/site-packages/six-1.16.0.dist-info/top_level.txt
@@ -0,0 +1 @@
+six
diff --git a/venv/Lib/site-packages/six.py b/venv/Lib/site-packages/six.py
new file mode 100644
index 0000000..4e15675
--- /dev/null
+++ b/venv/Lib/site-packages/six.py
@@ -0,0 +1,998 @@
+# Copyright (c) 2010-2020 Benjamin Peterson
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in all
+# copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+# SOFTWARE.
+
+"""Utilities for writing code that runs on Python 2 and 3"""
+
+from __future__ import absolute_import
+
+import functools
+import itertools
+import operator
+import sys
+import types
+
+__author__ = "Benjamin Peterson <benjamin@python.org>"
+__version__ = "1.16.0"
+
+
+# Useful for very coarse version differentiation.
+PY2 = sys.version_info[0] == 2
+PY3 = sys.version_info[0] == 3
+PY34 = sys.version_info[0:2] >= (3, 4)
+
+if PY3:
+    string_types = str,
+    integer_types = int,
+    class_types = type,
+    text_type = str
+    binary_type = bytes
+
+    MAXSIZE = sys.maxsize
+else:
+    string_types = basestring,
+    integer_types = (int, long)
+    class_types = (type, types.ClassType)
+    text_type = unicode
+    binary_type = str
+
+    if sys.platform.startswith("java"):
+        # Jython always uses 32 bits.
+        MAXSIZE = int((1 << 31) - 1)
+    else:
+        # It's possible to have sizeof(long) != sizeof(Py_ssize_t).
+        class X(object):
+
+            def __len__(self):
+                return 1 << 31
+        try:
+            len(X())
+        except OverflowError:
+            # 32-bit
+            MAXSIZE = int((1 << 31) - 1)
+        else:
+            # 64-bit
+            MAXSIZE = int((1 << 63) - 1)
+        del X
+
+if PY34:
+    from importlib.util import spec_from_loader
+else:
+    spec_from_loader = None
+
+
+def _add_doc(func, doc):
+    """Add documentation to a function."""
+    func.__doc__ = doc
+
+
+def _import_module(name):
+    """Import module, returning the module after the last dot."""
+    __import__(name)
+    return sys.modules[name]
+
+
+class _LazyDescr(object):
+
+    def __init__(self, name):
+        self.name = name
+
+    def __get__(self, obj, tp):
+        result = self._resolve()
+        setattr(obj, self.name, result)  # Invokes __set__.
+        try:
+            # This is a bit ugly, but it avoids running this again by
+            # removing this descriptor.
+            delattr(obj.__class__, self.name)
+        except AttributeError:
+            pass
+        return result
+
+
+class MovedModule(_LazyDescr):
+
+    def __init__(self, name, old, new=None):
+        super(MovedModule, self).__init__(name)
+        if PY3:
+            if new is None:
+                new = name
+            self.mod = new
+        else:
+            self.mod = old
+
+    def _resolve(self):
+        return _import_module(self.mod)
+
+    def __getattr__(self, attr):
+        _module = self._resolve()
+        value = getattr(_module, attr)
+        setattr(self, attr, value)
+        return value
+
+
+class _LazyModule(types.ModuleType):
+
+    def __init__(self, name):
+        super(_LazyModule, self).__init__(name)
+        self.__doc__ = self.__class__.__doc__
+
+    def __dir__(self):
+        attrs = ["__doc__", "__name__"]
+        attrs += [attr.name for attr in self._moved_attributes]
+        return attrs
+
+    # Subclasses should override this
+    _moved_attributes = []
+
+
+class MovedAttribute(_LazyDescr):
+
+    def __init__(self, name, old_mod, new_mod, old_attr=None, new_attr=None):
+        super(MovedAttribute, self).__init__(name)
+        if PY3:
+            if new_mod is None:
+                new_mod = name
+            self.mod = new_mod
+            if new_attr is None:
+                if old_attr is None:
+                    new_attr = name
+                else:
+                    new_attr = old_attr
+            self.attr = new_attr
+        else:
+            self.mod = old_mod
+            if old_attr is None:
+                old_attr = name
+            self.attr = old_attr
+
+    def _resolve(self):
+        module = _import_module(self.mod)
+        return getattr(module, self.attr)
+
+
+class _SixMetaPathImporter(object):
+
+    """
+    A meta path importer to import six.moves and its submodules.
+
+    This class implements a PEP302 finder and loader. It should be compatible
+    with Python 2.5 and all existing versions of Python3
+    """
+
+    def __init__(self, six_module_name):
+        self.name = six_module_name
+        self.known_modules = {}
+
+    def _add_module(self, mod, *fullnames):
+        for fullname in fullnames:
+            self.known_modules[self.name + "." + fullname] = mod
+
+    def _get_module(self, fullname):
+        return self.known_modules[self.name + "." + fullname]
+
+    def find_module(self, fullname, path=None):
+        if fullname in self.known_modules:
+            return self
+        return None
+
+    def find_spec(self, fullname, path, target=None):
+        if fullname in self.known_modules:
+            return spec_from_loader(fullname, self)
+        return None
+
+    def __get_module(self, fullname):
+        try:
+            return self.known_modules[fullname]
+        except KeyError:
+            raise ImportError("This loader does not know module " + fullname)
+
+    def load_module(self, fullname):
+        try:
+            # in case of a reload
+            return sys.modules[fullname]
+        except KeyError:
+            pass
+        mod = self.__get_module(fullname)
+        if isinstance(mod, MovedModule):
+            mod = mod._resolve()
+        else:
+            mod.__loader__ = self
+        sys.modules[fullname] = mod
+        return mod
+
+    def is_package(self, fullname):
+        """
+        Return true, if the named module is a package.
+
+        We need this method to get correct spec objects with
+        Python 3.4 (see PEP451)
+        """
+        return hasattr(self.__get_module(fullname), "__path__")
+
+    def get_code(self, fullname):
+        """Return None
+
+        Required, if is_package is implemented"""
+        self.__get_module(fullname)  # eventually raises ImportError
+        return None
+    get_source = get_code  # same as get_code
+
+    def create_module(self, spec):
+        return self.load_module(spec.name)
+
+    def exec_module(self, module):
+        pass
+
+_importer = _SixMetaPathImporter(__name__)
+
+
+class _MovedItems(_LazyModule):
+
+    """Lazy loading of moved objects"""
+    __path__ = []  # mark as package
+
+
+_moved_attributes = [
+    MovedAttribute("cStringIO", "cStringIO", "io", "StringIO"),
+    MovedAttribute("filter", "itertools", "builtins", "ifilter", "filter"),
+    MovedAttribute("filterfalse", "itertools", "itertools", "ifilterfalse", "filterfalse"),
+    MovedAttribute("input", "__builtin__", "builtins", "raw_input", "input"),
+    MovedAttribute("intern", "__builtin__", "sys"),
+    MovedAttribute("map", "itertools", "builtins", "imap", "map"),
+    MovedAttribute("getcwd", "os", "os", "getcwdu", "getcwd"),
+    MovedAttribute("getcwdb", "os", "os", "getcwd", "getcwdb"),
+    MovedAttribute("getoutput", "commands", "subprocess"),
+    MovedAttribute("range", "__builtin__", "builtins", "xrange", "range"),
+    MovedAttribute("reload_module", "__builtin__", "importlib" if PY34 else "imp", "reload"),
+    MovedAttribute("reduce", "__builtin__", "functools"),
+    MovedAttribute("shlex_quote", "pipes", "shlex", "quote"),
+    MovedAttribute("StringIO", "StringIO", "io"),
+    MovedAttribute("UserDict", "UserDict", "collections"),
+    MovedAttribute("UserList", "UserList", "collections"),
+    MovedAttribute("UserString", "UserString", "collections"),
+    MovedAttribute("xrange", "__builtin__", "builtins", "xrange", "range"),
+    MovedAttribute("zip", "itertools", "builtins", "izip", "zip"),
+    MovedAttribute("zip_longest", "itertools", "itertools", "izip_longest", "zip_longest"),
+    MovedModule("builtins", "__builtin__"),
+    MovedModule("configparser", "ConfigParser"),
+    MovedModule("collections_abc", "collections", "collections.abc" if sys.version_info >= (3, 3) else "collections"),
+    MovedModule("copyreg", "copy_reg"),
+    MovedModule("dbm_gnu", "gdbm", "dbm.gnu"),
+    MovedModule("dbm_ndbm", "dbm", "dbm.ndbm"),
+    MovedModule("_dummy_thread", "dummy_thread", "_dummy_thread" if sys.version_info < (3, 9) else "_thread"),
+    MovedModule("http_cookiejar", "cookielib", "http.cookiejar"),
+    MovedModule("http_cookies", "Cookie", "http.cookies"),
+    MovedModule("html_entities", "htmlentitydefs", "html.entities"),
+    MovedModule("html_parser", "HTMLParser", "html.parser"),
+    MovedModule("http_client", "httplib", "http.client"),
+    MovedModule("email_mime_base", "email.MIMEBase", "email.mime.base"),
+    MovedModule("email_mime_image", "email.MIMEImage", "email.mime.image"),
+    MovedModule("email_mime_multipart", "email.MIMEMultipart", "email.mime.multipart"),
+    MovedModule("email_mime_nonmultipart", "email.MIMENonMultipart", "email.mime.nonmultipart"),
+    MovedModule("email_mime_text", "email.MIMEText", "email.mime.text"),
+    MovedModule("BaseHTTPServer", "BaseHTTPServer", "http.server"),
+    MovedModule("CGIHTTPServer", "CGIHTTPServer", "http.server"),
+    MovedModule("SimpleHTTPServer", "SimpleHTTPServer", "http.server"),
+    MovedModule("cPickle", "cPickle", "pickle"),
+    MovedModule("queue", "Queue"),
+    MovedModule("reprlib", "repr"),
+    MovedModule("socketserver", "SocketServer"),
+    MovedModule("_thread", "thread", "_thread"),
+    MovedModule("tkinter", "Tkinter"),
+    MovedModule("tkinter_dialog", "Dialog", "tkinter.dialog"),
+    MovedModule("tkinter_filedialog", "FileDialog", "tkinter.filedialog"),
+    MovedModule("tkinter_scrolledtext", "ScrolledText", "tkinter.scrolledtext"),
+    MovedModule("tkinter_simpledialog", "SimpleDialog", "tkinter.simpledialog"),
+    MovedModule("tkinter_tix", "Tix", "tkinter.tix"),
+    MovedModule("tkinter_ttk", "ttk", "tkinter.ttk"),
+    MovedModule("tkinter_constants", "Tkconstants", "tkinter.constants"),
+    MovedModule("tkinter_dnd", "Tkdnd", "tkinter.dnd"),
+    MovedModule("tkinter_colorchooser", "tkColorChooser",
+                "tkinter.colorchooser"),
+    MovedModule("tkinter_commondialog", "tkCommonDialog",
+                "tkinter.commondialog"),
+    MovedModule("tkinter_tkfiledialog", "tkFileDialog", "tkinter.filedialog"),
+    MovedModule("tkinter_font", "tkFont", "tkinter.font"),
+    MovedModule("tkinter_messagebox", "tkMessageBox", "tkinter.messagebox"),
+    MovedModule("tkinter_tksimpledialog", "tkSimpleDialog",
+                "tkinter.simpledialog"),
+    MovedModule("urllib_parse", __name__ + ".moves.urllib_parse", "urllib.parse"),
+    MovedModule("urllib_error", __name__ + ".moves.urllib_error", "urllib.error"),
+    MovedModule("urllib", __name__ + ".moves.urllib", __name__ + ".moves.urllib"),
+    MovedModule("urllib_robotparser", "robotparser", "urllib.robotparser"),
+    MovedModule("xmlrpc_client", "xmlrpclib", "xmlrpc.client"),
+    MovedModule("xmlrpc_server", "SimpleXMLRPCServer", "xmlrpc.server"),
+]
+# Add windows specific modules.
+if sys.platform == "win32":
+    _moved_attributes += [
+        MovedModule("winreg", "_winreg"),
+    ]
+
+for attr in _moved_attributes:
+    setattr(_MovedItems, attr.name, attr)
+    if isinstance(attr, MovedModule):
+        _importer._add_module(attr, "moves." + attr.name)
+del attr
+
+_MovedItems._moved_attributes = _moved_attributes
+
+moves = _MovedItems(__name__ + ".moves")
+_importer._add_module(moves, "moves")
+
+
+class Module_six_moves_urllib_parse(_LazyModule):
+
+    """Lazy loading of moved objects in six.moves.urllib_parse"""
+
+
+_urllib_parse_moved_attributes = [
+    MovedAttribute("ParseResult", "urlparse", "urllib.parse"),
+    MovedAttribute("SplitResult", "urlparse", "urllib.parse"),
+    MovedAttribute("parse_qs", "urlparse", "urllib.parse"),
+    MovedAttribute("parse_qsl", "urlparse", "urllib.parse"),
+    MovedAttribute("urldefrag", "urlparse", "urllib.parse"),
+    MovedAttribute("urljoin", "urlparse", "urllib.parse"),
+    MovedAttribute("urlparse", "urlparse", "urllib.parse"),
+    MovedAttribute("urlsplit", "urlparse", "urllib.parse"),
+    MovedAttribute("urlunparse", "urlparse", "urllib.parse"),
+    MovedAttribute("urlunsplit", "urlparse", "urllib.parse"),
+    MovedAttribute("quote", "urllib", "urllib.parse"),
+    MovedAttribute("quote_plus", "urllib", "urllib.parse"),
+    MovedAttribute("unquote", "urllib", "urllib.parse"),
+    MovedAttribute("unquote_plus", "urllib", "urllib.parse"),
+    MovedAttribute("unquote_to_bytes", "urllib", "urllib.parse", "unquote", "unquote_to_bytes"),
+    MovedAttribute("urlencode", "urllib", "urllib.parse"),
+    MovedAttribute("splitquery", "urllib", "urllib.parse"),
+    MovedAttribute("splittag", "urllib", "urllib.parse"),
+    MovedAttribute("splituser", "urllib", "urllib.parse"),
+    MovedAttribute("splitvalue", "urllib", "urllib.parse"),
+    MovedAttribute("uses_fragment", "urlparse", "urllib.parse"),
+    MovedAttribute("uses_netloc", "urlparse", "urllib.parse"),
+    MovedAttribute("uses_params", "urlparse", "urllib.parse"),
+    MovedAttribute("uses_query", "urlparse", "urllib.parse"),
+    MovedAttribute("uses_relative", "urlparse", "urllib.parse"),
+]
+for attr in _urllib_parse_moved_attributes:
+    setattr(Module_six_moves_urllib_parse, attr.name, attr)
+del attr
+
+Module_six_moves_urllib_parse._moved_attributes = _urllib_parse_moved_attributes
+
+_importer._add_module(Module_six_moves_urllib_parse(__name__ + ".moves.urllib_parse"),
+                      "moves.urllib_parse", "moves.urllib.parse")
+
+
+class Module_six_moves_urllib_error(_LazyModule):
+
+    """Lazy loading of moved objects in six.moves.urllib_error"""
+
+
+_urllib_error_moved_attributes = [
+    MovedAttribute("URLError", "urllib2", "urllib.error"),
+    MovedAttribute("HTTPError", "urllib2", "urllib.error"),
+    MovedAttribute("ContentTooShortError", "urllib", "urllib.error"),
+]
+for attr in _urllib_error_moved_attributes:
+    setattr(Module_six_moves_urllib_error, attr.name, attr)
+del attr
+
+Module_six_moves_urllib_error._moved_attributes = _urllib_error_moved_attributes
+
+_importer._add_module(Module_six_moves_urllib_error(__name__ + ".moves.urllib.error"),
+                      "moves.urllib_error", "moves.urllib.error")
+
+
+class Module_six_moves_urllib_request(_LazyModule):
+
+    """Lazy loading of moved objects in six.moves.urllib_request"""
+
+
+_urllib_request_moved_attributes = [
+    MovedAttribute("urlopen", "urllib2", "urllib.request"),
+    MovedAttribute("install_opener", "urllib2", "urllib.request"),
+    MovedAttribute("build_opener", "urllib2", "urllib.request"),
+    MovedAttribute("pathname2url", "urllib", "urllib.request"),
+    MovedAttribute("url2pathname", "urllib", "urllib.request"),
+    MovedAttribute("getproxies", "urllib", "urllib.request"),
+    MovedAttribute("Request", "urllib2", "urllib.request"),
+    MovedAttribute("OpenerDirector", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPDefaultErrorHandler", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPRedirectHandler", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPCookieProcessor", "urllib2", "urllib.request"),
+    MovedAttribute("ProxyHandler", "urllib2", "urllib.request"),
+    MovedAttribute("BaseHandler", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPPasswordMgr", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPPasswordMgrWithDefaultRealm", "urllib2", "urllib.request"),
+    MovedAttribute("AbstractBasicAuthHandler", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPBasicAuthHandler", "urllib2", "urllib.request"),
+    MovedAttribute("ProxyBasicAuthHandler", "urllib2", "urllib.request"),
+    MovedAttribute("AbstractDigestAuthHandler", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPDigestAuthHandler", "urllib2", "urllib.request"),
+    MovedAttribute("ProxyDigestAuthHandler", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPHandler", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPSHandler", "urllib2", "urllib.request"),
+    MovedAttribute("FileHandler", "urllib2", "urllib.request"),
+    MovedAttribute("FTPHandler", "urllib2", "urllib.request"),
+    MovedAttribute("CacheFTPHandler", "urllib2", "urllib.request"),
+    MovedAttribute("UnknownHandler", "urllib2", "urllib.request"),
+    MovedAttribute("HTTPErrorProcessor", "urllib2", "urllib.request"),
+    MovedAttribute("urlretrieve", "urllib", "urllib.request"),
+    MovedAttribute("urlcleanup", "urllib", "urllib.request"),
+    MovedAttribute("URLopener", "urllib", "urllib.request"),
+    MovedAttribute("FancyURLopener", "urllib", "urllib.request"),
+    MovedAttribute("proxy_bypass", "urllib", "urllib.request"),
+    MovedAttribute("parse_http_list", "urllib2", "urllib.request"),
+    MovedAttribute("parse_keqv_list", "urllib2", "urllib.request"),
+]
+for attr in _urllib_request_moved_attributes:
+    setattr(Module_six_moves_urllib_request, attr.name, attr)
+del attr
+
+Module_six_moves_urllib_request._moved_attributes = _urllib_request_moved_attributes
+
+_importer._add_module(Module_six_moves_urllib_request(__name__ + ".moves.urllib.request"),
+                      "moves.urllib_request", "moves.urllib.request")
+
+
+class Module_six_moves_urllib_response(_LazyModule):
+
+    """Lazy loading of moved objects in six.moves.urllib_response"""
+
+
+_urllib_response_moved_attributes = [
+    MovedAttribute("addbase", "urllib", "urllib.response"),
+    MovedAttribute("addclosehook", "urllib", "urllib.response"),
+    MovedAttribute("addinfo", "urllib", "urllib.response"),
+    MovedAttribute("addinfourl", "urllib", "urllib.response"),
+]
+for attr in _urllib_response_moved_attributes:
+    setattr(Module_six_moves_urllib_response, attr.name, attr)
+del attr
+
+Module_six_moves_urllib_response._moved_attributes = _urllib_response_moved_attributes
+
+_importer._add_module(Module_six_moves_urllib_response(__name__ + ".moves.urllib.response"),
+                      "moves.urllib_response", "moves.urllib.response")
+
+
+class Module_six_moves_urllib_robotparser(_LazyModule):
+
+    """Lazy loading of moved objects in six.moves.urllib_robotparser"""
+
+
+_urllib_robotparser_moved_attributes = [
+    MovedAttribute("RobotFileParser", "robotparser", "urllib.robotparser"),
+]
+for attr in _urllib_robotparser_moved_attributes:
+    setattr(Module_six_moves_urllib_robotparser, attr.name, attr)
+del attr
+
+Module_six_moves_urllib_robotparser._moved_attributes = _urllib_robotparser_moved_attributes
+
+_importer._add_module(Module_six_moves_urllib_robotparser(__name__ + ".moves.urllib.robotparser"),
+                      "moves.urllib_robotparser", "moves.urllib.robotparser")
+
+
+class Module_six_moves_urllib(types.ModuleType):
+
+    """Create a six.moves.urllib namespace that resembles the Python 3 namespace"""
+    __path__ = []  # mark as package
+    parse = _importer._get_module("moves.urllib_parse")
+    error = _importer._get_module("moves.urllib_error")
+    request = _importer._get_module("moves.urllib_request")
+    response = _importer._get_module("moves.urllib_response")
+    robotparser = _importer._get_module("moves.urllib_robotparser")
+
+    def __dir__(self):
+        return ['parse', 'error', 'request', 'response', 'robotparser']
+
+_importer._add_module(Module_six_moves_urllib(__name__ + ".moves.urllib"),
+                      "moves.urllib")
+
+
+def add_move(move):
+    """Add an item to six.moves."""
+    setattr(_MovedItems, move.name, move)
+
+
+def remove_move(name):
+    """Remove item from six.moves."""
+    try:
+        delattr(_MovedItems, name)
+    except AttributeError:
+        try:
+            del moves.__dict__[name]
+        except KeyError:
+            raise AttributeError("no such move, %r" % (name,))
+
+
+if PY3:
+    _meth_func = "__func__"
+    _meth_self = "__self__"
+
+    _func_closure = "__closure__"
+    _func_code = "__code__"
+    _func_defaults = "__defaults__"
+    _func_globals = "__globals__"
+else:
+    _meth_func = "im_func"
+    _meth_self = "im_self"
+
+    _func_closure = "func_closure"
+    _func_code = "func_code"
+    _func_defaults = "func_defaults"
+    _func_globals = "func_globals"
+
+
+try:
+    advance_iterator = next
+except NameError:
+    def advance_iterator(it):
+        return it.next()
+next = advance_iterator
+
+
+try:
+    callable = callable
+except NameError:
+    def callable(obj):
+        return any("__call__" in klass.__dict__ for klass in type(obj).__mro__)
+
+
+if PY3:
+    def get_unbound_function(unbound):
+        return unbound
+
+    create_bound_method = types.MethodType
+
+    def create_unbound_method(func, cls):
+        return func
+
+    Iterator = object
+else:
+    def get_unbound_function(unbound):
+        return unbound.im_func
+
+    def create_bound_method(func, obj):
+        return types.MethodType(func, obj, obj.__class__)
+
+    def create_unbound_method(func, cls):
+        return types.MethodType(func, None, cls)
+
+    class Iterator(object):
+
+        def next(self):
+            return type(self).__next__(self)
+
+    callable = callable
+_add_doc(get_unbound_function,
+         """Get the function out of a possibly unbound function""")
+
+
+get_method_function = operator.attrgetter(_meth_func)
+get_method_self = operator.attrgetter(_meth_self)
+get_function_closure = operator.attrgetter(_func_closure)
+get_function_code = operator.attrgetter(_func_code)
+get_function_defaults = operator.attrgetter(_func_defaults)
+get_function_globals = operator.attrgetter(_func_globals)
+
+
+if PY3:
+    def iterkeys(d, **kw):
+        return iter(d.keys(**kw))
+
+    def itervalues(d, **kw):
+        return iter(d.values(**kw))
+
+    def iteritems(d, **kw):
+        return iter(d.items(**kw))
+
+    def iterlists(d, **kw):
+        return iter(d.lists(**kw))
+
+    viewkeys = operator.methodcaller("keys")
+
+    viewvalues = operator.methodcaller("values")
+
+    viewitems = operator.methodcaller("items")
+else:
+    def iterkeys(d, **kw):
+        return d.iterkeys(**kw)
+
+    def itervalues(d, **kw):
+        return d.itervalues(**kw)
+
+    def iteritems(d, **kw):
+        return d.iteritems(**kw)
+
+    def iterlists(d, **kw):
+        return d.iterlists(**kw)
+
+    viewkeys = operator.methodcaller("viewkeys")
+
+    viewvalues = operator.methodcaller("viewvalues")
+
+    viewitems = operator.methodcaller("viewitems")
+
+_add_doc(iterkeys, "Return an iterator over the keys of a dictionary.")
+_add_doc(itervalues, "Return an iterator over the values of a dictionary.")
+_add_doc(iteritems,
+         "Return an iterator over the (key, value) pairs of a dictionary.")
+_add_doc(iterlists,
+         "Return an iterator over the (key, [values]) pairs of a dictionary.")
+
+
+if PY3:
+    def b(s):
+        return s.encode("latin-1")
+
+    def u(s):
+        return s
+    unichr = chr
+    import struct
+    int2byte = struct.Struct(">B").pack
+    del struct
+    byte2int = operator.itemgetter(0)
+    indexbytes = operator.getitem
+    iterbytes = iter
+    import io
+    StringIO = io.StringIO
+    BytesIO = io.BytesIO
+    del io
+    _assertCountEqual = "assertCountEqual"
+    if sys.version_info[1] <= 1:
+        _assertRaisesRegex = "assertRaisesRegexp"
+        _assertRegex = "assertRegexpMatches"
+        _assertNotRegex = "assertNotRegexpMatches"
+    else:
+        _assertRaisesRegex = "assertRaisesRegex"
+        _assertRegex = "assertRegex"
+        _assertNotRegex = "assertNotRegex"
+else:
+    def b(s):
+        return s
+    # Workaround for standalone backslash
+
+    def u(s):
+        return unicode(s.replace(r'\\', r'\\\\'), "unicode_escape")
+    unichr = unichr
+    int2byte = chr
+
+    def byte2int(bs):
+        return ord(bs[0])
+
+    def indexbytes(buf, i):
+        return ord(buf[i])
+    iterbytes = functools.partial(itertools.imap, ord)
+    import StringIO
+    StringIO = BytesIO = StringIO.StringIO
+    _assertCountEqual = "assertItemsEqual"
+    _assertRaisesRegex = "assertRaisesRegexp"
+    _assertRegex = "assertRegexpMatches"
+    _assertNotRegex = "assertNotRegexpMatches"
+_add_doc(b, """Byte literal""")
+_add_doc(u, """Text literal""")
+
+
+def assertCountEqual(self, *args, **kwargs):
+    return getattr(self, _assertCountEqual)(*args, **kwargs)
+
+
+def assertRaisesRegex(self, *args, **kwargs):
+    return getattr(self, _assertRaisesRegex)(*args, **kwargs)
+
+
+def assertRegex(self, *args, **kwargs):
+    return getattr(self, _assertRegex)(*args, **kwargs)
+
+
+def assertNotRegex(self, *args, **kwargs):
+    return getattr(self, _assertNotRegex)(*args, **kwargs)
+
+
+if PY3:
+    exec_ = getattr(moves.builtins, "exec")
+
+    def reraise(tp, value, tb=None):
+        try:
+            if value is None:
+                value = tp()
+            if value.__traceback__ is not tb:
+                raise value.with_traceback(tb)
+            raise value
+        finally:
+            value = None
+            tb = None
+
+else:
+    def exec_(_code_, _globs_=None, _locs_=None):
+        """Execute code in a namespace."""
+        if _globs_ is None:
+            frame = sys._getframe(1)
+            _globs_ = frame.f_globals
+            if _locs_ is None:
+                _locs_ = frame.f_locals
+            del frame
+        elif _locs_ is None:
+            _locs_ = _globs_
+        exec("""exec _code_ in _globs_, _locs_""")
+
+    exec_("""def reraise(tp, value, tb=None):
+    try:
+        raise tp, value, tb
+    finally:
+        tb = None
+""")
+
+
+if sys.version_info[:2] > (3,):
+    exec_("""def raise_from(value, from_value):
+    try:
+        raise value from from_value
+    finally:
+        value = None
+""")
+else:
+    def raise_from(value, from_value):
+        raise value
+
+
+print_ = getattr(moves.builtins, "print", None)
+if print_ is None:
+    def print_(*args, **kwargs):
+        """The new-style print function for Python 2.4 and 2.5."""
+        fp = kwargs.pop("file", sys.stdout)
+        if fp is None:
+            return
+
+        def write(data):
+            if not isinstance(data, basestring):
+                data = str(data)
+            # If the file has an encoding, encode unicode with it.
+            if (isinstance(fp, file) and
+                    isinstance(data, unicode) and
+                    fp.encoding is not None):
+                errors = getattr(fp, "errors", None)
+                if errors is None:
+                    errors = "strict"
+                data = data.encode(fp.encoding, errors)
+            fp.write(data)
+        want_unicode = False
+        sep = kwargs.pop("sep", None)
+        if sep is not None:
+            if isinstance(sep, unicode):
+                want_unicode = True
+            elif not isinstance(sep, str):
+                raise TypeError("sep must be None or a string")
+        end = kwargs.pop("end", None)
+        if end is not None:
+            if isinstance(end, unicode):
+                want_unicode = True
+            elif not isinstance(end, str):
+                raise TypeError("end must be None or a string")
+        if kwargs:
+            raise TypeError("invalid keyword arguments to print()")
+        if not want_unicode:
+            for arg in args:
+                if isinstance(arg, unicode):
+                    want_unicode = True
+                    break
+        if want_unicode:
+            newline = unicode("\n")
+            space = unicode(" ")
+        else:
+            newline = "\n"
+            space = " "
+        if sep is None:
+            sep = space
+        if end is None:
+            end = newline
+        for i, arg in enumerate(args):
+            if i:
+                write(sep)
+            write(arg)
+        write(end)
+if sys.version_info[:2] < (3, 3):
+    _print = print_
+
+    def print_(*args, **kwargs):
+        fp = kwargs.get("file", sys.stdout)
+        flush = kwargs.pop("flush", False)
+        _print(*args, **kwargs)
+        if flush and fp is not None:
+            fp.flush()
+
+_add_doc(reraise, """Reraise an exception.""")
+
+if sys.version_info[0:2] < (3, 4):
+    # This does exactly the same what the :func:`py3:functools.update_wrapper`
+    # function does on Python versions after 3.2. It sets the ``__wrapped__``
+    # attribute on ``wrapper`` object and it doesn't raise an error if any of
+    # the attributes mentioned in ``assigned`` and ``updated`` are missing on
+    # ``wrapped`` object.
+    def _update_wrapper(wrapper, wrapped,
+                        assigned=functools.WRAPPER_ASSIGNMENTS,
+                        updated=functools.WRAPPER_UPDATES):
+        for attr in assigned:
+            try:
+                value = getattr(wrapped, attr)
+            except AttributeError:
+                continue
+            else:
+                setattr(wrapper, attr, value)
+        for attr in updated:
+            getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
+        wrapper.__wrapped__ = wrapped
+        return wrapper
+    _update_wrapper.__doc__ = functools.update_wrapper.__doc__
+
+    def wraps(wrapped, assigned=functools.WRAPPER_ASSIGNMENTS,
+              updated=functools.WRAPPER_UPDATES):
+        return functools.partial(_update_wrapper, wrapped=wrapped,
+                                 assigned=assigned, updated=updated)
+    wraps.__doc__ = functools.wraps.__doc__
+
+else:
+    wraps = functools.wraps
+
+
+def with_metaclass(meta, *bases):
+    """Create a base class with a metaclass."""
+    # This requires a bit of explanation: the basic idea is to make a dummy
+    # metaclass for one level of class instantiation that replaces itself with
+    # the actual metaclass.
+    class metaclass(type):
+
+        def __new__(cls, name, this_bases, d):
+            if sys.version_info[:2] >= (3, 7):
+                # This version introduced PEP 560 that requires a bit
+                # of extra care (we mimic what is done by __build_class__).
+                resolved_bases = types.resolve_bases(bases)
+                if resolved_bases is not bases:
+                    d['__orig_bases__'] = bases
+            else:
+                resolved_bases = bases
+            return meta(name, resolved_bases, d)
+
+        @classmethod
+        def __prepare__(cls, name, this_bases):
+            return meta.__prepare__(name, bases)
+    return type.__new__(metaclass, 'temporary_class', (), {})
+
+
+def add_metaclass(metaclass):
+    """Class decorator for creating a class with a metaclass."""
+    def wrapper(cls):
+        orig_vars = cls.__dict__.copy()
+        slots = orig_vars.get('__slots__')
+        if slots is not None:
+            if isinstance(slots, str):
+                slots = [slots]
+            for slots_var in slots:
+                orig_vars.pop(slots_var)
+        orig_vars.pop('__dict__', None)
+        orig_vars.pop('__weakref__', None)
+        if hasattr(cls, '__qualname__'):
+            orig_vars['__qualname__'] = cls.__qualname__
+        return metaclass(cls.__name__, cls.__bases__, orig_vars)
+    return wrapper
+
+
+def ensure_binary(s, encoding='utf-8', errors='strict'):
+    """Coerce **s** to six.binary_type.
+
+    For Python 2:
+      - `unicode` -> encoded to `str`
+      - `str` -> `str`
+
+    For Python 3:
+      - `str` -> encoded to `bytes`
+      - `bytes` -> `bytes`
+    """
+    if isinstance(s, binary_type):
+        return s
+    if isinstance(s, text_type):
+        return s.encode(encoding, errors)
+    raise TypeError("not expecting type '%s'" % type(s))
+
+
+def ensure_str(s, encoding='utf-8', errors='strict'):
+    """Coerce *s* to `str`.
+
+    For Python 2:
+      - `unicode` -> encoded to `str`
+      - `str` -> `str`
+
+    For Python 3:
+      - `str` -> `str`
+      - `bytes` -> decoded to `str`
+    """
+    # Optimization: Fast return for the common case.
+    if type(s) is str:
+        return s
+    if PY2 and isinstance(s, text_type):
+        return s.encode(encoding, errors)
+    elif PY3 and isinstance(s, binary_type):
+        return s.decode(encoding, errors)
+    elif not isinstance(s, (text_type, binary_type)):
+        raise TypeError("not expecting type '%s'" % type(s))
+    return s
+
+
+def ensure_text(s, encoding='utf-8', errors='strict'):
+    """Coerce *s* to six.text_type.
+
+    For Python 2:
+      - `unicode` -> `unicode`
+      - `str` -> `unicode`
+
+    For Python 3:
+      - `str` -> `str`
+      - `bytes` -> decoded to `str`
+    """
+    if isinstance(s, binary_type):
+        return s.decode(encoding, errors)
+    elif isinstance(s, text_type):
+        return s
+    else:
+        raise TypeError("not expecting type '%s'" % type(s))
+
+
+def python_2_unicode_compatible(klass):
+    """
+    A class decorator that defines __unicode__ and __str__ methods under Python 2.
+    Under Python 3 it does nothing.
+
+    To support Python 2 and 3 with a single code base, define a __str__ method
+    returning text and apply this decorator to the class.
+    """
+    if PY2:
+        if '__str__' not in klass.__dict__:
+            raise ValueError("@python_2_unicode_compatible cannot be applied "
+                             "to %s because it doesn't define __str__()." %
+                             klass.__name__)
+        klass.__unicode__ = klass.__str__
+        klass.__str__ = lambda self: self.__unicode__().encode('utf-8')
+    return klass
+
+
+# Complete the moves implementation.
+# This code is at the end of this module to speed up module loading.
+# Turn this module into a package.
+__path__ = []  # required for PEP 302 and PEP 451
+__package__ = __name__  # see PEP 366 @ReservedAssignment
+if globals().get("__spec__") is not None:
+    __spec__.submodule_search_locations = []  # PEP 451 @UndefinedVariable
+# Remove other six meta path importers, since they cause problems. This can
+# happen if six is removed from sys.modules and then reloaded. (Setuptools does
+# this for some reason.)
+if sys.meta_path:
+    for i, importer in enumerate(sys.meta_path):
+        # Here's some real nastiness: Another "instance" of the six module might
+        # be floating around. Therefore, we can't use isinstance() to check for
+        # the six meta path importer, since the other six instance will have
+        # inserted an importer with different class.
+        if (type(importer).__name__ == "_SixMetaPathImporter" and
+                importer.name == __name__):
+            del sys.meta_path[i]
+            break
+    del i, importer
+# Finally, add the importer to the meta path import hook.
+sys.meta_path.append(_importer)
-- 
2.42.0.windows.1

